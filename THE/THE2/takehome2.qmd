---
title: "Takehome 2"
date: "September 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
format:
  html:
    toc: true
---

# Introduction : Drug Abuse in Thailand

This assignment aims to learn:

-   if the key indicators of drug abuse in Thailand are **spatially dependent**

-   if so, detect the **clusters, outliers, and hotspots**

```{r}
pacman:: p_load(sf, tmap, tidyverse, sfdep,spdep)
```

```{r}
drug_offenses <- read_csv("data/archive/thai_drug_offenses_2017_2022.csv") %>%
  filter(types_of_drug_offenses == "drug_use_cases")
```

```{r}
drug_offenses <- drug_offenses %>%
  mutate(province_en = case_when(
    province_en == "buogkan" ~ "Bueng Kan",
    province_en == "Loburi" ~ "Lop Buri",
    TRUE ~ province_en
  ))
```

```{r}
adm1 <- st_read("data/adm", layer = "tha_admbnda_adm1_rtsd_20220121")
```

```{r}
drug_offenses <- drug_offenses %>% select(-province_th)
adm1 <- adm1 %>% select(-ADM1_TH, -ADM1ALT1TH, -ADM1ALT2TH, -ADM0_TH)
```

```{r}
jointable <- left_join(drug_offenses, adm1, by = c("province_en" = "ADM1_EN"))
```

```{r}
summary(jointable)
```

```{r}
drugoff_sf <- st_as_sf(jointable)

# Set the CRS to match adm1
st_crs(drugoff_sf) <- st_crs(adm1)

# Verify the CRS
print(st_crs(drugoff_sf))

# Check the class of the geometry column
print(class(drugoff_sf$geometry))
```

```         
# write_rds(drugoff_sf, "data/rds/drugoff.rds)
```

```{r}
tmap_mode("plot")

```

```{r}
plots <- list()

for (i in 2017:2022){
  p <- drugoff_sf %>%
    filter(fiscal_year == i) %>%
    tm_shape() +
    tm_polygons("no_cases")
  
  plots[[paste0("plot", i)]] <- p
}

```

```{r}
drugoff_list <- split(drugoff_sf, drugoff_sf$fiscal_year)
```

```{r}
tm_shape(drugoff_sf) +
  tm_fill("no_cases",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

```

can see quite clearly that the northeast and the south have the most cases. pretty unexpected as the northwest is where the actual golden triangle is located, but northeast is probably where the trafficking routes pass through on the way to the coastal ports

so ill be looking \@ drug use cases alongside import and trafficking cases

```{r}
#| eval: false
tmap_mode("plot")

plot_list <- list()

# Loop through the drugoff_list and create each year's plot, storing them in plot_list
for (year in names(drugoff_list)) {
  p <- tm_shape(drugoff_list[[year]]) +
      tm_fill("no_cases",
              n = 5,
              style = "quantile",
              title = "Number of Cases") +  # Set legend title
      tm_borders(alpha = 0.5) +
      tm_layout(main.title = paste("Equal Quantile Classification", year),
                main.title.size = 0.8,         # Adjust the title size
                main.title.position = c("center", "top"),  # Center the title
                frame = FALSE,                # Remove the frame around the plot
                legend.outside = TRUE,        # Place the legend outside the plot
                legend.outside.position = "right")
  
  # Store the plot in the list
  plot_list[[year]] <- p
}

# Arrange the plots in a 2x3 layout
tmap_arrange(plotlist = plot_list, ncol = 2, nrow = 3)

```

![](data/rds/drug_use_eqc.png)

The drug use is pretty bad from 17-19, but started declining in 2020(covid? maybe). Analysis will thus be conducted on the worst year, 2018.

# DRUG USE CASES 2018

```{r}
drugoff_list[[2]]
```

The dataset has Phuket as a province with no neighbors, presumably due to it being an island. The code below manually connects it to the nearest province, Phang Nga.

```{r}
# Generate neighbors list
wm_q_DUC18 <- drugoff_list[[2]] %>%
  mutate(nb = st_contiguity(geometry))

# Manually modify the empty neighbor set
# Suppose the empty neighbor set is at index 'empty_index' and its nearest neighbor is at index 'nearest_index'

empty_index <- 68   # Index of the geometry with the empty neighbor set
nearest_index <- 67  # Index of the nearest neighbor

# Manually add the nearest neighbor to the empty set
wm_q_DUC18$nb[[empty_index]] <- as.integer(nearest_index)
```

This code chunk derives the Queen's contiguity weights. The arguments used in the sfdep method st_weights() are:

nb - a neighbor list object created from st_neighbors()

style - possible params are:

-   W: row standardised weights

-   B: basic binary coding

-   C: globally standardised

-   U: C/(num_neighbors)

-   minmax: divides the weights by the minimum of the maximum row sums and maximum column sums of the input weights, similar to C

-   S: Tiefelsdorf's variance stabilizing coding scheme

```{r}
# Now, calculate the weights after modifying the neighbor list
wm_q_DUC18 <- wm_q_DUC18 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)

```

global_moran() is used to compute the Moran's I value.

```{r}
moranI_DUC18 <- global_moran(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt)

glimpse(moranI_DUC18)

```

Perform Moran's I test with global_moran_test()

```{r}
global_moran_test(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt)
```

set seed

```{r}
set.seed(777)
```

Monte Carlo simulation using global_moran_perm()

```{r}
global_moran_perm(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt, nsim = 99)
```

A Local Indicator of Spatial Association (LISA) map is a categorical map showing outliers and clusters. There are 4 types:

-   High-Low: Negative Autocorrelation - a high outlier amongst low neighbors

-   Low-High: Negative Autocorrelation - a low outlier amongst high neighbors

-   High-High: Positive Autocorrelation - a high cluster of neighbors

-   Low-Low: Positive Autocorrelation - a low cluster of neighbors

```{r}
lisa_DUC18 <- wm_q_DUC18 %>% 
  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
```

Visualising and comparing local Moran's I and p-value of local Moran's I

```{r}
map1 <- tm_shape(lisa_DUC18) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of no_cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_DUC18) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig_DUC18 <- lisa_DUC18 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
```

Plotting the mean LISA category

```{r}
tm_shape(lisa_DUC18) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig_DUC18) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

Derive spatial weight matrix before computing local Gi\* statistics for HCSA analysis

```{r}
wm_idw_DUC18 <- wm_q_DUC18 %>%
  mutate(wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

Computing local Gi\*

```{r}
HCSA_DUC18 <- wm_idw_DUC18 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA_DUC18
```

```{r}
tmap_mode("plot")
```

Plotting Gi\*

```{r}
tm_shape(HCSA_DUC18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_DUC18) + tm_fill("p_sim") + tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
```

Visualising local Hot and Cold Spot Analysis

```{r}
map1 <- tm_shape(HCSA_DUC18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of drug use cases",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_DUC18) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig_DUC18 <- HCSA_DUC18  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_DUC18) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig_DUC18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.4)
```

The hotspot areas coincide with the high-high cluster identified earlier.

ok now that weve seen the drug use cases in 2018, lets see how they get the drugs there

# DRUG TRAFFICKING 2018

drug flow mainly comes from land and sea.

creating frame for trafficking cases:

```{r}
traff_offenses <- read_csv("data/archive/thai_drug_offenses_2017_2022.csv") %>%
  filter(types_of_drug_offenses == "trafficking_cases")
```

```{r}
traff_offenses <- traff_offenses %>%
  mutate(province_en = case_when(
    province_en == "buogkan" ~ "Bueng Kan",
    province_en == "Loburi" ~ "Lop Buri",
    TRUE ~ province_en
  ))
```

```{r}
traff_offenses<- traff_offenses %>% select(-province_th)
```

```{r}
jointable_traff <- left_join(traff_offenses, adm1, by = c("province_en" = "ADM1_EN"))
```

```{r}
summary(jointable_traff)
```

```{r}
traffoff_sf <- st_as_sf(jointable_traff)

# Set the CRS to match adm1
st_crs(traffoff_sf) <- st_crs(adm1)

# Verify the CRS
print(st_crs(traffoff_sf))

# Check the class of the geometry column
print(class(traffoff_sf$geometry))
```

```{r}
traffoff_list <- split(traffoff_sf, traffoff_sf$fiscal_year)
```

```{r}
traffoff_list[[2]]
```

```{r}
# Generate neighbors list
wm_q_traff18 <- traffoff_list[[2]] %>%
  mutate(nb = st_contiguity(geometry))

# Manually modify the empty neighbor set
# Suppose the empty neighbor set is at index 'empty_index' and its nearest neighbor is at index 'nearest_index'

empty_index <- 68   # Index of the geometry with the empty neighbor set
nearest_index <- 67  # Index of the nearest neighbor

# Manually add the nearest neighbor to the empty set
wm_q_traff18$nb[[empty_index]] <- as.integer(nearest_index)

# Now, calculate the weights after modifying the neighbor list
wm_q_traff18 <- wm_q_traff18 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)

```

```{r}
moranI_traff18 <- global_moran(wm_q_traff18$no_cases, wm_q_traff18$nb, wm_q_traff18$wt)

glimpse(moranI_traff18)

```

```{r}
global_moran_test(wm_q_traff18$no_cases, wm_q_traff18$nb, wm_q_traff18$wt)
```

set seed

```{r}
set.seed(777)
```

```{r}
global_moran_perm(wm_q_traff18$no_cases, wm_q_traff18$nb, wm_q_traff18$wt, nsim = 99)
```

```{r}
lisa_traff18 <- wm_q_traff18 %>% 
  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
```

```{r}
map1 <- tm_shape(lisa_traff18) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of no_cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_traff18) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig_traff18 <- lisa_traff18 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
```

```{r}
tm_shape(lisa_traff18) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig_traff18) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

Looking at the areas highlighted, there are significant high-high spots in the northeast and northwest, consistent with our hypothesis that trafficking routes are coming from the Burmese and Cambodian border

```{r}
wm_idw_traff18 <- wm_q_traff18 %>%
  mutate(wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA_traff18 <- wm_idw_traff18 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA_traff18
```

```{r}
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_traff18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_traff18) + tm_fill("p_sim") + tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
```

```{r}
map1 <- tm_shape(HCSA_traff18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of trafficking",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_traff18) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

Drug trafficking cases increase in intensity closer to the central areas of Thailand

```{r}
HCSA_sig_traff18 <- HCSA_traff18  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_traff18) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig_traff18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.4)
```

# DRUG IMPORT 2018

sama sama for import cases:

```{r}
import_offenses <- read_csv("data/archive/thai_drug_offenses_2017_2022.csv") %>%
  filter(types_of_drug_offenses == "import_cases")
```

```{r}
import_offenses <- import_offenses %>%
  mutate(province_en = case_when(
    province_en == "buogkan" ~ "Bueng Kan",
    province_en == "Loburi" ~ "Lop Buri",
    TRUE ~ province_en
  ))
```

```{r}
import_offenses <- import_offenses %>% select(-province_th)
```

```{r}
jointable_imp <- left_join(import_offenses, adm1, by = c("province_en" = "ADM1_EN"))
```

```{r}
summary(jointable_imp)
```

```{r}
impoff_sf <- st_as_sf(jointable_imp)

# Set the CRS to match adm1
st_crs(impoff_sf) <- st_crs(adm1)

# Verify the CRS
print(st_crs(impoff_sf))

# Check the class of the geometry column
print(class(impoff_sf$geometry))
```

```{r}
impoff_list <- split(impoff_sf, impoff_sf$fiscal_year)
```

```{r}
impoff_list[[2]]
```

```{r}
# Generate neighbors list
wm_q_imp18 <- impoff_list[[2]] %>%
  mutate(nb = st_contiguity(geometry))

# Manually modify the empty neighbor set
# Suppose the empty neighbor set is at index 'empty_index' and its nearest neighbor is at index 'nearest_index'

empty_index <- 68   # Index of the geometry with the empty neighbor set
nearest_index <- 67  # Index of the nearest neighbor

# Manually add the nearest neighbor to the empty set
wm_q_imp18$nb[[empty_index]] <- as.integer(nearest_index)

# Now, calculate the weights after modifying the neighbor list
wm_q_imp18 <- wm_q_imp18 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)

```

```{r}
moranI_imp18 <- global_moran(wm_q_imp18$no_cases, wm_q_imp18$nb, wm_q_imp18$wt)

glimpse(moranI_imp18)

```

```{r}
global_moran_test(wm_q_imp18$no_cases, wm_q_imp18$nb, wm_q_imp18$wt)
```

set seed

```{r}
set.seed(777)
```

```{r}
global_moran_perm(wm_q_imp18$no_cases, wm_q_imp18$nb, wm_q_imp18$wt, nsim = 99)
```

```{r}
lisa_imp18 <- wm_q_imp18 %>% 
  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
```

```{r}
map1 <- tm_shape(lisa_imp18) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of no_cases",
            main.title.size = 0.8)

map2 <- tm_shape(lisa_imp18) +
  tm_fill("p_ii",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig_imp18 <- lisa_imp18 %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
```

```{r}
tm_shape(lisa_imp18) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig_imp18) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

```{r}
wm_idw_imp18 <- wm_q_imp18 %>%
  mutate(wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA_imp18 <- wm_idw_imp18 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
HCSA_imp18
```

```{r}
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_imp18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_imp18) + tm_fill("p_sim") + tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
```

```{r}
map1 <- tm_shape(HCSA_imp18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of impicking",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_imp18) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig_imp18 <- HCSA_imp18  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
```

```{r}
tm_shape(HCSA_imp18) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig_imp18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.4)
```

How does this relate to the seaports in Thailand?

```{r}
ports <- st_read("data/WPI_Shapefile", layer = "WPI")%>%
  filter(COUNTRY == "TH" & 
           !PORT_NAME %in% c("BONGKOT TERMINAL", "TANTAWAN MARINE TERMINAL","ERAWAN TERMINAL","BENCHAMAS TERMINAL"))
```

```{r}
tm_shape(HCSA_imp18) +
  tm_fill("gi_star", palette = "-RdBu", style = "cont") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) + tm_shape(ports) + tm_dots(size = 0.1)
```

wery interestings

looks like the southern areas with many ports as well as the northeastern border with laos have high imports -\> seems legit to me!
