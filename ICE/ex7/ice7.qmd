---
title: "ICE7"
date: "OCtober 21, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)

```

import from rds
```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
shan_ict <- read_rds("data/rds/shan_ict.rds")
shan_sf_cluster <- read_rds("data/rds/shan_sf_cluster.rds")
```


Conventional Hierarchical Clustering


Hierachical clustering
```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
hclust_ward <- hclust(proxmat, method = 'ward.D')
groups <- as.factor(cutree(hclust_ward, k=6))
```

Append to the geospatial data
```{r}
shan_sf_cluster <- cbind(shan_sf, 
                         as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`) %>%
  select(-c(3:4, 7:9)) %>%
  rename(TS = TS.x)
```


The dendrogram
```{r}
#| fig-height: 7
#| fig-width: 12
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k = 6, border = 2:5)
```


Cluster map
```{r}
#| fig-height: 7
qtm(shan_sf_cluster, "CLUSTER")
#qtm useful for categorical data
```

Spatially Constrained Clustering: SKATER method


Computing nearest neighbours
```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

------------------------------------------------------------------------

Visualising the neighbours
```{r}
#| eval: false
plot(st_geometry(shan_sf), 
     border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, 
     pts, 
     col="blue", 
     add=TRUE)
```


```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 13
plot(st_geometry(shan_sf), 
     border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, 
     pts, 
     col="blue", 
     add=TRUE)
```

------------------------------------------------------------------------

Computing minimum spanning tree

Calculating edge costs
```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```


Incorporating these costs into a weights object
```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```
style = "B" > binary calc , impt, nochangethis

Computing MST
```{r}
shan.mst <- mstree(shan.w)
```


Visualising MST
```{r}
#| eval: false
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot.mst(shan.mst, 
         pts, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

```{r}
#| echo: false
#| fig-height: 10
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot.mst(shan.mst, 
         pts, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```


Computing spatially constrained clusters using SKATER method


```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

Skater tree
```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 8
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot(skater.clust6, 
     pts, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

Plot skater tree
```{r}
#| eval: false
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot(skater.clust6, 
     pts, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

Visualising the clusters in choropleth map


```{r}
#| echo: false
#| fig-height: 7
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

```{r}
#| eval: false
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

------------------------------------------------------------------------

Plotting the cluster maps


```{r}
#| eval: false
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```



```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 8
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```


ClustGeo Spatially Constrained Clustering


Computing spatial distance matrix
```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

Cluster graphs 
```{r}
#| echo: false
cr <- choicealpha(proxmat, distmat, 
                  range.alpha = seq(0, 1, 0.1), 
                  K=6, graph = TRUE)
```




```{r}
#| eval: false
cr <- choicealpha(proxmat, distmat, 
                  range.alpha = seq(0, 1, 0.1), 
                  K=6, graph = TRUE)
```

Saving clustGeo output 


```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2) #<- alpha from graphs above
groups <- as.factor(cutree(clustG, k=6))
shan_sf_clustGeo <- cbind(shan_sf, 
                          as.matrix(groups)) %>%
  rename(`clustGeo` = `as.matrix.groups.`)
```

---

Visualising the clustGeo map
```{r}
#| fig-height: 8
qtm(shan_sf_clustGeo, "clustGeo")
```


------------------------------------------------------------------------

Comparing cluster maps
```{r}
#| eval: false
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

clustGeo.map <- qtm(shan_sf_clustGeo,
                   "clustGeo") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map, 
             clustGeo.map,
             asp=NA, ncol=3)
```

```{r}
#| echo: false
#| fig-width: 16
#| fig-height: 6
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

clustGeo.map <- qtm(shan_sf_clustGeo,
                   "clustGeo") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map, 
             clustGeo.map,
             asp=NA, ncol=3)
```

Characterising the clusters

```{r}
#| echo: false
#| fig-width: 20
#| fig-height: 8
ggparcoord(data = shan_sf_clustGeo, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) + 
  theme(axis.text.x = element_text(angle = 30))
```


```{r}
#| eval: false
ggparcoord(data = shan_sf_clustGeo, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) + 
  theme(axis.text.x = element_text(angle = 30))
```
