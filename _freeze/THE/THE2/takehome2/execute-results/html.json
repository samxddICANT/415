{
  "hash": "72219370b331647c162bc503da96a509",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Takehome 2\"\ndate: \"September 11, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\nformat:\n  html:\n    toc: true\n---\n\n\n# Introduction : Drug Abuse in Thailand\n\nThis assignment aims to learn:\n\n-   if the key indicators of drug abuse in Thailand are **spatially dependent**\n\n-   if so, detect the **clusters, outliers, and hotspots**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman:: p_load(sf, tmap, tidyverse, sfdep,spdep)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offenses <- read_csv(\"data/archive/thai_drug_offenses_2017_2022.csv\") %>%\n  filter(types_of_drug_offenses == \"drug_use_cases\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offenses <- drug_offenses %>%\n  mutate(province_en = case_when(\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadm1 <- st_read(\"data/adm\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\THE\\THE2\\data\\adm' using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offenses <- drug_offenses %>% select(-province_th)\nadm1 <- adm1 %>% select(-ADM1_TH, -ADM1ALT1TH, -ADM1ALT2TH, -ADM0_TH)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njointable <- left_join(drug_offenses, adm1, by = c(\"province_en\" = \"ADM1_EN\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(jointable)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  fiscal_year   types_of_drug_offenses    no_cases       province_en       \n Min.   :2017   Length:462             Min.   :   32.0   Length:462        \n 1st Qu.:2018   Class :character       1st Qu.:  798.2   Class :character  \n Median :2020   Mode  :character       Median : 1403.5   Mode  :character  \n Mean   :2020                          Mean   : 1981.7                     \n 3rd Qu.:2021                          3rd Qu.: 2440.2                     \n Max.   :2022                          Max.   :16480.0                     \n   Shape_Leng       Shape_Area       ADM1_PCODE          ADM1_REF        \n Min.   : 1.024   Min.   :0.03458   Length:462         Length:462        \n 1st Qu.: 4.163   1st Qu.:0.29209   Class :character   Class :character  \n Median : 5.463   Median :0.47344   Mode  :character   Mode  :character  \n Mean   : 5.726   Mean   :0.56368                                        \n 3rd Qu.: 7.200   3rd Qu.:0.80197                                        \n Max.   :13.777   Max.   :1.90055                                        \n  ADM1ALT1EN         ADM1ALT2EN          ADM0_EN           ADM0_PCODE       \n Length:462         Length:462         Length:462         Length:462        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry  \n MULTIPOLYGON :462  \n epsg:4326    :  0  \n +proj=long...:  0  \n                    \n                    \n                    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugoff_sf <- st_as_sf(jointable)\n\n# Set the CRS to match adm1\nst_crs(drugoff_sf) <- st_crs(adm1)\n\n# Verify the CRS\nprint(st_crs(drugoff_sf))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the class of the geometry column\nprint(class(drugoff_sf$geometry))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n:::\n\n\n```         \n# write_rds(drugoff_sf, \"data/rds/drugoff.rds)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplots <- list()\n\nfor (i in 2017:2022){\n  p <- drugoff_sf %>%\n    filter(fiscal_year == i) %>%\n    tm_shape() +\n    tm_polygons(\"no_cases\")\n  \n  plots[[paste0(\"plot\", i)]] <- p\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugoff_list <- split(drugoff_sf, drugoff_sf$fiscal_year)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(drugoff_sf) +\n  tm_fill(\"no_cases\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61, 0.61, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\ncan see quite clearly that the northeast and the south have the most cases. pretty unexpected as the northwest is where the actual golden triangle is located, but northeast is probably where the trafficking routes pass through on the way to the coastal ports\n\nso ill be looking \\@ drug use cases alongside import and trafficking cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\nplot_list <- list()\n\n# Loop through the drugoff_list and create each year's plot, storing them in plot_list\nfor (year in names(drugoff_list)) {\n  p <- tm_shape(drugoff_list[[year]]) +\n      tm_fill(\"no_cases\",\n              n = 5,\n              style = \"quantile\",\n              title = \"Number of Cases\") +  # Set legend title\n      tm_borders(alpha = 0.5) +\n      tm_layout(main.title = paste(\"Equal Quantile Classification\", year),\n                main.title.size = 0.8,         # Adjust the title size\n                main.title.position = c(\"center\", \"top\"),  # Center the title\n                frame = FALSE,                # Remove the frame around the plot\n                legend.outside = TRUE,        # Place the legend outside the plot\n                legend.outside.position = \"right\")\n  \n  # Store the plot in the list\n  plot_list[[year]] <- p\n}\n\n# Arrange the plots in a 2x3 layout\ntmap_arrange(plotlist = plot_list, ncol = 2, nrow = 3)\n```\n:::\n\n\n![](data/rds/drug_use_eqc.png)\n\nThe drug use is pretty bad from 17-19, but started declining in 2020(covid? maybe). Analysis will thus be conducted on the worst year, 2018.\n\n# DRUG USE CASES 2018\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugoff_list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 16\n   fiscal_year types_of_drug_offenses no_cases province_en Shape_Leng Shape_Area\n         <dbl> <chr>                     <dbl> <chr>            <dbl>      <dbl>\n 1        2018 drug_use_cases            16480 Bangkok           2.42     0.131 \n 2        2018 drug_use_cases              422 Chai Nat          2.90     0.209 \n 3        2018 drug_use_cases             1661 Nonthaburi        1.25     0.0532\n 4        2018 drug_use_cases             1823 Pathum Tha…       1.88     0.127 \n 5        2018 drug_use_cases             1123 Phra Nakho…       3.04     0.214 \n 6        2018 drug_use_cases             1850 Lop Buri          5.69     0.546 \n 7        2018 drug_use_cases             3015 Samut Prak…       1.70     0.0793\n 8        2018 drug_use_cases              628 Saraburi          4.77     0.292 \n 9        2018 drug_use_cases              402 Sing Buri         1.78     0.0687\n10        2018 drug_use_cases              660 Ang Thong         1.74     0.0792\n# ℹ 67 more rows\n# ℹ 10 more variables: ADM1_PCODE <chr>, ADM1_REF <chr>, ADM1ALT1EN <chr>,\n#   ADM1ALT2EN <chr>, ADM0_EN <chr>, ADM0_PCODE <chr>, date <date>,\n#   validOn <date>, validTo <date>, geometry <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n\nThe dataset has Phuket as a province with no neighbors, presumably due to it being an island. The code below manually connects it to the nearest province, Phang Nga.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate neighbors list\nwm_q_DUC18 <- drugoff_list[[2]] %>%\n  mutate(nb = st_contiguity(geometry))\n\n# Manually modify the empty neighbor set\n# Suppose the empty neighbor set is at index 'empty_index' and its nearest neighbor is at index 'nearest_index'\n\nempty_index <- 68   # Index of the geometry with the empty neighbor set\nnearest_index <- 67  # Index of the nearest neighbor\n\n# Manually add the nearest neighbor to the empty set\nwm_q_DUC18$nb[[empty_index]] <- as.integer(nearest_index)\n```\n:::\n\n\nThis code chunk derives the Queen's contiguity weights. The arguments used in the sfdep method st_weights() are:\n\nnb - a neighbor list object created from st_neighbors()\n\nstyle - possible params are:\n\n-   W: row standardised weights\n\n-   B: basic binary coding\n\n-   C: globally standardised\n\n-   U: C/(num_neighbors)\n\n-   minmax: divides the weights by the minimum of the maximum row sums and maximum column sums of the input weights, similar to C\n\n-   S: Tiefelsdorf's variance stabilizing coding scheme\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now, calculate the weights after modifying the neighbor list\nwm_q_DUC18 <- wm_q_DUC18 %>%\n  mutate(wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n```\n:::\n\n\nglobal_moran() is used to compute the Moran's I value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI_DUC18 <- global_moran(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt)\n\nglimpse(moranI_DUC18)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.0952\n $ K: num 27\n```\n\n\n:::\n:::\n\n\nPerform Moran's I test with global_moran_test()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.7246, p-value = 0.0423\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.095202524      -0.013157895       0.003947668 \n```\n\n\n:::\n:::\n\n\nset seed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(777)\n```\n:::\n\n\nMonte Carlo simulation using global_moran_perm()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.095203, observed rank = 92, p-value = 0.16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nA Local Indicator of Spatial Association (LISA) map is a categorical map showing outliers and clusters. There are 4 types:\n\n-   High-Low: Negative Autocorrelation - a high outlier amongst low neighbors\n\n-   Low-High: Negative Autocorrelation - a low outlier amongst high neighbors\n\n-   High-High: Positive Autocorrelation - a high cluster of neighbors\n\n-   Low-Low: Positive Autocorrelation - a low cluster of neighbors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_DUC18 <- wm_q_DUC18 %>% \n  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\nVisualising and comparing local Moran's I and p-value of local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa_DUC18) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of no_cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa_DUC18) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig_DUC18 <- lisa_DUC18 %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\nPlotting the mean LISA category\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_DUC18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_DUC18) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nDerive spatial weight matrix before computing local Gi\\* statistics for HCSA analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw_DUC18 <- wm_q_DUC18 %>%\n  mutate(wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n\nComputing local Gi\\*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_DUC18 <- wm_idw_DUC18 %>% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA_DUC18\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 28 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 29\n   gi_star cluster   e_gi    var_gi std_dev  p_value p_sim p_folded_sim skewness\n     <dbl> <fct>    <dbl>     <dbl>   <dbl>    <dbl> <dbl>        <dbl>    <dbl>\n 1  2.71   High    0.0259 0.0000118   0.482  6.30e-1  0.5          0.25    0.821\n 2 -1.28   Low     0.0125 0.0000522  -1.08   2.81e-1  0.06         0.03    1.96 \n 3  3.01   Low     0.0126 0.0000396   3.15   1.62e-3  0.08         0.04    1.95 \n 4  2.18   Low     0.0121 0.0000195   2.85   4.39e-3  0.1          0.05    1.64 \n 5 -0.552  Low     0.0130 0.0000314  -0.490  6.24e-1  0.76         0.38    1.54 \n 6 -0.373  Low     0.0127 0.0000234  -0.296  7.67e-1  0.92         0.46    1.84 \n 7  4.30   High    0.0150 0.0000473   4.99   6.13e-7  0.04         0.02    3.16 \n 8  0.0122 Low     0.0113 0.0000288   0.323  7.47e-1  0.5          0.25    1.71 \n 9 -1.15   Low     0.0113 0.0000323  -0.884  3.77e-1  0.32         0.16    1.68 \n10 -0.833  Low     0.0117 0.0000347  -0.701  4.83e-1  0.48         0.24    1.52 \n# ℹ 67 more rows\n# ℹ 20 more variables: kurtosis <dbl>, wts <list>, wt <list>,\n#   fiscal_year <dbl>, types_of_drug_offenses <chr>, no_cases <dbl>,\n#   province_en <chr>, Shape_Leng <dbl>, Shape_Area <dbl>, ADM1_PCODE <chr>,\n#   ADM1_REF <chr>, ADM1ALT1EN <chr>, ADM1ALT2EN <chr>, ADM0_EN <chr>,\n#   ADM0_PCODE <chr>, date <date>, validOn <date>, validTo <date>,\n#   geometry <MULTIPOLYGON [°]>, nb <nb>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\nPlotting Gi\\*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_DUC18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_DUC18) + tm_fill(\"p_sim\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\nVisualising local Hot and Cold Spot Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(HCSA_DUC18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of drug use cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(HCSA_DUC18) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig_DUC18 <- HCSA_DUC18  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_DUC18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_DUC18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nThe hotspot areas coincide with the high-high cluster identified earlier.\n\nok now that weve seen the drug use cases in 2018, lets see how they get the drugs there\n\n# DRUG TRAFFICKING 2018\n\ndrug flow mainly comes from land and sea.\n\ncreating frame for trafficking cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraff_offenses <- read_csv(\"data/archive/thai_drug_offenses_2017_2022.csv\") %>%\n  filter(types_of_drug_offenses == \"trafficking_cases\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntraff_offenses <- traff_offenses %>%\n  mutate(province_en = case_when(\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntraff_offenses<- traff_offenses %>% select(-province_th)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njointable_traff <- left_join(traff_offenses, adm1, by = c(\"province_en\" = \"ADM1_EN\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(jointable_traff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  fiscal_year   types_of_drug_offenses    no_cases       province_en       \n Min.   :2017   Length:462             Min.   :   3.00   Length:462        \n 1st Qu.:2018   Class :character       1st Qu.:  47.25   Class :character  \n Median :2020   Mode  :character       Median :  94.50   Mode  :character  \n Mean   :2020                          Mean   : 148.01                     \n 3rd Qu.:2021                          3rd Qu.: 196.00                     \n Max.   :2022                          Max.   :1190.00                     \n   Shape_Leng       Shape_Area       ADM1_PCODE          ADM1_REF        \n Min.   : 1.024   Min.   :0.03458   Length:462         Length:462        \n 1st Qu.: 4.163   1st Qu.:0.29209   Class :character   Class :character  \n Median : 5.463   Median :0.47344   Mode  :character   Mode  :character  \n Mean   : 5.726   Mean   :0.56368                                        \n 3rd Qu.: 7.200   3rd Qu.:0.80197                                        \n Max.   :13.777   Max.   :1.90055                                        \n  ADM1ALT1EN         ADM1ALT2EN          ADM0_EN           ADM0_PCODE       \n Length:462         Length:462         Length:462         Length:462        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry  \n MULTIPOLYGON :462  \n epsg:4326    :  0  \n +proj=long...:  0  \n                    \n                    \n                    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntraffoff_sf <- st_as_sf(jointable_traff)\n\n# Set the CRS to match adm1\nst_crs(traffoff_sf) <- st_crs(adm1)\n\n# Verify the CRS\nprint(st_crs(traffoff_sf))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the class of the geometry column\nprint(class(traffoff_sf$geometry))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntraffoff_list <- split(traffoff_sf, traffoff_sf$fiscal_year)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntraffoff_list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 16\n   fiscal_year types_of_drug_offenses no_cases province_en Shape_Leng Shape_Area\n         <dbl> <chr>                     <dbl> <chr>            <dbl>      <dbl>\n 1        2018 trafficking_cases           623 Bangkok           2.42     0.131 \n 2        2018 trafficking_cases           151 Chai Nat          2.90     0.209 \n 3        2018 trafficking_cases           113 Nonthaburi        1.25     0.0532\n 4        2018 trafficking_cases            68 Pathum Tha…       1.88     0.127 \n 5        2018 trafficking_cases           164 Phra Nakho…       3.04     0.214 \n 6        2018 trafficking_cases           234 Lop Buri          5.69     0.546 \n 7        2018 trafficking_cases           112 Samut Prak…       1.70     0.0793\n 8        2018 trafficking_cases            45 Saraburi          4.77     0.292 \n 9        2018 trafficking_cases            44 Sing Buri         1.78     0.0687\n10        2018 trafficking_cases            61 Ang Thong         1.74     0.0792\n# ℹ 67 more rows\n# ℹ 10 more variables: ADM1_PCODE <chr>, ADM1_REF <chr>, ADM1ALT1EN <chr>,\n#   ADM1ALT2EN <chr>, ADM0_EN <chr>, ADM0_PCODE <chr>, date <date>,\n#   validOn <date>, validTo <date>, geometry <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate neighbors list\nwm_q_traff18 <- traffoff_list[[2]] %>%\n  mutate(nb = st_contiguity(geometry))\n\n# Manually modify the empty neighbor set\n# Suppose the empty neighbor set is at index 'empty_index' and its nearest neighbor is at index 'nearest_index'\n\nempty_index <- 68   # Index of the geometry with the empty neighbor set\nnearest_index <- 67  # Index of the nearest neighbor\n\n# Manually add the nearest neighbor to the empty set\nwm_q_traff18$nb[[empty_index]] <- as.integer(nearest_index)\n\n# Now, calculate the weights after modifying the neighbor list\nwm_q_traff18 <- wm_q_traff18 %>%\n  mutate(wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI_traff18 <- global_moran(wm_q_traff18$no_cases, wm_q_traff18$nb, wm_q_traff18$wt)\n\nglimpse(moranI_traff18)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.123\n $ K: num 5.62\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q_traff18$no_cases, wm_q_traff18$nb, wm_q_traff18$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.8068, p-value = 0.0354\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.123187871      -0.013157895       0.005694687 \n```\n\n\n:::\n:::\n\n\nset seed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(777)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q_traff18$no_cases, wm_q_traff18$nb, wm_q_traff18$wt, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.12319, observed rank = 96, p-value = 0.08\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_traff18 <- wm_q_traff18 %>% \n  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa_traff18) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of no_cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa_traff18) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig_traff18 <- lisa_traff18 %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_traff18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_traff18) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\nLooking at the areas highlighted, there are significant high-high spots in the northeast and northwest, consistent with our hypothesis that trafficking routes are coming from the Burmese and Cambodian border\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw_traff18 <- wm_q_traff18 %>%\n  mutate(wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_traff18 <- wm_idw_traff18 %>% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA_traff18\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 28 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 29\n   gi_star cluster   e_gi    var_gi std_dev p_value p_sim p_folded_sim skewness\n     <dbl> <fct>    <dbl>     <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1   0.725 High    0.0180 0.0000159 -0.529   0.597   0.64         0.32    0.503\n 2  -0.660 Low     0.0135 0.0000241 -0.746   0.455   0.4          0.2     1.11 \n 3   1.44  Low     0.0131 0.0000247  1.37    0.170   0.18         0.09    0.712\n 4   0.318 Low     0.0113 0.0000124  0.841   0.400   0.36         0.18    0.528\n 5  -0.594 High    0.0132 0.0000115 -0.706   0.480   0.52         0.26    0.639\n 6   0.275 High    0.0137 0.0000103  0.0721  0.942   1            0.5     0.303\n 7   1.93  Low     0.0117 0.0000315  2.39    0.0170  0.04         0.02    1.16 \n 8  -0.375 Low     0.0113 0.0000169  0.0131  0.990   0.9          0.45    0.452\n 9  -0.483 Low     0.0116 0.0000202 -0.158   0.875   0.98         0.49    0.848\n10  -0.539 Low     0.0114 0.0000196 -0.232   0.817   0.9          0.45    0.624\n# ℹ 67 more rows\n# ℹ 20 more variables: kurtosis <dbl>, wts <list>, wt <list>,\n#   fiscal_year <dbl>, types_of_drug_offenses <chr>, no_cases <dbl>,\n#   province_en <chr>, Shape_Leng <dbl>, Shape_Area <dbl>, ADM1_PCODE <chr>,\n#   ADM1_REF <chr>, ADM1ALT1EN <chr>, ADM1ALT2EN <chr>, ADM0_EN <chr>,\n#   ADM0_PCODE <chr>, date <date>, validOn <date>, validTo <date>,\n#   geometry <MULTIPOLYGON [°]>, nb <nb>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_traff18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_traff18) + tm_fill(\"p_sim\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(HCSA_traff18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of trafficking\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(HCSA_traff18) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\nDrug trafficking cases increase in intensity closer to the central areas of Thailand\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig_traff18 <- HCSA_traff18  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_traff18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_traff18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n# DRUG IMPORT 2018\n\nsama sama for import cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_offenses <- read_csv(\"data/archive/thai_drug_offenses_2017_2022.csv\") %>%\n  filter(types_of_drug_offenses == \"import_cases\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_offenses <- import_offenses %>%\n  mutate(province_en = case_when(\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_offenses <- import_offenses %>% select(-province_th)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njointable_imp <- left_join(import_offenses, adm1, by = c(\"province_en\" = \"ADM1_EN\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(jointable_imp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  fiscal_year   types_of_drug_offenses    no_cases      province_en       \n Min.   :2017   Length:462             Min.   : 0.000   Length:462        \n 1st Qu.:2018   Class :character       1st Qu.: 0.000   Class :character  \n Median :2020   Mode  :character       Median : 0.000   Mode  :character  \n Mean   :2020                          Mean   : 1.861                     \n 3rd Qu.:2021                          3rd Qu.: 1.000                     \n Max.   :2022                          Max.   :77.000                     \n   Shape_Leng       Shape_Area       ADM1_PCODE          ADM1_REF        \n Min.   : 1.024   Min.   :0.03458   Length:462         Length:462        \n 1st Qu.: 4.163   1st Qu.:0.29209   Class :character   Class :character  \n Median : 5.463   Median :0.47344   Mode  :character   Mode  :character  \n Mean   : 5.726   Mean   :0.56368                                        \n 3rd Qu.: 7.200   3rd Qu.:0.80197                                        \n Max.   :13.777   Max.   :1.90055                                        \n  ADM1ALT1EN         ADM1ALT2EN          ADM0_EN           ADM0_PCODE       \n Length:462         Length:462         Length:462         Length:462        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry  \n MULTIPOLYGON :462  \n epsg:4326    :  0  \n +proj=long...:  0  \n                    \n                    \n                    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimpoff_sf <- st_as_sf(jointable_imp)\n\n# Set the CRS to match adm1\nst_crs(impoff_sf) <- st_crs(adm1)\n\n# Verify the CRS\nprint(st_crs(impoff_sf))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the class of the geometry column\nprint(class(impoff_sf$geometry))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimpoff_list <- split(impoff_sf, impoff_sf$fiscal_year)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimpoff_list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 16\n   fiscal_year types_of_drug_offenses no_cases province_en Shape_Leng Shape_Area\n         <dbl> <chr>                     <dbl> <chr>            <dbl>      <dbl>\n 1        2018 import_cases                  1 Bangkok           2.42     0.131 \n 2        2018 import_cases                  0 Chai Nat          2.90     0.209 \n 3        2018 import_cases                  0 Nonthaburi        1.25     0.0532\n 4        2018 import_cases                  0 Pathum Tha…       1.88     0.127 \n 5        2018 import_cases                  0 Phra Nakho…       3.04     0.214 \n 6        2018 import_cases                  0 Lop Buri          5.69     0.546 \n 7        2018 import_cases                  0 Samut Prak…       1.70     0.0793\n 8        2018 import_cases                  0 Saraburi          4.77     0.292 \n 9        2018 import_cases                  0 Sing Buri         1.78     0.0687\n10        2018 import_cases                  0 Ang Thong         1.74     0.0792\n# ℹ 67 more rows\n# ℹ 10 more variables: ADM1_PCODE <chr>, ADM1_REF <chr>, ADM1ALT1EN <chr>,\n#   ADM1ALT2EN <chr>, ADM0_EN <chr>, ADM0_PCODE <chr>, date <date>,\n#   validOn <date>, validTo <date>, geometry <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate neighbors list\nwm_q_imp18 <- impoff_list[[2]] %>%\n  mutate(nb = st_contiguity(geometry))\n\n# Manually modify the empty neighbor set\n# Suppose the empty neighbor set is at index 'empty_index' and its nearest neighbor is at index 'nearest_index'\n\nempty_index <- 68   # Index of the geometry with the empty neighbor set\nnearest_index <- 67  # Index of the nearest neighbor\n\n# Manually add the nearest neighbor to the empty set\nwm_q_imp18$nb[[empty_index]] <- as.integer(nearest_index)\n\n# Now, calculate the weights after modifying the neighbor list\nwm_q_imp18 <- wm_q_imp18 %>%\n  mutate(wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI_imp18 <- global_moran(wm_q_imp18$no_cases, wm_q_imp18$nb, wm_q_imp18$wt)\n\nglimpse(moranI_imp18)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.214\n $ K: num 27.2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q_imp18$no_cases, wm_q_imp18$nb, wm_q_imp18$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.6259, p-value = 0.000144\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.21434476       -0.01315789        0.00393683 \n```\n\n\n:::\n:::\n\n\nset seed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(777)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q_imp18$no_cases, wm_q_imp18$nb, wm_q_imp18$wt, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.21434, observed rank = 98, p-value = 0.04\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_imp18 <- wm_q_imp18 %>% \n  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa_imp18) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of no_cases\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa_imp18) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig_imp18 <- lisa_imp18 %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_imp18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_imp18) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw_imp18 <- wm_q_imp18 %>%\n  mutate(wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_imp18 <- wm_idw_imp18 %>% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA_imp18\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 28 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 29\n   gi_star cluster    e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     <dbl> <fct>     <dbl>    <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1  -0.743 Low     0.0123  0.000200  -0.707   0.480  0.36         0.12     1.67\n 2  -0.751 Low     0.00887 0.000224  -0.592   0.554  0.32         0.01     2.64\n 3  -0.567 Low     0.00920 0.000202  -0.424   0.672  0.94         0.4      2.15\n 4  -0.822 Low     0.00941 0.000122  -0.751   0.453  0.36         0.12     1.66\n 5  -0.896 Low     0.0107  0.000139  -0.825   0.409  0.2          0.07     1.89\n 6  -1.04  Low     0.0138  0.000240  -0.889   0.374  0.08         0.01     1.73\n 7  -0.457 Low     0.00954 0.000440  -0.329   0.742  0.76         0.45     2.61\n 8  -0.828 Low     0.00886 0.000175  -0.669   0.503  0.24         0.01     2.51\n 9  -0.828 Low     0.0101  0.000148  -0.834   0.404  0.12         0.01     1.79\n10  -0.751 Low     0.0101  0.000266  -0.616   0.538  0.24         0.01     2.86\n# ℹ 67 more rows\n# ℹ 20 more variables: kurtosis <dbl>, wts <list>, wt <list>,\n#   fiscal_year <dbl>, types_of_drug_offenses <chr>, no_cases <dbl>,\n#   province_en <chr>, Shape_Leng <dbl>, Shape_Area <dbl>, ADM1_PCODE <chr>,\n#   ADM1_REF <chr>, ADM1ALT1EN <chr>, ADM1ALT2EN <chr>, ADM0_EN <chr>,\n#   ADM0_PCODE <chr>, date <date>, validOn <date>, validTo <date>,\n#   geometry <MULTIPOLYGON [°]>, nb <nb>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_imp18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_imp18) + tm_fill(\"p_sim\") + tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-87-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 <- tm_shape(HCSA_imp18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of impicking\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(HCSA_imp18) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig_imp18 <- HCSA_imp18  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_imp18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_imp18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n\nHow does this relate to the seaports in Thailand?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nports <- st_read(\"data/WPI_Shapefile\", layer = \"WPI\")%>%\n  filter(COUNTRY == \"TH\" & \n           !PORT_NAME %in% c(\"BONGKOT TERMINAL\", \"TANTAWAN MARINE TERMINAL\",\"ERAWAN TERMINAL\",\"BENCHAMAS TERMINAL\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `WPI' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\THE\\THE2\\data\\WPI_Shapefile' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3630 features and 78 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -177.3667 ymin: -77.85 xmax: 179.3667 ymax: 78.91667\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(HCSA_imp18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) + tm_shape(ports) + tm_dots(size = 0.1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome2_files/figure-html/unnamed-chunk-93-1.png){width=672}\n:::\n:::\n\n\nwery interestings\n\nlooks like the southern areas with many ports as well as the northeastern border with laos have high imports -\\> seems legit to me!\n",
    "supporting": [
      "takehome2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}