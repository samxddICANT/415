[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "415",
    "section": "",
    "text": "eyesfouronefive\ngeospatial analytics and applications"
  },
  {
    "objectID": "ICE/ex2/ice2.html",
    "href": "ICE/ex2/ice2.html",
    "title": "ICE 2",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, tmap)\n\n\nmpsz14_shp &lt;- st_read(dsn = \"data/\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nmpsz14_kml &lt;- st_write(mpsz14_shp, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;% st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\ncheck the coordinate system\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\npopdata &lt;- read.csv(\"data/respopagesextod2023.csv\")\n\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;% \n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = list(toupper))\n\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, by = c(\"SZ\" = \"SUBZONE_N\"))\n\n\nmpsz_pop2023 &lt;- left_join(mpsz19_shp, popdata2023, by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "HOE/ex2/ex2.html",
    "href": "HOE/ex2/ex2.html",
    "title": "Exercise 2",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise properties of geographic features that are not naturally visible, a few examples being population, temperature, and crime rate.\nOn the other hand, geovisualisation works by providing graphical ideation to render a place, phenomenon, or process visible, allowing us to utilise our vision to process information.\n\n\n\nThis exercise uses the R packages tmap, sf and tidyverse.\n\npacman::p_load(sf,tmap,tidyverse)\n\n\n\n\nDownload the following:\nMaster Plan 2014 Subzone Boundary Data\nSingapore Residents by Planning Are / Subzone, Age Group, Sex, and Dwelling\nUsing st_read(), import the following geospatial data into R:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNext, import the aspatial data and save it into an R dataframe:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Preparation\nBefore a thematic map can be made, a data table with 2020 values needs to prepared. The data table should include the following:\n\nYOUNG: Age groups 0-4 until 20-24\nECONOMY ACTIVE: Age groups 25-29 until 60-64\nAGED: Age group 65+\nTOTAL: All age groups\nDEPENDENCY: the ratio between the YOUNG and AGED ages groups against the ECONOMY ACTIVE age groups\n\nPerform data wrangling and transformation using the code below:\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %&gt;%\n  mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nBefore we can perform the georelational join, one extra step is needed to convert the values in PA and SZ into uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() is used to join the geographical data and attribute table using planning and subzone name as the common identifiers.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nSave the joined data in a file:\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")\n\n\n\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties, or census units, using area patterns or graduated colors. Two approaches can be used to prepare thematic maps using tmap:\n\nPlotting qucikly using qtm()\nPlotting highly customisable thematic maps by using tmap elements\n\nThe easiest way to draw a choropleth map using tmap is by using qtm(), which provides a concise default visualisation in many cases.\nThe code below draws a cartographic standard choropleth map:\n\ntmap_mode() with “plot” option produces a static map, “view” produces an interactive map.\n“fill” argument is used to map the attribute.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWhilst fast and simple to use, the disadvantage of qtm() is that it makes the aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, use tmap’s drawing elements.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency Ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type = \"8star\", size = 2) + tm_scale_bar() + tm_grid(alpha = 0.2) + tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nLet’s break down this block of code into its subfunctions:\ntm_shape() is used to define the input data, and tm_polygons is used to draw out the Planning Subzones:\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable to tm_polygons():\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nIn actuality, tm_polygons() is a wrapper function of tm_fill() and tm_border(). tm_fill() shades the polygons according to the default colorscheme, while tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code below only uses tm_fill() to draw a choropleth map:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundaries of the Planning Subzones, tm_borders() will be used:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\nThe alpha argument is used to define transparency using a value between 0 (transparent) and 1 (opaque). By default, the alpha value of the col is used (usually 1).\nBesides alpha, there are three other arguments for tm_borders():\n\ncol -&gt; border color,\nlwd -&gt; borderline width, default 1,\nlty -&gt; borderline type, default “solid’ .\n\nMost choropleth maps employ data classification methods. Classification takes large number of observations and groups them into data ranges.\ntmap provides a total of ten data classification methods, shown below:\n\nfixed\nsd\nequal\npretty\nquantile (grouping by quantile)\nkmeans (kmeans clustering)\nhclust (hierarchical clustering)\nbclust (bagged clustering)\nfisher (fisher method)\njenks (jenks optimization)\n\nTo define a data classification method, the style argument tm_fill() or tm_polygon will be used.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below uses the equal classification method.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe distribution of the data using the quantile data classification method is more evenly distributed than the equal data classification method.\nusing jenks\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing fisher\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"fisher\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing kmeans\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"kmeans\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 2\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 2, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 10\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 10, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 20\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 20, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nFor all the inbuilt styles, the category breaks are computed internally. In order to override the default parameters, the breakpoints can be set explicitly using the breaks argument to tm_fill(). In tmap, the breaks include a minimum and maximum. As such, n+1 elements must be specified to create n categories.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nUsing the above results as reference, we set the breakpoints at .6, .7, .8, and .9. With the addition of the min and max breakpoints, the breaks vector is c(0, 0.6, 0.7, 0.8, 0.9, 1).\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00, 19)) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap supports color ramps either defined by the user, or from a prebuilt set from the RColorBrewer package.\nAssigning the preferred color to the palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nReverse the color shading using “-”\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include the title, scale bar, compass, margins, and aspect ratios.\nIn tmap, several legend options are provided to change the placement, format, and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed, whcih can be called using tmap_style()\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw map features such as compass, scale bar, and grid lines.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type=\"8star\", size = 2) + tm_scale_bar(width = 0.15) + tm_grid(lwd = 0.1, alpha = 0.2) + tm_credits(\"sajdad\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nReset the default style using the code below:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nFacet maps are composed of multiple small maps arranged adjacently, and enable the visualisation of how spatial relationships change with respect to another variable, such as time.\ntmap allows facet maps to be plotted in 3 ways:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets(),\nby creating multiple stand-alone maps using tmap_arrange()\n\nThe code below creates facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\", \"bottom\")) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by assigning multiple value to at least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\", \"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\", \"Greens\")) + tm_layout(legend.position =  c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_facets():\n\ntm_shape(mpsz_pop2020) +  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette =  \"Blues\", thres.poly = 0) + tm_facets(by=\"REGION_N\", free.coords = TRUE, drop.units = TRUE) + tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_arrange():\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"YOUNG\", style = \"quantile\", palette = \"Blues\")\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nInstead of creating a facet map, the selection function can be used to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) + tm_layout(legend.outside = TRUE, legend.outside.size = 0.2, legend.outside.position = c(\"right\", \"bottom\"), frame = FALSE) + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HOE/ex2/ex2.html#overview",
    "href": "HOE/ex2/ex2.html#overview",
    "title": "Exercise 2",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise properties of geographic features that are not naturally visible, a few examples being population, temperature, and crime rate.\nOn the other hand, geovisualisation works by providing graphical ideation to render a place, phenomenon, or process visible, allowing us to utilise our vision to process information."
  },
  {
    "objectID": "HOE/ex2/ex2.html#installlaunch-r-packages",
    "href": "HOE/ex2/ex2.html#installlaunch-r-packages",
    "title": "Exercise 2",
    "section": "",
    "text": "This exercise uses the R packages tmap, sf and tidyverse.\n\npacman::p_load(sf,tmap,tidyverse)"
  },
  {
    "objectID": "HOE/ex2/ex2.html#download-and-import-data",
    "href": "HOE/ex2/ex2.html#download-and-import-data",
    "title": "Exercise 2",
    "section": "",
    "text": "Download the following:\nMaster Plan 2014 Subzone Boundary Data\nSingapore Residents by Planning Are / Subzone, Age Group, Sex, and Dwelling\nUsing st_read(), import the following geospatial data into R:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNext, import the aspatial data and save it into an R dataframe:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Preparation\nBefore a thematic map can be made, a data table with 2020 values needs to prepared. The data table should include the following:\n\nYOUNG: Age groups 0-4 until 20-24\nECONOMY ACTIVE: Age groups 25-29 until 60-64\nAGED: Age group 65+\nTOTAL: All age groups\nDEPENDENCY: the ratio between the YOUNG and AGED ages groups against the ECONOMY ACTIVE age groups\n\nPerform data wrangling and transformation using the code below:\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %&gt;%\n  mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nBefore we can perform the georelational join, one extra step is needed to convert the values in PA and SZ into uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() is used to join the geographical data and attribute table using planning and subzone name as the common identifiers.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nSave the joined data in a file:\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "HOE/ex2/ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "HOE/ex2/ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Exercise 2",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties, or census units, using area patterns or graduated colors. Two approaches can be used to prepare thematic maps using tmap:\n\nPlotting qucikly using qtm()\nPlotting highly customisable thematic maps by using tmap elements\n\nThe easiest way to draw a choropleth map using tmap is by using qtm(), which provides a concise default visualisation in many cases.\nThe code below draws a cartographic standard choropleth map:\n\ntmap_mode() with “plot” option produces a static map, “view” produces an interactive map.\n“fill” argument is used to map the attribute.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWhilst fast and simple to use, the disadvantage of qtm() is that it makes the aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, use tmap’s drawing elements.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency Ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type = \"8star\", size = 2) + tm_scale_bar() + tm_grid(alpha = 0.2) + tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nLet’s break down this block of code into its subfunctions:\ntm_shape() is used to define the input data, and tm_polygons is used to draw out the Planning Subzones:\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable to tm_polygons():\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nIn actuality, tm_polygons() is a wrapper function of tm_fill() and tm_border(). tm_fill() shades the polygons according to the default colorscheme, while tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code below only uses tm_fill() to draw a choropleth map:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundaries of the Planning Subzones, tm_borders() will be used:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\nThe alpha argument is used to define transparency using a value between 0 (transparent) and 1 (opaque). By default, the alpha value of the col is used (usually 1).\nBesides alpha, there are three other arguments for tm_borders():\n\ncol -&gt; border color,\nlwd -&gt; borderline width, default 1,\nlty -&gt; borderline type, default “solid’ .\n\nMost choropleth maps employ data classification methods. Classification takes large number of observations and groups them into data ranges.\ntmap provides a total of ten data classification methods, shown below:\n\nfixed\nsd\nequal\npretty\nquantile (grouping by quantile)\nkmeans (kmeans clustering)\nhclust (hierarchical clustering)\nbclust (bagged clustering)\nfisher (fisher method)\njenks (jenks optimization)\n\nTo define a data classification method, the style argument tm_fill() or tm_polygon will be used.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below uses the equal classification method.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe distribution of the data using the quantile data classification method is more evenly distributed than the equal data classification method.\nusing jenks\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing fisher\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"fisher\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing kmeans\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"kmeans\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 2\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 2, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 10\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 10, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 20\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 20, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nFor all the inbuilt styles, the category breaks are computed internally. In order to override the default parameters, the breakpoints can be set explicitly using the breaks argument to tm_fill(). In tmap, the breaks include a minimum and maximum. As such, n+1 elements must be specified to create n categories.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nUsing the above results as reference, we set the breakpoints at .6, .7, .8, and .9. With the addition of the min and max breakpoints, the breaks vector is c(0, 0.6, 0.7, 0.8, 0.9, 1).\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00, 19)) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap supports color ramps either defined by the user, or from a prebuilt set from the RColorBrewer package.\nAssigning the preferred color to the palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nReverse the color shading using “-”\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include the title, scale bar, compass, margins, and aspect ratios.\nIn tmap, several legend options are provided to change the placement, format, and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed, whcih can be called using tmap_style()\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw map features such as compass, scale bar, and grid lines.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type=\"8star\", size = 2) + tm_scale_bar(width = 0.15) + tm_grid(lwd = 0.1, alpha = 0.2) + tm_credits(\"sajdad\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nReset the default style using the code below:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nFacet maps are composed of multiple small maps arranged adjacently, and enable the visualisation of how spatial relationships change with respect to another variable, such as time.\ntmap allows facet maps to be plotted in 3 ways:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets(),\nby creating multiple stand-alone maps using tmap_arrange()\n\nThe code below creates facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\", \"bottom\")) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by assigning multiple value to at least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\", \"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\", \"Greens\")) + tm_layout(legend.position =  c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_facets():\n\ntm_shape(mpsz_pop2020) +  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette =  \"Blues\", thres.poly = 0) + tm_facets(by=\"REGION_N\", free.coords = TRUE, drop.units = TRUE) + tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_arrange():\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"YOUNG\", style = \"quantile\", palette = \"Blues\")\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nInstead of creating a facet map, the selection function can be used to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) + tm_layout(legend.outside = TRUE, legend.outside.size = 0.2, legend.outside.position = c(\"right\", \"bottom\"), frame = FALSE) + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HOE/ex1/ex1.html",
    "href": "HOE/ex1/ex1.html",
    "title": "Exercise 1",
    "section": "",
    "text": "Getting Started"
  },
  {
    "objectID": "HOE/ex1/ex1.html#installlaunch-r-packages",
    "href": "HOE/ex1/ex1.html#installlaunch-r-packages",
    "title": "Exercise 1",
    "section": "Install/Launch R Packages",
    "text": "Install/Launch R Packages\nThis exercise uses the R packages sf and tidyverse.\n\nsf imports, manages and processes geospatial data\ntidyverse wrangles and visualises said data\n\nUse p_load to install the packages into the environment:\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "HOE/ex1/ex1.html#download-and-import-data",
    "href": "HOE/ex1/ex1.html#download-and-import-data",
    "title": "Exercise 1",
    "section": "Download and Import Data",
    "text": "Download and Import Data\nDownload the following:\nPre-Schools Location Data\nMaster Plan 2014 Subzone Boundary Data\nLTA Cycling Path Data\nSingapore Airbnb Listing Data\nInside the Ex1 folder, create a subfolder called data, and within that create 2 two more subfolders named geospatial and aspatial respectively.\nUsing st_read(), import the following geospatial data into R:\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThis code uses the st_read() function from sf to import the MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature dataframe. It shows that there are a total of 323 multipolygon features and 15 fields, in the svy21 projected coordinates system.\nNext, import the CyclingPathGazette data:\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThis code imports the CyclingPathGazette shapefile into R as a line feature dataframe. It reveals that there are 2558 features and 2 fields, and is similarly in the the svy21 projected coordinates system.\nLastly, import the PreSchoolsLocations data:\n\npreschool = st_read(dsn = \"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThis code indicates that it is in a point feature dataframe, containing 2290 features and 2 fields. It is in the wgs84 coordinates system, contrary to the previous two dataframes.\nFor the aspatial data, it must first be imported into a tibble dataframe, then converted into a simple feature dataframe.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output shows that the listings tibble dataframe contains 3450 rows and 18 columns.\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nThis code converts the listings tibble dataframe into a simple feature dataframe.\n\ncoords argument requiresthe column name of the x-coordinates first then followed by the column name of the y-coordinates\ncrs argument requiresthe coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System, and EPSG: 3414 is Singapore svy21 Projected Coordinate System\n%&gt;% is used to nest st_transform() to transform the newly created simple feature dataframe into svy21 projected coordinates system."
  },
  {
    "objectID": "HOE/ex1/ex1.html#checking-dataframe-content",
    "href": "HOE/ex1/ex1.html#checking-dataframe-content",
    "title": "Exercise 1",
    "section": "Checking Dataframe Content",
    "text": "Checking Dataframe Content\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry() prints and displays the basic information of the feature class, such as the type of geometry, the geographic extent of the features, and the coordinate system of the data.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() reveals the data type of each field.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nhead() shows the complete information of a feature object."
  },
  {
    "objectID": "HOE/ex1/ex1.html#plotting-geospatial-data",
    "href": "HOE/ex1/ex1.html#plotting-geospatial-data",
    "title": "Exercise 1",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nVisualising geospatial features is important. By running the following code:\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nplot() shows the default plot of an sf object, a multiplot of all attributes.\nTo plot only the geometry, run:"
  },
  {
    "objectID": "HOE/ex1/ex1.html#r",
    "href": "HOE/ex1/ex1.html#r",
    "title": "Exercise 1",
    "section": "{r}",
    "text": "{r}\nplot(st_geometry(mpsz))\nTo plot a specific attribute, run:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "HOE/ex1/ex1.html#projection",
    "href": "HOE/ex1/ex1.html#projection",
    "title": "Exercise 1",
    "section": "Projection",
    "text": "Projection\n~sometimes i project my insecurities onto other people~\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nOne issue that can occur during data importing is that the coordinate system of the source data was either missing or wrongly assigned. An example can be seen below:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe mpsz dataframe is projected in svy21, bur the print shows that EPSG is 9001, different from the correct EPSG code of 3414.\nTo assign the correct EPSG code, use the following code:\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nCheck the CSR again:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nThe EPSG code is now correctly showing 3414.\nIn geospatial analytics, it is very common to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis needs to use distance or area measurements.\nAs stated before, the preschool dataframe is in the wgs84 coordinate system.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nPeform projection transformation on the preschool dataframe using the code below:\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)\n\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\nDisplaying the projected dataframe shows that it is now in the svy21 coordinate system."
  },
  {
    "objectID": "HOE/ex1/ex1.html#geoprocessing-using-sf",
    "href": "HOE/ex1/ex1.html#geoprocessing-using-sf",
    "title": "Exercise 1",
    "section": "Geoprocessing using sf",
    "text": "Geoprocessing using sf\nThe sf package also provides a wide range of geoprocessing functions.\n\nBuffering\nImagine a scenario where the authorities are planning upgrades to the existing cycling network, and require the acquisition of 5m of land on both sides of the current paths.\nUsing st_buffer(), we can compute the 5m buffer zone:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist = 5, nQuadSegs=30)\n\nNext, calculate the area of the buffer:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\nPoint-in-Polygon count\nImagine another scenario where the numbers of preschools in each Planning Subzone needs to be found out.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nThis code first identifies preschools located inside each Planning Subzone using st_intersects(), then uses length() to calculate the number of preschools in each Planning Subzone.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo show the Subzone with the most preschools, run:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools within each Subzone, run:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "HOE/ex1/ex1.html#eda",
    "href": "HOE/ex1/ex1.html#eda",
    "title": "Exercise 1",
    "section": "EDA",
    "text": "EDA\nIn practice, many geospatial analytics start with Exploratory Data Analysis.\nPlot a histogram to reveal the distribution of PreSchDensity.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nThis outputs a simple, but functional histogram. To improve the quality of the histogram, run the following:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with only a single pre-school, \\non the other hand, there are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nTo plot a scatterplot showing the relationship between PreSchDensity and PreSchCount, run the following:\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]