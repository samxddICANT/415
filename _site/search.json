[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "415",
    "section": "",
    "text": "eyesfouronefive\nhi hi hello i learn geospatial analytics and applications here\nnow watch this drive {width = 500}\nHands On Exercises\n\n\n\n\n\n\n\n\n\n\nEx4\n\n\n\n\n\n\n\n\n\n\n\nSep 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nEx5\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1\n\n\n\n\n\n\n\n\n\n\n\nAug 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\n\n\n\n\n\n\n\n\nAug 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\n\n\n\n\n\n\n\nAug 27, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "THE/THE1/takehome1.html",
    "href": "THE/THE1/takehome1.html",
    "title": "Takehome 1",
    "section": "",
    "text": "Myanmar, formerly known as Burma, is a country in Southeast Asia with a rich cultural heritage and a complex, often troubled modern history. With a population of about 54 million people and over 135 distinct ethnic groups, Myanmar is a tapestry of diverse cultures, languages, and traditions. However, this diversity has also been a source of long-standing tensions and conflicts.\n\n\nSince gaining independence from British rule in 1948, Myanmar was under military rule, which ended officially in 2011. However, in February 2021, the military seized power again in a coup, leading to a resumption of armed conflict and violence in the country.\nThis geospatial analysis of armed conflict in Myanmar aims to:\n1. Identify patterns and hotspots of conflict,\n2. Examine how they factors interact with each other,\n3. Track changes in conflict patterns over time.\n\n\n\nThis exercise uses the R packages sf, raster, spatstat, tmap, tidyverse, maptools, sp, sparr, st, and ggplot2.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/pwnyt/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\n\nWarning: cannot remove prior installation of package 'maptools'\n\n\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\pwnyt\\AppData\\Local\\R\\win-library\\4.4\\00LOCK\\maptools\\libs\\x64\\maptools.dll\nto\nC:\\Users\\pwnyt\\AppData\\Local\\R\\win-library\\4.4\\maptools\\libs\\x64\\maptools.dll:\nPermission denied\n\n\nWarning: restored 'maptools'\n\n\n\nThe downloaded binary packages are in\n    C:\\Users\\pwnyt\\AppData\\Local\\Temp\\Rtmp0gNdUY\\downloaded_packages\n\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools, sp, sparr, st, ggplot2)\n\n\n\n\nThe following datasets will be used:\n\nArmed Conflict Location and Event Data (ACLED)\nMyanmar Information Management Unit (MIMU)\n\nread_csv from readr and st_as_sf from sf from saves the data into a sf object, and st_transform does projection transformation to the proper correct coordinate system:\n\nacled_sf &lt;- read_csv(\"data/2021-01-01-2024-06-30-Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMutate by quarters:\n\nacled_sf &lt;- acled_sf %&gt;%\n  mutate(quarter = quarter(event_date))\n\nCheck the sf object:\n\nsummary(acled_sf)\n\n event_id_cnty        event_date              year      time_precision \n Length:42608       Min.   :2021-01-01   Min.   :2021   Min.   :1.000  \n Class :character   1st Qu.:2022-01-10   1st Qu.:2022   1st Qu.:1.000  \n Mode  :character   Median :2022-10-13   Median :2022   Median :1.000  \n                    Mean   :2022-10-29   Mean   :2022   Mean   :1.053  \n                    3rd Qu.:2023-08-29   3rd Qu.:2023   3rd Qu.:1.000  \n                    Max.   :2024-06-30   Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:42608       Min.   :1.000   Length:42608       Length:42608      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :1.000   Mode  :character   Mode  :character  \n                    Mean   :1.947                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:42608       Min.   :104  \n 1st Qu.:1.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :3.000   Median :17.00   Mode  :character   Median :104  \n Mean   :3.597   Mean   :18.86                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:17.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location         geo_precision      source         \n Length:42608       Length:42608       Min.   :1.000   Length:42608      \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.495                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :3.000                     \n source_scale          notes             fatalities         tags          \n Length:42608       Length:42608       Min.   :  0.00   Length:42608      \n Class :character   Class :character   1st Qu.:  0.00   Class :character  \n Mode  :character   Mode  :character   Median :  0.00   Mode  :character  \n                                       Mean   :  1.27                     \n                                       3rd Qu.:  1.00                     \n                                       Max.   :201.00                     \n   timestamp                  geometry        quarter     \n Min.   :1.611e+09   POINT        :42608   Min.   :1.000  \n 1st Qu.:1.702e+09   epsg:32647   :    0   1st Qu.:2.000  \n Median :1.714e+09   +proj=utm ...:    0   Median :2.000  \n Mean   :1.702e+09                         Mean   :2.475  \n 3rd Qu.:1.719e+09                         3rd Qu.:4.000  \n Max.   :1.726e+09                         Max.   :4.000  \n\n\nPlotting out all political violence events by year:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nplots &lt;- list()\n\nfor (year_val in 2021:2024) {\n  p &lt;- acled_sf %&gt;%\n    filter(year == year_val | event_type == \"Political violence\") %&gt;%\n    tm_shape() +\n    tm_dots() +\n    tm_layout(\n      title = paste0(\"Year: \", year_val),\n      title.position = c(\"left\", \"bottom\"),  \n      title.size = 0.8\n    )\n  \n  # Add each plot to the list\n  plots[[paste0(\"plot_\", year_val)]] &lt;- p\n}\n\n# Arrange the plots in a 2x2 grid\ntmap_arrange(plots$plot_2021, plots$plot_2022, plots$plot_2023, plots$plot_2024, nrow = 2, ncol = 2)\n\n\n\n\n\n\n\n\nglimpse() from dplyr reveals the datatype of every field:\n\nglimpse(acled_sf)\n\nRows: 42,608\nColumns: 31\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64320\", \"MMR64321\", \"MMR64322\", \"MM…\n$ event_date         &lt;date&gt; 2024-06-30, 2024-06-30, 2024-06-30, 2024-06-30, 20…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Strategic develop…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Chang…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"People's Defe…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 7, 1, …\n$ actor2             &lt;chr&gt; \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ assoc_actor_2      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Uniden…\n$ inter2             &lt;dbl&gt; 1, 1, 1, 0, 1, 0, 2, 1, 2, 2, 2, 3, 1, 1, 7, 0, 0, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 10, 13, 10, 12, 12, 12, 12, 12, 13, 13,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Sagaing\", \"Sag…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\", \"Shwebo\", \"…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Singu\", \"Thabeikkyin\", \"Khin-U\", \"My…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"Thabeikkyin\", \"Khi…\n$ geo_precision      &lt;dbl&gt; 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Irrawaddy\"…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"Subnational-Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n$ geometry           &lt;POINT [m]&gt; POINT (214961 2452068), POINT (198303.2 24994…\n$ quarter            &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n\n\nImport the myanmar border shapefile as a polygon feature dataframe using st_read from sf:\n\nmyanmar_sf &lt;- st_read(dsn = \"data/mmr_polbnda_adm0_250k_mimu_1\", \n                layer = \"mmr_polbnda_adm0_250k_mimu_1\") %&gt;%\n  st_as_sf(coords =c(\n    \"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32647)\n\nReading layer `mmr_polbnda_adm0_250k_mimu_1' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\THE\\THE1\\data\\mmr_polbnda_adm0_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nCompare and ensure that our data follows Myanmar’s CRS system WGS84 for consistency:\n\n# Check CRS of acled_sf\nprint(\"CRS of ACLED data:\")\n\n[1] \"CRS of ACLED data:\"\n\nprint(st_crs(acled_sf))\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nCreate a simple plot of the Myanmar border:\n\ntm_shape(myanmar_sf) +\n  tm_borders(col = \"green\", lwd = 2) +\n  tm_fill(col = \"lightblue\", alpha = 0.5) +\n  tm_layout(title = \"Myanmar Border\",\n            title.size = 1.2,\n            title.position = c(\"center\", \"top\"))\n\n\n\n\n\n\n\n\nFilter ACLED data for the specified date range and event types\n\nevent_types &lt;- c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\")\nacled_filtered &lt;- acled_sf %&gt;%\n  filter(event_type %in% event_types)\nsummary(acled_filtered)\n\n event_id_cnty        event_date              year      time_precision \n Length:42608       Min.   :2021-01-01   Min.   :2021   Min.   :1.000  \n Class :character   1st Qu.:2022-01-10   1st Qu.:2022   1st Qu.:1.000  \n Mode  :character   Median :2022-10-13   Median :2022   Median :1.000  \n                    Mean   :2022-10-29   Mean   :2022   Mean   :1.053  \n                    3rd Qu.:2023-08-29   3rd Qu.:2023   3rd Qu.:1.000  \n                    Max.   :2024-06-30   Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:42608       Min.   :1.000   Length:42608       Length:42608      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :1.000   Mode  :character   Mode  :character  \n                    Mean   :1.947                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:42608       Min.   :104  \n 1st Qu.:1.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :3.000   Median :17.00   Mode  :character   Median :104  \n Mean   :3.597   Mean   :18.86                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:17.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location         geo_precision      source         \n Length:42608       Length:42608       Min.   :1.000   Length:42608      \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.495                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :3.000                     \n source_scale          notes             fatalities         tags          \n Length:42608       Length:42608       Min.   :  0.00   Length:42608      \n Class :character   Class :character   1st Qu.:  0.00   Class :character  \n Mode  :character   Mode  :character   Median :  0.00   Mode  :character  \n                                       Mean   :  1.27                     \n                                       3rd Qu.:  1.00                     \n                                       Max.   :201.00                     \n   timestamp                  geometry        quarter     \n Min.   :1.611e+09   POINT        :42608   Min.   :1.000  \n 1st Qu.:1.702e+09   epsg:32647   :    0   1st Qu.:2.000  \n Median :1.714e+09   +proj=utm ...:    0   Median :2.000  \n Mean   :1.702e+09                         Mean   :2.475  \n 3rd Qu.:1.719e+09                         3rd Qu.:4.000  \n Max.   :1.726e+09                         Max.   :4.000  \n\n\n\n\n\nCreating window for ppp objects:\n\nmyanmar_owin &lt;- as.owin(myanmar_sf)\nplot(myanmar_owin)\n\n\n\n\n\n\n\n\n\nsummary(myanmar_owin)\n\nWindow: polygonal boundary\n563 separate polygons (3 holes)\n                   vertices         area relative.area\npolygon 1             37581  6.60254e+11      9.86e-01\npolygon 2                26  2.85778e+06      4.27e-06\npolygon 3                43  7.32477e+06      1.09e-05\npolygon 4               103  1.86991e+07      2.79e-05\npolygon 5                37  9.32316e+06      1.39e-05\npolygon 6               371  2.43869e+08      3.64e-04\npolygon 7               297  2.84905e+08      4.25e-04\npolygon 8                33  1.68222e+07      2.51e-05\npolygon 9                33  4.47665e+05      6.68e-07\npolygon 10               19  1.34593e+05      2.01e-07\npolygon 11               39  1.36327e+06      2.04e-06\npolygon 12              137  1.55547e+08      2.32e-04\npolygon 13               36  8.76479e+06      1.31e-05\npolygon 14               79  3.08116e+07      4.60e-05\npolygon 15              388  2.25271e+08      3.36e-04\npolygon 16              316  7.78512e+07      1.16e-04\npolygon 17               13  1.09564e+05      1.64e-07\npolygon 18               18  3.49727e+05      5.22e-07\npolygon 19               31  1.23017e+06      1.84e-06\npolygon 20               16  6.55537e+05      9.79e-07\npolygon 21               24  8.49487e+05      1.27e-06\npolygon 22               30  2.54436e+06      3.80e-06\npolygon 23              336  4.15806e+07      6.21e-05\npolygon 24              330  1.69190e+08      2.53e-04\npolygon 25               47  1.08035e+07      1.61e-05\npolygon 26               39  4.94369e+06      7.38e-06\npolygon 27               23  2.72438e+06      4.07e-06\npolygon 28               33  5.70263e+06      8.52e-06\npolygon 29               90  4.20329e+07      6.28e-05\npolygon 30               28  1.35341e+06      2.02e-06\npolygon 31              225  1.08816e+08      1.62e-04\npolygon 32               33  9.16670e+06      1.37e-05\npolygon 33              192  7.02655e+07      1.05e-04\npolygon 34               49  1.49245e+07      2.23e-05\npolygon 35               98  1.79076e+07      2.67e-05\npolygon 36                6  6.37552e+05      9.52e-07\npolygon 37               49  1.01233e+07      1.51e-05\npolygon 38              141  3.43053e+07      5.12e-05\npolygon 39              195  3.24345e+07      4.84e-05\npolygon 40               51  3.38313e+06      5.05e-06\npolygon 41               34  2.01400e+06      3.01e-06\npolygon 42               13  2.50435e+05      3.74e-07\npolygon 43                9  9.04824e+04      1.35e-07\npolygon 44               34  4.61794e+06      6.90e-06\npolygon 45               17  4.58200e+05      6.84e-07\npolygon 46               15  2.74776e+05      4.10e-07\npolygon 47               21  5.34978e+05      7.99e-07\npolygon 48               19  4.55347e+05      6.80e-07\npolygon 49               71  3.42557e+06      5.11e-06\npolygon 50               24  1.32420e+06      1.98e-06\npolygon 51               15  3.26247e+05      4.87e-07\npolygon 52               39  8.65790e+05      1.29e-06\npolygon 53               43  1.41627e+06      2.11e-06\npolygon 54               24  7.52068e+05      1.12e-06\npolygon 55               96  1.32101e+07      1.97e-05\npolygon 56               38  1.18003e+06      1.76e-06\npolygon 57              429  5.99087e+08      8.95e-04\npolygon 58               13  1.74105e+05      2.60e-07\npolygon 59               19  2.52336e+05      3.77e-07\npolygon 60               16  3.11495e+05      4.65e-07\npolygon 61               11  9.11047e+04      1.36e-07\npolygon 62               12  2.13470e+05      3.19e-07\npolygon 63               17  5.82663e+05      8.70e-07\npolygon 64               56  2.60440e+07      3.89e-05\npolygon 65              107  4.91389e+06      7.34e-06\npolygon 66               51  2.79076e+06      4.17e-06\npolygon 67               89  1.61156e+07      2.41e-05\npolygon 68               28  1.30499e+06      1.95e-06\npolygon 69               11  1.27616e+05      1.91e-07\npolygon 70               34  2.54199e+06      3.80e-06\npolygon 71               27  1.72476e+06      2.58e-06\npolygon 72               37  2.01882e+06      3.01e-06\npolygon 73               23  1.65571e+06      2.47e-06\npolygon 74               33  3.05816e+06      4.57e-06\npolygon 75               14  3.23153e+05      4.83e-07\npolygon 76               91  1.51209e+07      2.26e-05\npolygon 77               12  2.42901e+05      3.63e-07\npolygon 78               11  1.37889e+05      2.06e-07\npolygon 79               58  2.29751e+07      3.43e-05\npolygon 80               48  5.10265e+06      7.62e-06\npolygon 81               22  1.30706e+06      1.95e-06\npolygon 82               15  3.49480e+05      5.22e-07\npolygon 83               17  1.57570e+06      2.35e-06\npolygon 84               34  3.68725e+06      5.51e-06\npolygon 85               34  5.21904e+06      7.79e-06\npolygon 86               24  5.42734e+06      8.10e-06\npolygon 87              422  4.66497e+08      6.97e-04\npolygon 88              142  2.98767e+07      4.46e-05\npolygon 89              132  2.18707e+07      3.27e-05\npolygon 90               19  5.88230e+05      8.78e-07\npolygon 91               22  1.77611e+06      2.65e-06\npolygon 92               40  4.09952e+06      6.12e-06\npolygon 93               28  1.47685e+06      2.21e-06\npolygon 94               67  9.99685e+06      1.49e-05\npolygon 95               25  4.82266e+05      7.20e-07\npolygon 96               16  4.14093e+05      6.18e-07\npolygon 97               26  3.03928e+06      4.54e-06\npolygon 98               14  1.53563e+05      2.29e-07\npolygon 99               19  5.08538e+05      7.59e-07\npolygon 100              16  1.80565e+05      2.70e-07\npolygon 101              26  9.75091e+05      1.46e-06\npolygon 102              19  2.15295e+05      3.21e-07\npolygon 103              16  3.50061e+05      5.23e-07\npolygon 104 (hole)        3 -1.78834e+02     -2.67e-10\npolygon 105              14  2.11571e+05      3.16e-07\npolygon 106              11  1.59536e+05      2.38e-07\npolygon 107             111  7.35028e+07      1.10e-04\npolygon 108              54  9.35305e+06      1.40e-05\npolygon 109              19  6.34649e+05      9.48e-07\npolygon 110              79  1.47390e+07      2.20e-05\npolygon 111              10  3.74827e+04      5.60e-08\npolygon 112              13  1.37100e+05      2.05e-07\npolygon 113              31  4.47193e+06      6.68e-06\npolygon 114              19  1.23742e+06      1.85e-06\npolygon 115              20  1.79201e+06      2.68e-06\npolygon 116              16  2.19464e+05      3.28e-07\npolygon 117              11  7.94092e+04      1.19e-07\npolygon 118              14  1.45779e+05      2.18e-07\npolygon 119              31  6.24672e+05      9.33e-07\npolygon 120              11  2.29288e+04      3.42e-08\npolygon 121              18  2.10998e+05      3.15e-07\npolygon 122              26  2.52571e+06      3.77e-06\npolygon 123              16  5.77783e+05      8.63e-07\npolygon 124              26  8.87985e+05      1.33e-06\npolygon 125              13  1.10557e+05      1.65e-07\npolygon 126              21  9.55338e+05      1.43e-06\npolygon 127              32  2.18189e+06      3.26e-06\npolygon 128              18  7.64830e+05      1.14e-06\npolygon 129              34  1.71336e+06      2.56e-06\npolygon 130             115  9.29594e+05      1.39e-06\npolygon 131              68  2.06761e+05      3.09e-07\npolygon 132              40  4.87851e+06      7.28e-06\npolygon 133              10  7.43137e+04      1.11e-07\npolygon 134              17  5.95020e+05      8.88e-07\npolygon 135              21  4.02132e+05      6.00e-07\npolygon 136              21  1.09635e+06      1.64e-06\npolygon 137              14  1.15356e+05      1.72e-07\npolygon 138              20  3.13610e+05      4.68e-07\npolygon 139             275  3.92648e+08      5.86e-04\npolygon 140              16  2.19612e+05      3.28e-07\npolygon 141              13  2.64858e+05      3.95e-07\npolygon 142              23  1.25549e+06      1.87e-06\npolygon 143               9  1.79312e+05      2.68e-07\npolygon 144              15  2.93132e+05      4.38e-07\npolygon 145              15  5.29892e+05      7.91e-07\npolygon 146              23  4.95351e+05      7.40e-07\npolygon 147              14  4.41976e+05      6.60e-07\npolygon 148              19  3.32318e+05      4.96e-07\npolygon 149              16  4.15914e+05      6.21e-07\npolygon 150              22  5.10526e+05      7.62e-07\npolygon 151              48  1.87148e+07      2.79e-05\npolygon 152              18  1.62882e+06      2.43e-06\npolygon 153              71  2.43615e+07      3.64e-05\npolygon 154             116  5.16444e+07      7.71e-05\npolygon 155              19  1.54144e+06      2.30e-06\npolygon 156              11  2.01013e+05      3.00e-07\npolygon 157              20  2.31201e+06      3.45e-06\npolygon 158              15  5.94674e+05      8.88e-07\npolygon 159             218  1.56252e+08      2.33e-04\npolygon 160             162  8.80247e+07      1.31e-04\npolygon 161              16  3.69968e+05      5.52e-07\npolygon 162              14  1.61451e+05      2.41e-07\npolygon 163              18  5.54566e+05      8.28e-07\npolygon 164              19  5.07078e+05      7.57e-07\npolygon 165              57  6.86475e+06      1.03e-05\npolygon 166              15  6.56018e+05      9.80e-07\npolygon 167              21  6.65092e+05      9.93e-07\npolygon 168              15  5.97784e+05      8.93e-07\npolygon 169              37  2.56010e+06      3.82e-06\npolygon 170              13  1.66996e+05      2.49e-07\npolygon 171              20  8.18381e+05      1.22e-06\npolygon 172              21  2.89704e+06      4.33e-06\npolygon 173              15  4.08213e+05      6.10e-07\npolygon 174             104  4.71547e+07      7.04e-05\npolygon 175              28  3.80443e+06      5.68e-06\npolygon 176              67  3.17343e+07      4.74e-05\npolygon 177             730  9.20735e+08      1.37e-03\npolygon 178              16  2.01576e+05      3.01e-07\npolygon 179              12  1.41506e+05      2.11e-07\npolygon 180              15  4.92125e+05      7.35e-07\npolygon 181              18  1.58128e+06      2.36e-06\npolygon 182              25  1.94322e+06      2.90e-06\npolygon 183              12  2.51373e+05      3.75e-07\npolygon 184             412  4.47936e+08      6.69e-04\npolygon 185              22  7.57105e+05      1.13e-06\npolygon 186              16  6.97434e+05      1.04e-06\npolygon 187              39  4.45130e+06      6.65e-06\npolygon 188              13  8.83786e+05      1.32e-06\npolygon 189              10  2.06200e+05      3.08e-07\npolygon 190              76  3.60497e+07      5.38e-05\npolygon 191              13  4.56433e+05      6.82e-07\npolygon 192              28  2.30613e+06      3.44e-06\npolygon 193              27  2.50338e+06      3.74e-06\npolygon 194              14  4.69238e+05      7.01e-07\npolygon 195              10  1.69886e+05      2.54e-07\npolygon 196              16  5.42822e+05      8.11e-07\npolygon 197              10  1.17633e+05      1.76e-07\npolygon 198               8  7.08579e+04      1.06e-07\npolygon 199             144  7.85300e+07      1.17e-04\npolygon 200              37  1.93477e+06      2.89e-06\npolygon 201              25  5.59996e+05      8.36e-07\npolygon 202              44  2.86031e+06      4.27e-06\npolygon 203              26  1.26276e+06      1.89e-06\npolygon 204             149  1.37840e+08      2.06e-04\npolygon 205              18  4.84958e+05      7.24e-07\npolygon 206              73  2.93195e+07      4.38e-05\npolygon 207              45  6.87481e+06      1.03e-05\npolygon 208              64  1.80880e+07      2.70e-05\npolygon 209              12  8.76879e+05      1.31e-06\npolygon 210              26  2.78381e+06      4.16e-06\npolygon 211              35  8.72326e+06      1.30e-05\npolygon 212              53  1.06237e+07      1.59e-05\npolygon 213              26  5.40467e+06      8.07e-06\npolygon 214             148  1.05037e+08      1.57e-04\npolygon 215              21  8.32798e+05      1.24e-06\npolygon 216              21  2.23023e+06      3.33e-06\npolygon 217               8  6.30805e+05      9.42e-07\npolygon 218              78  3.67603e+07      5.49e-05\npolygon 219              18  1.64745e+06      2.46e-06\npolygon 220              58  1.31747e+07      1.97e-05\npolygon 221              94  1.16837e+07      1.74e-05\npolygon 222              53  3.17801e+06      4.75e-06\npolygon 223             137  8.46454e+06      1.26e-05\npolygon 224              23  4.36507e+05      6.52e-07\npolygon 225              27  9.72136e+05      1.45e-06\npolygon 226              55  1.98854e+06      2.97e-06\npolygon 227              48  1.02651e+07      1.53e-05\npolygon 228              15  3.16153e+05      4.72e-07\npolygon 229              22  8.93201e+05      1.33e-06\npolygon 230              18  2.91538e+05      4.35e-07\npolygon 231              59  3.70736e+06      5.54e-06\npolygon 232              11  1.55205e+05      2.32e-07\npolygon 233              14  1.87401e+05      2.80e-07\npolygon 234              11  6.54128e+04      9.77e-08\npolygon 235              11  8.64659e+04      1.29e-07\npolygon 236              12  2.25129e+05      3.36e-07\npolygon 237              30  2.72178e+06      4.06e-06\npolygon 238 (hole)        3 -2.26252e+00     -3.38e-12\npolygon 239             180  1.80314e+07      2.69e-05\npolygon 240              14  4.01942e+05      6.00e-07\npolygon 241             103  1.33467e+07      1.99e-05\npolygon 242              14  2.07708e+05      3.10e-07\npolygon 243              55  4.38623e+06      6.55e-06\npolygon 244              41  4.69733e+06      7.01e-06\npolygon 245              74  3.92633e+06      5.86e-06\npolygon 246              31  2.79477e+06      4.17e-06\npolygon 247              17  8.74607e+05      1.31e-06\npolygon 248              26  4.50962e+05      6.73e-07\npolygon 249              18  1.15065e+06      1.72e-06\npolygon 250             164  1.48037e+07      2.21e-05\npolygon 251              12  3.17290e+05      4.74e-07\npolygon 252              69  2.59551e+07      3.88e-05\npolygon 253              37  7.85963e+05      1.17e-06\npolygon 254              14  3.37873e+05      5.05e-07\npolygon 255              12  1.77980e+05      2.66e-07\npolygon 256              21  6.46195e+05      9.65e-07\npolygon 257              24  2.69998e+06      4.03e-06\npolygon 258              30  1.00675e+06      1.50e-06\npolygon 259              57  4.22747e+06      6.31e-06\npolygon 260              23  8.63543e+05      1.29e-06\npolygon 261              11  2.01925e+05      3.02e-07\npolygon 262              95  2.88232e+07      4.30e-05\npolygon 263             452  9.64208e+07      1.44e-04\npolygon 264              77  1.72297e+07      2.57e-05\npolygon 265              16  3.33522e+05      4.98e-07\npolygon 266              19  6.82895e+05      1.02e-06\npolygon 267              43  3.95062e+06      5.90e-06\npolygon 268              29  1.00709e+06      1.50e-06\npolygon 269              21  8.90014e+05      1.33e-06\npolygon 270              22  7.93453e+05      1.18e-06\npolygon 271              13  4.52813e+05      6.76e-07\npolygon 272              30  1.49817e+06      2.24e-06\npolygon 273              48  4.23996e+06      6.33e-06\npolygon 274              37  1.20290e+06      1.80e-06\npolygon 275              19  4.85805e+05      7.25e-07\npolygon 276              46  2.18001e+06      3.26e-06\npolygon 277               7  1.33723e+05      2.00e-07\npolygon 278              54  1.82059e+07      2.72e-05\npolygon 279              10  8.57866e+05      1.28e-06\npolygon 280              14  1.98445e+05      2.96e-07\npolygon 281              19  4.68357e+05      6.99e-07\npolygon 282              52  8.57765e+06      1.28e-05\npolygon 283              73  7.91998e+06      1.18e-05\npolygon 284              23  8.19561e+06      1.22e-05\npolygon 285              10  1.06594e+05      1.59e-07\npolygon 286             169  1.39462e+07      2.08e-05\npolygon 287              17  2.55915e+05      3.82e-07\npolygon 288              12  1.81516e+05      2.71e-07\npolygon 289              16  3.68509e+05      5.50e-07\npolygon 290              12  1.24954e+05      1.87e-07\npolygon 291            1012  4.61886e+08      6.90e-04\npolygon 292              15  5.42647e+05      8.10e-07\npolygon 293              12  5.53088e+05      8.26e-07\npolygon 294              24  1.06455e+06      1.59e-06\npolygon 295              14  3.17038e+05      4.73e-07\npolygon 296              17  1.25559e+06      1.87e-06\npolygon 297              16  1.92407e+06      2.87e-06\npolygon 298              80  1.86306e+07      2.78e-05\npolygon 299              11  6.83880e+04      1.02e-07\npolygon 300             166  4.21470e+07      6.29e-05\npolygon 301              22  1.36174e+06      2.03e-06\npolygon 302              31  6.07363e+05      9.07e-07\npolygon 303              10  1.27067e+05      1.90e-07\npolygon 304             164  5.02951e+07      7.51e-05\npolygon 305              17  1.20798e+06      1.80e-06\npolygon 306              59  2.41720e+06      3.61e-06\npolygon 307              12  2.52952e+05      3.78e-07\npolygon 308              14  2.44407e+05      3.65e-07\npolygon 309              43  4.89177e+06      7.30e-06\npolygon 310              40  3.86642e+06      5.77e-06\npolygon 311              23  4.59203e+05      6.86e-07\npolygon 312              14  1.79442e+05      2.68e-07\npolygon 313              13  1.61191e+05      2.41e-07\npolygon 314              43  1.33365e+06      1.99e-06\npolygon 315              75  1.20247e+07      1.80e-05\npolygon 316              17  9.96466e+04      1.49e-07\npolygon 317              22  1.60660e+06      2.40e-06\npolygon 318             730  1.16983e+08      1.75e-04\npolygon 319             129  7.87539e+06      1.18e-05\npolygon 320              22  4.66256e+05      6.96e-07\npolygon 321              19  5.44519e+05      8.13e-07\npolygon 322              16  3.73911e+05      5.58e-07\npolygon 323              88  3.47678e+07      5.19e-05\npolygon 324              46  3.23711e+06      4.83e-06\npolygon 325              47  9.17482e+05      1.37e-06\npolygon 326              14  4.44869e+05      6.64e-07\npolygon 327              43  1.29527e+06      1.93e-06\npolygon 328              65  3.20974e+06      4.79e-06\npolygon 329             306  1.83695e+07      2.74e-05\npolygon 330              17  4.25486e+05      6.35e-07\npolygon 331              29  1.08467e+06      1.62e-06\npolygon 332              26  1.16602e+06      1.74e-06\npolygon 333             135  4.90655e+06      7.33e-06\npolygon 334              23  1.87723e+06      2.80e-06\npolygon 335              21  7.02338e+05      1.05e-06\npolygon 336              30  4.99970e+06      7.47e-06\npolygon 337              21  7.71571e+05      1.15e-06\npolygon 338              13  1.47832e+05      2.21e-07\npolygon 339              26  3.17307e+06      4.74e-06\npolygon 340              17  1.03642e+06      1.55e-06\npolygon 341             100  8.74537e+06      1.31e-05\npolygon 342              11  1.13950e+05      1.70e-07\npolygon 343              26  8.27840e+05      1.24e-06\npolygon 344              17  4.10882e+05      6.14e-07\npolygon 345              13  1.49250e+05      2.23e-07\npolygon 346              35  1.76408e+06      2.63e-06\npolygon 347              15  2.03390e+05      3.04e-07\npolygon 348              18  1.70982e+05      2.55e-07\npolygon 349              32  7.98599e+06      1.19e-05\npolygon 350              27  3.20839e+05      4.79e-07\npolygon 351             539  1.17139e+08      1.75e-04\npolygon 352              51  1.57614e+06      2.35e-06\npolygon 353              19  3.60772e+05      5.39e-07\npolygon 354              58  2.10060e+06      3.14e-06\npolygon 355              13  1.70224e+05      2.54e-07\npolygon 356              11  6.11736e+05      9.13e-07\npolygon 357              35  5.26152e+06      7.86e-06\npolygon 358              16  1.99371e+05      2.98e-07\npolygon 359              14  4.48979e+05      6.70e-07\npolygon 360              25  1.92913e+06      2.88e-06\npolygon 361              16  4.26157e+05      6.36e-07\npolygon 362              46  1.88229e+06      2.81e-06\npolygon 363              17  2.29456e+05      3.43e-07\npolygon 364              36  4.01418e+06      5.99e-06\npolygon 365              57  1.77153e+07      2.65e-05\npolygon 366              20  5.72298e+05      8.55e-07\npolygon 367              14  2.46782e+05      3.68e-07\npolygon 368              29  1.01300e+06      1.51e-06\npolygon 369              90  8.54955e+06      1.28e-05\npolygon 370              21  3.99098e+05      5.96e-07\npolygon 371              12  2.81650e+05      4.21e-07\npolygon 372              52  3.19337e+06      4.77e-06\npolygon 373              13  3.40300e+05      5.08e-07\npolygon 374              29  9.08533e+05      1.36e-06\npolygon 375              20  3.07393e+05      4.59e-07\npolygon 376              19  1.15906e+06      1.73e-06\npolygon 377              17  1.16182e+06      1.73e-06\npolygon 378              21  2.60877e+06      3.90e-06\npolygon 379              15  1.09001e+05      1.63e-07\npolygon 380              37  1.31921e+06      1.97e-06\npolygon 381              53  1.46854e+06      2.19e-06\npolygon 382              59  8.92822e+06      1.33e-05\npolygon 383               9  7.44981e+04      1.11e-07\npolygon 384              14  2.41462e+05      3.61e-07\npolygon 385              96  7.25940e+06      1.08e-05\npolygon 386              11  1.06055e+05      1.58e-07\npolygon 387              49  1.87834e+06      2.80e-06\npolygon 388              23  6.08310e+05      9.08e-07\npolygon 389              50  6.76488e+05      1.01e-06\npolygon 390              22  4.83089e+05      7.21e-07\npolygon 391              17  1.17278e+05      1.75e-07\npolygon 392              13  8.98786e+05      1.34e-06\npolygon 393              43  1.01757e+06      1.52e-06\npolygon 394              52  1.68377e+06      2.51e-06\npolygon 395             348  2.50314e+08      3.74e-04\npolygon 396              43  1.29120e+06      1.93e-06\npolygon 397              71  2.02836e+06      3.03e-06\npolygon 398 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 399             141  4.53240e+06      6.77e-06\npolygon 400              52  3.62008e+06      5.41e-06\npolygon 401              20  7.69539e+05      1.15e-06\npolygon 402              88  8.88904e+06      1.33e-05\npolygon 403              12  1.44668e+05      2.16e-07\npolygon 404              46  2.28026e+06      3.40e-06\npolygon 405              39  4.79165e+06      7.15e-06\npolygon 406              53  2.86736e+06      4.28e-06\npolygon 407              38  3.22508e+06      4.82e-06\npolygon 408              18  4.44863e+05      6.64e-07\npolygon 409              45  1.45134e+06      2.17e-06\npolygon 410              86  2.56400e+07      3.83e-05\npolygon 411             158  1.74510e+07      2.61e-05\npolygon 412              14  2.50383e+05      3.74e-07\npolygon 413             120  7.17019e+06      1.07e-05\npolygon 414             146  2.28448e+07      3.41e-05\npolygon 415             143  2.34472e+07      3.50e-05\npolygon 416              20  3.47415e+05      5.19e-07\npolygon 417              84  3.86387e+06      5.77e-06\npolygon 418              68  1.10850e+07      1.66e-05\npolygon 419             863  7.47702e+07      1.12e-04\npolygon 420              53  7.54742e+06      1.13e-05\npolygon 421              64  2.11016e+06      3.15e-06\npolygon 422             103  1.47525e+07      2.20e-05\npolygon 423              26  3.40345e+06      5.08e-06\npolygon 424             103  8.40445e+06      1.25e-05\npolygon 425              23  4.92041e+05      7.35e-07\npolygon 426              27  5.53625e+05      8.27e-07\npolygon 427              60  3.56102e+06      5.32e-06\npolygon 428             151  1.51314e+07      2.26e-05\npolygon 429             708  4.18129e+08      6.24e-04\npolygon 430             120  1.32857e+07      1.98e-05\npolygon 431             856  2.53898e+08      3.79e-04\npolygon 432              13  2.47298e+05      3.69e-07\npolygon 433              16  7.35754e+05      1.10e-06\npolygon 434              21  5.31633e+05      7.94e-07\npolygon 435              72  1.03185e+07      1.54e-05\npolygon 436              38  1.34734e+06      2.01e-06\npolygon 437               8  4.09489e+05      6.11e-07\npolygon 438              17  2.46995e+05      3.69e-07\npolygon 439              14  1.42285e+05      2.12e-07\npolygon 440               9  1.56346e+05      2.33e-07\npolygon 441              42  5.49581e+05      8.21e-07\npolygon 442              59  1.15813e+06      1.73e-06\npolygon 443              12  1.16845e+05      1.74e-07\npolygon 444              11  6.00122e+04      8.96e-08\npolygon 445              14  1.63465e+05      2.44e-07\npolygon 446               8  4.73674e+04      7.07e-08\npolygon 447              23  6.69330e+05      9.99e-07\npolygon 448             144  6.48346e+06      9.68e-06\npolygon 449              74  4.79923e+06      7.17e-06\npolygon 450             116  1.02706e+07      1.53e-05\npolygon 451              16  2.74005e+05      4.09e-07\npolygon 452              97  4.72599e+06      7.06e-06\npolygon 453              18  6.15583e+05      9.19e-07\npolygon 454             146  1.38979e+07      2.08e-05\npolygon 455              32  1.94516e+06      2.90e-06\npolygon 456              26  9.81356e+05      1.47e-06\npolygon 457              82  4.39797e+06      6.57e-06\npolygon 458              33  9.36113e+05      1.40e-06\npolygon 459              47  1.51844e+06      2.27e-06\npolygon 460             196  2.32689e+07      3.47e-05\npolygon 461              53  1.30069e+06      1.94e-06\npolygon 462              70  1.00802e+07      1.51e-05\npolygon 463              10  5.33870e+05      7.97e-07\npolygon 464             211  2.73026e+07      4.08e-05\npolygon 465              41  1.44141e+06      2.15e-06\npolygon 466               9  5.20220e+05      7.77e-07\npolygon 467             316  6.66808e+07      9.96e-05\npolygon 468              17  7.48505e+05      1.12e-06\npolygon 469              15  1.49799e+05      2.24e-07\npolygon 470              24  4.99500e+05      7.46e-07\npolygon 471              12  2.24463e+05      3.35e-07\npolygon 472             100  1.06028e+07      1.58e-05\npolygon 473              11  1.24267e+05      1.86e-07\npolygon 474             143  1.89581e+07      2.83e-05\npolygon 475              60  7.07802e+06      1.06e-05\npolygon 476             124  1.23476e+07      1.84e-05\npolygon 477              34  5.67625e+06      8.48e-06\npolygon 478             797  1.86955e+08      2.79e-04\npolygon 479              15  7.15891e+05      1.07e-06\npolygon 480              20  1.61624e+06      2.41e-06\npolygon 481              13  1.73955e+05      2.60e-07\npolygon 482              60  2.42590e+06      3.62e-06\npolygon 483              20  3.86365e+05      5.77e-07\npolygon 484             213  3.69421e+07      5.52e-05\npolygon 485              15  4.55574e+05      6.80e-07\npolygon 486              35  1.56058e+06      2.33e-06\npolygon 487              32  1.42419e+06      2.13e-06\npolygon 488              68  2.30711e+06      3.44e-06\npolygon 489             240  5.93935e+07      8.87e-05\npolygon 490             145  1.58875e+07      2.37e-05\npolygon 491              39  3.67239e+06      5.48e-06\npolygon 492              54  3.84847e+06      5.75e-06\npolygon 493              32  1.14073e+06      1.70e-06\npolygon 494              18  3.58549e+05      5.35e-07\npolygon 495              25  8.06470e+05      1.20e-06\npolygon 496              15  2.67818e+05      4.00e-07\npolygon 497              26  1.43681e+06      2.15e-06\npolygon 498              18  3.10061e+05      4.63e-07\npolygon 499              18  4.71644e+05      7.04e-07\npolygon 500              16  5.04146e+05      7.53e-07\npolygon 501              72  7.33720e+06      1.10e-05\npolygon 502              27  1.37772e+06      2.06e-06\npolygon 503              15  3.17217e+05      4.74e-07\npolygon 504              37  1.17498e+06      1.75e-06\npolygon 505              21  7.05388e+05      1.05e-06\npolygon 506             216  2.05399e+07      3.07e-05\npolygon 507              16  2.40093e+05      3.59e-07\npolygon 508              29  1.71282e+06      2.56e-06\npolygon 509              30  1.28695e+06      1.92e-06\npolygon 510              36  2.29670e+06      3.43e-06\npolygon 511             129  1.97698e+07      2.95e-05\npolygon 512              65  2.65969e+06      3.97e-06\npolygon 513             283  3.30575e+07      4.94e-05\npolygon 514              28  7.06271e+05      1.05e-06\npolygon 515              28  5.50158e+05      8.21e-07\npolygon 516              49  2.25015e+06      3.36e-06\npolygon 517              26  1.24280e+06      1.86e-06\npolygon 518              28  9.02794e+05      1.35e-06\npolygon 519              18  4.84064e+05      7.23e-07\npolygon 520              47  2.33442e+06      3.49e-06\npolygon 521              17  2.23835e+05      3.34e-07\npolygon 522              34  7.32504e+05      1.09e-06\npolygon 523              41  7.15538e+05      1.07e-06\npolygon 524              21  5.81687e+05      8.69e-07\npolygon 525              63  3.83819e+06      5.73e-06\npolygon 526              27  1.33192e+06      1.99e-06\npolygon 527              46  2.95028e+06      4.41e-06\npolygon 528              10  1.34210e+05      2.00e-07\npolygon 529              16  2.38274e+05      3.56e-07\npolygon 530              18  4.18536e+05      6.25e-07\npolygon 531              46  1.26584e+06      1.89e-06\npolygon 532              14  2.14679e+05      3.21e-07\npolygon 533              76  3.63371e+06      5.43e-06\npolygon 534             339  4.44685e+07      6.64e-05\npolygon 535             109  6.29786e+06      9.40e-06\npolygon 536              14  2.89570e+05      4.32e-07\npolygon 537              37  9.07704e+05      1.36e-06\npolygon 538              68  3.86104e+06      5.77e-06\npolygon 539             183  1.45458e+07      2.17e-05\npolygon 540              44  1.64355e+06      2.45e-06\npolygon 541              26  1.21667e+06      1.82e-06\npolygon 542              13  1.95710e+05      2.92e-07\npolygon 543              38  1.44402e+06      2.16e-06\npolygon 544              14  3.29394e+05      4.92e-07\npolygon 545              14  1.79828e+05      2.69e-07\npolygon 546              44  2.11118e+06      3.15e-06\npolygon 547             643  1.79215e+08      2.68e-04\npolygon 548              24  1.10979e+06      1.66e-06\npolygon 549              30  1.57106e+06      2.35e-06\npolygon 550              46  3.61716e+06      5.40e-06\npolygon 551              93  7.56340e+05      1.13e-06\npolygon 552              57  3.07732e+06      4.59e-06\npolygon 553              18  2.16224e+05      3.23e-07\npolygon 554              17  5.12388e+05      7.65e-07\npolygon 555               9  7.44780e+04      1.11e-07\npolygon 556              57  8.09122e+06      1.21e-05\npolygon 557              16  4.01323e+05      5.99e-07\npolygon 558             118  2.90304e+07      4.33e-05\npolygon 559              22  4.44693e+05      6.64e-07\npolygon 560              43  2.28763e+06      3.42e-06\npolygon 561              27  1.15444e+06      1.72e-06\npolygon 562              25  1.21695e+06      1.82e-06\npolygon 563              53  4.49228e+06      6.71e-06\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\nCreate the quarter column:\n\nacled_filtered$Quarter &lt;- paste0(year(acled_filtered$event_date), \"_Q\", quarter(acled_filtered$event_date))\n\nacled_filtered$QuarterNumeric &lt;- (year(acled_filtered$event_date) - 2021) * 4 + quarter(acled_filtered$event_date)\n\nacled_quarter &lt;- st_sf(\n  QuarterNumeric = acled_filtered$QuarterNumeric,\n  geometry = st_geometry(acled_filtered), \n  admin1 = acled_filtered$admin1\n)\n\nquarters_list &lt;- list()\n\nunique_quarters &lt;- unique(acled_filtered$QuarterNumeric)\n\nfor (q in unique_quarters) {\n  acled_q &lt;- acled_filtered[acled_filtered$QuarterNumeric == q, ]\n  \n  acled_q_sf &lt;- st_sf(\n    QuarterNumeric = acled_q$QuarterNumeric,\n    geometry = st_geometry(acled_q)\n  )\n  t\n  quarters_list[[paste0(\"Quarter_\", q)]] &lt;- acled_q_sf\n}\n\n\nppp_list &lt;- list()\n\nfor (i in names(quarters_list)) {\n  q_sf &lt;- quarters_list[[i]]\n  \n  q_ppp &lt;- as.ppp(st_coordinates(q_sf), st_bbox(q_sf))\n  \n  ppp_list[[i]] &lt;- q_ppp\n}\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\n\n\nWarning in as.ppp.sf(acled_quarter): only first attribute column is used for\nmarks\n\n\nUse jittering to avoid duplicated datapoints on the same location:\n\njittered_ppp_list &lt;- list()\n\nfor (i in names(ppp_list)) {\n  jittered_ppp &lt;- rjitter(ppp_list[[i]], , retry=TRUE, nsim=1, drop=TRUE)\n  \n  jittered_ppp_list[[i]] &lt;- jittered_ppp\n}\n\ncheck duplicates\n\nany(duplicated(jittered_ppp_list[[7]]))\n\n[1] FALSE\n\n\nmerge with owin object\n\narmedconflict_ppp_list &lt;- list()\n\nfor (i in names(jittered_ppp_list)){\n  armedconflict_ppp &lt;- jittered_ppp_list[[i]][myanmar_owin]\n  \n  armedconflict_ppp_list[[i]] &lt;- armedconflict_ppp\n}\n\n\n\nMarked planar point pattern:  42518 points\nAverage intensity 6.348685e-08 points per square unit\n\nCoordinates are given to 16 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   7.806  11.000  14.000 \n\nWindow: polygonal boundary\n563 separate polygons (3 holes)\n                   vertices         area relative.area\npolygon 1             37581  6.60254e+11      9.86e-01\npolygon 2                26  2.85778e+06      4.27e-06\npolygon 3                43  7.32477e+06      1.09e-05\npolygon 4               103  1.86991e+07      2.79e-05\npolygon 5                37  9.32316e+06      1.39e-05\npolygon 6               371  2.43869e+08      3.64e-04\npolygon 7               297  2.84905e+08      4.25e-04\npolygon 8                33  1.68222e+07      2.51e-05\npolygon 9                33  4.47665e+05      6.68e-07\npolygon 10               19  1.34593e+05      2.01e-07\npolygon 11               39  1.36327e+06      2.04e-06\npolygon 12              137  1.55547e+08      2.32e-04\npolygon 13               36  8.76479e+06      1.31e-05\npolygon 14               79  3.08116e+07      4.60e-05\npolygon 15              388  2.25271e+08      3.36e-04\npolygon 16              316  7.78512e+07      1.16e-04\npolygon 17               13  1.09564e+05      1.64e-07\npolygon 18               18  3.49727e+05      5.22e-07\npolygon 19               31  1.23017e+06      1.84e-06\npolygon 20               16  6.55537e+05      9.79e-07\npolygon 21               24  8.49487e+05      1.27e-06\npolygon 22               30  2.54436e+06      3.80e-06\npolygon 23              336  4.15806e+07      6.21e-05\npolygon 24              330  1.69190e+08      2.53e-04\npolygon 25               47  1.08035e+07      1.61e-05\npolygon 26               39  4.94369e+06      7.38e-06\npolygon 27               23  2.72438e+06      4.07e-06\npolygon 28               33  5.70263e+06      8.52e-06\npolygon 29               90  4.20329e+07      6.28e-05\npolygon 30               28  1.35341e+06      2.02e-06\npolygon 31              225  1.08816e+08      1.62e-04\npolygon 32               33  9.16670e+06      1.37e-05\npolygon 33              192  7.02655e+07      1.05e-04\npolygon 34               49  1.49245e+07      2.23e-05\npolygon 35               98  1.79076e+07      2.67e-05\npolygon 36                6  6.37552e+05      9.52e-07\npolygon 37               49  1.01233e+07      1.51e-05\npolygon 38              141  3.43053e+07      5.12e-05\npolygon 39              195  3.24345e+07      4.84e-05\npolygon 40               51  3.38313e+06      5.05e-06\npolygon 41               34  2.01400e+06      3.01e-06\npolygon 42               13  2.50435e+05      3.74e-07\npolygon 43                9  9.04824e+04      1.35e-07\npolygon 44               34  4.61794e+06      6.90e-06\npolygon 45               17  4.58200e+05      6.84e-07\npolygon 46               15  2.74776e+05      4.10e-07\npolygon 47               21  5.34978e+05      7.99e-07\npolygon 48               19  4.55347e+05      6.80e-07\npolygon 49               71  3.42557e+06      5.11e-06\npolygon 50               24  1.32420e+06      1.98e-06\npolygon 51               15  3.26247e+05      4.87e-07\npolygon 52               39  8.65790e+05      1.29e-06\npolygon 53               43  1.41627e+06      2.11e-06\npolygon 54               24  7.52068e+05      1.12e-06\npolygon 55               96  1.32101e+07      1.97e-05\npolygon 56               38  1.18003e+06      1.76e-06\npolygon 57              429  5.99087e+08      8.95e-04\npolygon 58               13  1.74105e+05      2.60e-07\npolygon 59               19  2.52336e+05      3.77e-07\npolygon 60               16  3.11495e+05      4.65e-07\npolygon 61               11  9.11047e+04      1.36e-07\npolygon 62               12  2.13470e+05      3.19e-07\npolygon 63               17  5.82663e+05      8.70e-07\npolygon 64               56  2.60440e+07      3.89e-05\npolygon 65              107  4.91389e+06      7.34e-06\npolygon 66               51  2.79076e+06      4.17e-06\npolygon 67               89  1.61156e+07      2.41e-05\npolygon 68               28  1.30499e+06      1.95e-06\npolygon 69               11  1.27616e+05      1.91e-07\npolygon 70               34  2.54199e+06      3.80e-06\npolygon 71               27  1.72476e+06      2.58e-06\npolygon 72               37  2.01882e+06      3.01e-06\npolygon 73               23  1.65571e+06      2.47e-06\npolygon 74               33  3.05816e+06      4.57e-06\npolygon 75               14  3.23153e+05      4.83e-07\npolygon 76               91  1.51209e+07      2.26e-05\npolygon 77               12  2.42901e+05      3.63e-07\npolygon 78               11  1.37889e+05      2.06e-07\npolygon 79               58  2.29751e+07      3.43e-05\npolygon 80               48  5.10265e+06      7.62e-06\npolygon 81               22  1.30706e+06      1.95e-06\npolygon 82               15  3.49480e+05      5.22e-07\npolygon 83               17  1.57570e+06      2.35e-06\npolygon 84               34  3.68725e+06      5.51e-06\npolygon 85               34  5.21904e+06      7.79e-06\npolygon 86               24  5.42734e+06      8.10e-06\npolygon 87              422  4.66497e+08      6.97e-04\npolygon 88              142  2.98767e+07      4.46e-05\npolygon 89              132  2.18707e+07      3.27e-05\npolygon 90               19  5.88230e+05      8.78e-07\npolygon 91               22  1.77611e+06      2.65e-06\npolygon 92               40  4.09952e+06      6.12e-06\npolygon 93               28  1.47685e+06      2.21e-06\npolygon 94               67  9.99685e+06      1.49e-05\npolygon 95               25  4.82266e+05      7.20e-07\npolygon 96               16  4.14093e+05      6.18e-07\npolygon 97               26  3.03928e+06      4.54e-06\npolygon 98               14  1.53563e+05      2.29e-07\npolygon 99               19  5.08538e+05      7.59e-07\npolygon 100              16  1.80565e+05      2.70e-07\npolygon 101              26  9.75091e+05      1.46e-06\npolygon 102              19  2.15295e+05      3.21e-07\npolygon 103              16  3.50061e+05      5.23e-07\npolygon 104 (hole)        3 -1.78834e+02     -2.67e-10\npolygon 105              14  2.11571e+05      3.16e-07\npolygon 106              11  1.59536e+05      2.38e-07\npolygon 107             111  7.35028e+07      1.10e-04\npolygon 108              54  9.35305e+06      1.40e-05\npolygon 109              19  6.34649e+05      9.48e-07\npolygon 110              79  1.47390e+07      2.20e-05\npolygon 111              10  3.74827e+04      5.60e-08\npolygon 112              13  1.37100e+05      2.05e-07\npolygon 113              31  4.47193e+06      6.68e-06\npolygon 114              19  1.23742e+06      1.85e-06\npolygon 115              20  1.79201e+06      2.68e-06\npolygon 116              16  2.19464e+05      3.28e-07\npolygon 117              11  7.94092e+04      1.19e-07\npolygon 118              14  1.45779e+05      2.18e-07\npolygon 119              31  6.24672e+05      9.33e-07\npolygon 120              11  2.29288e+04      3.42e-08\npolygon 121              18  2.10998e+05      3.15e-07\npolygon 122              26  2.52571e+06      3.77e-06\npolygon 123              16  5.77783e+05      8.63e-07\npolygon 124              26  8.87985e+05      1.33e-06\npolygon 125              13  1.10557e+05      1.65e-07\npolygon 126              21  9.55338e+05      1.43e-06\npolygon 127              32  2.18189e+06      3.26e-06\npolygon 128              18  7.64830e+05      1.14e-06\npolygon 129              34  1.71336e+06      2.56e-06\npolygon 130             115  9.29594e+05      1.39e-06\npolygon 131              68  2.06761e+05      3.09e-07\npolygon 132              40  4.87851e+06      7.28e-06\npolygon 133              10  7.43137e+04      1.11e-07\npolygon 134              17  5.95020e+05      8.88e-07\npolygon 135              21  4.02132e+05      6.00e-07\npolygon 136              21  1.09635e+06      1.64e-06\npolygon 137              14  1.15356e+05      1.72e-07\npolygon 138              20  3.13610e+05      4.68e-07\npolygon 139             275  3.92648e+08      5.86e-04\npolygon 140              16  2.19612e+05      3.28e-07\npolygon 141              13  2.64858e+05      3.95e-07\npolygon 142              23  1.25549e+06      1.87e-06\npolygon 143               9  1.79312e+05      2.68e-07\npolygon 144              15  2.93132e+05      4.38e-07\npolygon 145              15  5.29892e+05      7.91e-07\npolygon 146              23  4.95351e+05      7.40e-07\npolygon 147              14  4.41976e+05      6.60e-07\npolygon 148              19  3.32318e+05      4.96e-07\npolygon 149              16  4.15914e+05      6.21e-07\npolygon 150              22  5.10526e+05      7.62e-07\npolygon 151              48  1.87148e+07      2.79e-05\npolygon 152              18  1.62882e+06      2.43e-06\npolygon 153              71  2.43615e+07      3.64e-05\npolygon 154             116  5.16444e+07      7.71e-05\npolygon 155              19  1.54144e+06      2.30e-06\npolygon 156              11  2.01013e+05      3.00e-07\npolygon 157              20  2.31201e+06      3.45e-06\npolygon 158              15  5.94674e+05      8.88e-07\npolygon 159             218  1.56252e+08      2.33e-04\npolygon 160             162  8.80247e+07      1.31e-04\npolygon 161              16  3.69968e+05      5.52e-07\npolygon 162              14  1.61451e+05      2.41e-07\npolygon 163              18  5.54566e+05      8.28e-07\npolygon 164              19  5.07078e+05      7.57e-07\npolygon 165              57  6.86475e+06      1.03e-05\npolygon 166              15  6.56018e+05      9.80e-07\npolygon 167              21  6.65092e+05      9.93e-07\npolygon 168              15  5.97784e+05      8.93e-07\npolygon 169              37  2.56010e+06      3.82e-06\npolygon 170              13  1.66996e+05      2.49e-07\npolygon 171              20  8.18381e+05      1.22e-06\npolygon 172              21  2.89704e+06      4.33e-06\npolygon 173              15  4.08213e+05      6.10e-07\npolygon 174             104  4.71547e+07      7.04e-05\npolygon 175              28  3.80443e+06      5.68e-06\npolygon 176              67  3.17343e+07      4.74e-05\npolygon 177             730  9.20735e+08      1.37e-03\npolygon 178              16  2.01576e+05      3.01e-07\npolygon 179              12  1.41506e+05      2.11e-07\npolygon 180              15  4.92125e+05      7.35e-07\npolygon 181              18  1.58128e+06      2.36e-06\npolygon 182              25  1.94322e+06      2.90e-06\npolygon 183              12  2.51373e+05      3.75e-07\npolygon 184             412  4.47936e+08      6.69e-04\npolygon 185              22  7.57105e+05      1.13e-06\npolygon 186              16  6.97434e+05      1.04e-06\npolygon 187              39  4.45130e+06      6.65e-06\npolygon 188              13  8.83786e+05      1.32e-06\npolygon 189              10  2.06200e+05      3.08e-07\npolygon 190              76  3.60497e+07      5.38e-05\npolygon 191              13  4.56433e+05      6.82e-07\npolygon 192              28  2.30613e+06      3.44e-06\npolygon 193              27  2.50338e+06      3.74e-06\npolygon 194              14  4.69238e+05      7.01e-07\npolygon 195              10  1.69886e+05      2.54e-07\npolygon 196              16  5.42822e+05      8.11e-07\npolygon 197              10  1.17633e+05      1.76e-07\npolygon 198               8  7.08579e+04      1.06e-07\npolygon 199             144  7.85300e+07      1.17e-04\npolygon 200              37  1.93477e+06      2.89e-06\npolygon 201              25  5.59996e+05      8.36e-07\npolygon 202              44  2.86031e+06      4.27e-06\npolygon 203              26  1.26276e+06      1.89e-06\npolygon 204             149  1.37840e+08      2.06e-04\npolygon 205              18  4.84958e+05      7.24e-07\npolygon 206              73  2.93195e+07      4.38e-05\npolygon 207              45  6.87481e+06      1.03e-05\npolygon 208              64  1.80880e+07      2.70e-05\npolygon 209              12  8.76879e+05      1.31e-06\npolygon 210              26  2.78381e+06      4.16e-06\npolygon 211              35  8.72326e+06      1.30e-05\npolygon 212              53  1.06237e+07      1.59e-05\npolygon 213              26  5.40467e+06      8.07e-06\npolygon 214             148  1.05037e+08      1.57e-04\npolygon 215              21  8.32798e+05      1.24e-06\npolygon 216              21  2.23023e+06      3.33e-06\npolygon 217               8  6.30805e+05      9.42e-07\npolygon 218              78  3.67603e+07      5.49e-05\npolygon 219              18  1.64745e+06      2.46e-06\npolygon 220              58  1.31747e+07      1.97e-05\npolygon 221              94  1.16837e+07      1.74e-05\npolygon 222              53  3.17801e+06      4.75e-06\npolygon 223             137  8.46454e+06      1.26e-05\npolygon 224              23  4.36507e+05      6.52e-07\npolygon 225              27  9.72136e+05      1.45e-06\npolygon 226              55  1.98854e+06      2.97e-06\npolygon 227              48  1.02651e+07      1.53e-05\npolygon 228              15  3.16153e+05      4.72e-07\npolygon 229              22  8.93201e+05      1.33e-06\npolygon 230              18  2.91538e+05      4.35e-07\npolygon 231              59  3.70736e+06      5.54e-06\npolygon 232              11  1.55205e+05      2.32e-07\npolygon 233              14  1.87401e+05      2.80e-07\npolygon 234              11  6.54128e+04      9.77e-08\npolygon 235              11  8.64659e+04      1.29e-07\npolygon 236              12  2.25129e+05      3.36e-07\npolygon 237              30  2.72178e+06      4.06e-06\npolygon 238 (hole)        3 -2.26252e+00     -3.38e-12\npolygon 239             180  1.80314e+07      2.69e-05\npolygon 240              14  4.01942e+05      6.00e-07\npolygon 241             103  1.33467e+07      1.99e-05\npolygon 242              14  2.07708e+05      3.10e-07\npolygon 243              55  4.38623e+06      6.55e-06\npolygon 244              41  4.69733e+06      7.01e-06\npolygon 245              74  3.92633e+06      5.86e-06\npolygon 246              31  2.79477e+06      4.17e-06\npolygon 247              17  8.74607e+05      1.31e-06\npolygon 248              26  4.50962e+05      6.73e-07\npolygon 249              18  1.15065e+06      1.72e-06\npolygon 250             164  1.48037e+07      2.21e-05\npolygon 251              12  3.17290e+05      4.74e-07\npolygon 252              69  2.59551e+07      3.88e-05\npolygon 253              37  7.85963e+05      1.17e-06\npolygon 254              14  3.37873e+05      5.05e-07\npolygon 255              12  1.77980e+05      2.66e-07\npolygon 256              21  6.46195e+05      9.65e-07\npolygon 257              24  2.69998e+06      4.03e-06\npolygon 258              30  1.00675e+06      1.50e-06\npolygon 259              57  4.22747e+06      6.31e-06\npolygon 260              23  8.63543e+05      1.29e-06\npolygon 261              11  2.01925e+05      3.02e-07\npolygon 262              95  2.88232e+07      4.30e-05\npolygon 263             452  9.64208e+07      1.44e-04\npolygon 264              77  1.72297e+07      2.57e-05\npolygon 265              16  3.33522e+05      4.98e-07\npolygon 266              19  6.82895e+05      1.02e-06\npolygon 267              43  3.95062e+06      5.90e-06\npolygon 268              29  1.00709e+06      1.50e-06\npolygon 269              21  8.90014e+05      1.33e-06\npolygon 270              22  7.93453e+05      1.18e-06\npolygon 271              13  4.52813e+05      6.76e-07\npolygon 272              30  1.49817e+06      2.24e-06\npolygon 273              48  4.23996e+06      6.33e-06\npolygon 274              37  1.20290e+06      1.80e-06\npolygon 275              19  4.85805e+05      7.25e-07\npolygon 276              46  2.18001e+06      3.26e-06\npolygon 277               7  1.33723e+05      2.00e-07\npolygon 278              54  1.82059e+07      2.72e-05\npolygon 279              10  8.57866e+05      1.28e-06\npolygon 280              14  1.98445e+05      2.96e-07\npolygon 281              19  4.68357e+05      6.99e-07\npolygon 282              52  8.57765e+06      1.28e-05\npolygon 283              73  7.91998e+06      1.18e-05\npolygon 284              23  8.19561e+06      1.22e-05\npolygon 285              10  1.06594e+05      1.59e-07\npolygon 286             169  1.39462e+07      2.08e-05\npolygon 287              17  2.55915e+05      3.82e-07\npolygon 288              12  1.81516e+05      2.71e-07\npolygon 289              16  3.68509e+05      5.50e-07\npolygon 290              12  1.24954e+05      1.87e-07\npolygon 291            1012  4.61886e+08      6.90e-04\npolygon 292              15  5.42647e+05      8.10e-07\npolygon 293              12  5.53088e+05      8.26e-07\npolygon 294              24  1.06455e+06      1.59e-06\npolygon 295              14  3.17038e+05      4.73e-07\npolygon 296              17  1.25559e+06      1.87e-06\npolygon 297              16  1.92407e+06      2.87e-06\npolygon 298              80  1.86306e+07      2.78e-05\npolygon 299              11  6.83880e+04      1.02e-07\npolygon 300             166  4.21470e+07      6.29e-05\npolygon 301              22  1.36174e+06      2.03e-06\npolygon 302              31  6.07363e+05      9.07e-07\npolygon 303              10  1.27067e+05      1.90e-07\npolygon 304             164  5.02951e+07      7.51e-05\npolygon 305              17  1.20798e+06      1.80e-06\npolygon 306              59  2.41720e+06      3.61e-06\npolygon 307              12  2.52952e+05      3.78e-07\npolygon 308              14  2.44407e+05      3.65e-07\npolygon 309              43  4.89177e+06      7.30e-06\npolygon 310              40  3.86642e+06      5.77e-06\npolygon 311              23  4.59203e+05      6.86e-07\npolygon 312              14  1.79442e+05      2.68e-07\npolygon 313              13  1.61191e+05      2.41e-07\npolygon 314              43  1.33365e+06      1.99e-06\npolygon 315              75  1.20247e+07      1.80e-05\npolygon 316              17  9.96466e+04      1.49e-07\npolygon 317              22  1.60660e+06      2.40e-06\npolygon 318             730  1.16983e+08      1.75e-04\npolygon 319             129  7.87539e+06      1.18e-05\npolygon 320              22  4.66256e+05      6.96e-07\npolygon 321              19  5.44519e+05      8.13e-07\npolygon 322              16  3.73911e+05      5.58e-07\npolygon 323              88  3.47678e+07      5.19e-05\npolygon 324              46  3.23711e+06      4.83e-06\npolygon 325              47  9.17482e+05      1.37e-06\npolygon 326              14  4.44869e+05      6.64e-07\npolygon 327              43  1.29527e+06      1.93e-06\npolygon 328              65  3.20974e+06      4.79e-06\npolygon 329             306  1.83695e+07      2.74e-05\npolygon 330              17  4.25486e+05      6.35e-07\npolygon 331              29  1.08467e+06      1.62e-06\npolygon 332              26  1.16602e+06      1.74e-06\npolygon 333             135  4.90655e+06      7.33e-06\npolygon 334              23  1.87723e+06      2.80e-06\npolygon 335              21  7.02338e+05      1.05e-06\npolygon 336              30  4.99970e+06      7.47e-06\npolygon 337              21  7.71571e+05      1.15e-06\npolygon 338              13  1.47832e+05      2.21e-07\npolygon 339              26  3.17307e+06      4.74e-06\npolygon 340              17  1.03642e+06      1.55e-06\npolygon 341             100  8.74537e+06      1.31e-05\npolygon 342              11  1.13950e+05      1.70e-07\npolygon 343              26  8.27840e+05      1.24e-06\npolygon 344              17  4.10882e+05      6.14e-07\npolygon 345              13  1.49250e+05      2.23e-07\npolygon 346              35  1.76408e+06      2.63e-06\npolygon 347              15  2.03390e+05      3.04e-07\npolygon 348              18  1.70982e+05      2.55e-07\npolygon 349              32  7.98599e+06      1.19e-05\npolygon 350              27  3.20839e+05      4.79e-07\npolygon 351             539  1.17139e+08      1.75e-04\npolygon 352              51  1.57614e+06      2.35e-06\npolygon 353              19  3.60772e+05      5.39e-07\npolygon 354              58  2.10060e+06      3.14e-06\npolygon 355              13  1.70224e+05      2.54e-07\npolygon 356              11  6.11736e+05      9.13e-07\npolygon 357              35  5.26152e+06      7.86e-06\npolygon 358              16  1.99371e+05      2.98e-07\npolygon 359              14  4.48979e+05      6.70e-07\npolygon 360              25  1.92913e+06      2.88e-06\npolygon 361              16  4.26157e+05      6.36e-07\npolygon 362              46  1.88229e+06      2.81e-06\npolygon 363              17  2.29456e+05      3.43e-07\npolygon 364              36  4.01418e+06      5.99e-06\npolygon 365              57  1.77153e+07      2.65e-05\npolygon 366              20  5.72298e+05      8.55e-07\npolygon 367              14  2.46782e+05      3.68e-07\npolygon 368              29  1.01300e+06      1.51e-06\npolygon 369              90  8.54955e+06      1.28e-05\npolygon 370              21  3.99098e+05      5.96e-07\npolygon 371              12  2.81650e+05      4.21e-07\npolygon 372              52  3.19337e+06      4.77e-06\npolygon 373              13  3.40300e+05      5.08e-07\npolygon 374              29  9.08533e+05      1.36e-06\npolygon 375              20  3.07393e+05      4.59e-07\npolygon 376              19  1.15906e+06      1.73e-06\npolygon 377              17  1.16182e+06      1.73e-06\npolygon 378              21  2.60877e+06      3.90e-06\npolygon 379              15  1.09001e+05      1.63e-07\npolygon 380              37  1.31921e+06      1.97e-06\npolygon 381              53  1.46854e+06      2.19e-06\npolygon 382              59  8.92822e+06      1.33e-05\npolygon 383               9  7.44981e+04      1.11e-07\npolygon 384              14  2.41462e+05      3.61e-07\npolygon 385              96  7.25940e+06      1.08e-05\npolygon 386              11  1.06055e+05      1.58e-07\npolygon 387              49  1.87834e+06      2.80e-06\npolygon 388              23  6.08310e+05      9.08e-07\npolygon 389              50  6.76488e+05      1.01e-06\npolygon 390              22  4.83089e+05      7.21e-07\npolygon 391              17  1.17278e+05      1.75e-07\npolygon 392              13  8.98786e+05      1.34e-06\npolygon 393              43  1.01757e+06      1.52e-06\npolygon 394              52  1.68377e+06      2.51e-06\npolygon 395             348  2.50314e+08      3.74e-04\npolygon 396              43  1.29120e+06      1.93e-06\npolygon 397              71  2.02836e+06      3.03e-06\npolygon 398 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 399             141  4.53240e+06      6.77e-06\npolygon 400              52  3.62008e+06      5.41e-06\npolygon 401              20  7.69539e+05      1.15e-06\npolygon 402              88  8.88904e+06      1.33e-05\npolygon 403              12  1.44668e+05      2.16e-07\npolygon 404              46  2.28026e+06      3.40e-06\npolygon 405              39  4.79165e+06      7.15e-06\npolygon 406              53  2.86736e+06      4.28e-06\npolygon 407              38  3.22508e+06      4.82e-06\npolygon 408              18  4.44863e+05      6.64e-07\npolygon 409              45  1.45134e+06      2.17e-06\npolygon 410              86  2.56400e+07      3.83e-05\npolygon 411             158  1.74510e+07      2.61e-05\npolygon 412              14  2.50383e+05      3.74e-07\npolygon 413             120  7.17019e+06      1.07e-05\npolygon 414             146  2.28448e+07      3.41e-05\npolygon 415             143  2.34472e+07      3.50e-05\npolygon 416              20  3.47415e+05      5.19e-07\npolygon 417              84  3.86387e+06      5.77e-06\npolygon 418              68  1.10850e+07      1.66e-05\npolygon 419             863  7.47702e+07      1.12e-04\npolygon 420              53  7.54742e+06      1.13e-05\npolygon 421              64  2.11016e+06      3.15e-06\npolygon 422             103  1.47525e+07      2.20e-05\npolygon 423              26  3.40345e+06      5.08e-06\npolygon 424             103  8.40445e+06      1.25e-05\npolygon 425              23  4.92041e+05      7.35e-07\npolygon 426              27  5.53625e+05      8.27e-07\npolygon 427              60  3.56102e+06      5.32e-06\npolygon 428             151  1.51314e+07      2.26e-05\npolygon 429             708  4.18129e+08      6.24e-04\npolygon 430             120  1.32857e+07      1.98e-05\npolygon 431             856  2.53898e+08      3.79e-04\npolygon 432              13  2.47298e+05      3.69e-07\npolygon 433              16  7.35754e+05      1.10e-06\npolygon 434              21  5.31633e+05      7.94e-07\npolygon 435              72  1.03185e+07      1.54e-05\npolygon 436              38  1.34734e+06      2.01e-06\npolygon 437               8  4.09489e+05      6.11e-07\npolygon 438              17  2.46995e+05      3.69e-07\npolygon 439              14  1.42285e+05      2.12e-07\npolygon 440               9  1.56346e+05      2.33e-07\npolygon 441              42  5.49581e+05      8.21e-07\npolygon 442              59  1.15813e+06      1.73e-06\npolygon 443              12  1.16845e+05      1.74e-07\npolygon 444              11  6.00122e+04      8.96e-08\npolygon 445              14  1.63465e+05      2.44e-07\npolygon 446               8  4.73674e+04      7.07e-08\npolygon 447              23  6.69330e+05      9.99e-07\npolygon 448             144  6.48346e+06      9.68e-06\npolygon 449              74  4.79923e+06      7.17e-06\npolygon 450             116  1.02706e+07      1.53e-05\npolygon 451              16  2.74005e+05      4.09e-07\npolygon 452              97  4.72599e+06      7.06e-06\npolygon 453              18  6.15583e+05      9.19e-07\npolygon 454             146  1.38979e+07      2.08e-05\npolygon 455              32  1.94516e+06      2.90e-06\npolygon 456              26  9.81356e+05      1.47e-06\npolygon 457              82  4.39797e+06      6.57e-06\npolygon 458              33  9.36113e+05      1.40e-06\npolygon 459              47  1.51844e+06      2.27e-06\npolygon 460             196  2.32689e+07      3.47e-05\npolygon 461              53  1.30069e+06      1.94e-06\npolygon 462              70  1.00802e+07      1.51e-05\npolygon 463              10  5.33870e+05      7.97e-07\npolygon 464             211  2.73026e+07      4.08e-05\npolygon 465              41  1.44141e+06      2.15e-06\npolygon 466               9  5.20220e+05      7.77e-07\npolygon 467             316  6.66808e+07      9.96e-05\npolygon 468              17  7.48505e+05      1.12e-06\npolygon 469              15  1.49799e+05      2.24e-07\npolygon 470              24  4.99500e+05      7.46e-07\npolygon 471              12  2.24463e+05      3.35e-07\npolygon 472             100  1.06028e+07      1.58e-05\npolygon 473              11  1.24267e+05      1.86e-07\npolygon 474             143  1.89581e+07      2.83e-05\npolygon 475              60  7.07802e+06      1.06e-05\npolygon 476             124  1.23476e+07      1.84e-05\npolygon 477              34  5.67625e+06      8.48e-06\npolygon 478             797  1.86955e+08      2.79e-04\npolygon 479              15  7.15891e+05      1.07e-06\npolygon 480              20  1.61624e+06      2.41e-06\npolygon 481              13  1.73955e+05      2.60e-07\npolygon 482              60  2.42590e+06      3.62e-06\npolygon 483              20  3.86365e+05      5.77e-07\npolygon 484             213  3.69421e+07      5.52e-05\npolygon 485              15  4.55574e+05      6.80e-07\npolygon 486              35  1.56058e+06      2.33e-06\npolygon 487              32  1.42419e+06      2.13e-06\npolygon 488              68  2.30711e+06      3.44e-06\npolygon 489             240  5.93935e+07      8.87e-05\npolygon 490             145  1.58875e+07      2.37e-05\npolygon 491              39  3.67239e+06      5.48e-06\npolygon 492              54  3.84847e+06      5.75e-06\npolygon 493              32  1.14073e+06      1.70e-06\npolygon 494              18  3.58549e+05      5.35e-07\npolygon 495              25  8.06470e+05      1.20e-06\npolygon 496              15  2.67818e+05      4.00e-07\npolygon 497              26  1.43681e+06      2.15e-06\npolygon 498              18  3.10061e+05      4.63e-07\npolygon 499              18  4.71644e+05      7.04e-07\npolygon 500              16  5.04146e+05      7.53e-07\npolygon 501              72  7.33720e+06      1.10e-05\npolygon 502              27  1.37772e+06      2.06e-06\npolygon 503              15  3.17217e+05      4.74e-07\npolygon 504              37  1.17498e+06      1.75e-06\npolygon 505              21  7.05388e+05      1.05e-06\npolygon 506             216  2.05399e+07      3.07e-05\npolygon 507              16  2.40093e+05      3.59e-07\npolygon 508              29  1.71282e+06      2.56e-06\npolygon 509              30  1.28695e+06      1.92e-06\npolygon 510              36  2.29670e+06      3.43e-06\npolygon 511             129  1.97698e+07      2.95e-05\npolygon 512              65  2.65969e+06      3.97e-06\npolygon 513             283  3.30575e+07      4.94e-05\npolygon 514              28  7.06271e+05      1.05e-06\npolygon 515              28  5.50158e+05      8.21e-07\npolygon 516              49  2.25015e+06      3.36e-06\npolygon 517              26  1.24280e+06      1.86e-06\npolygon 518              28  9.02794e+05      1.35e-06\npolygon 519              18  4.84064e+05      7.23e-07\npolygon 520              47  2.33442e+06      3.49e-06\npolygon 521              17  2.23835e+05      3.34e-07\npolygon 522              34  7.32504e+05      1.09e-06\npolygon 523              41  7.15538e+05      1.07e-06\npolygon 524              21  5.81687e+05      8.69e-07\npolygon 525              63  3.83819e+06      5.73e-06\npolygon 526              27  1.33192e+06      1.99e-06\npolygon 527              46  2.95028e+06      4.41e-06\npolygon 528              10  1.34210e+05      2.00e-07\npolygon 529              16  2.38274e+05      3.56e-07\npolygon 530              18  4.18536e+05      6.25e-07\npolygon 531              46  1.26584e+06      1.89e-06\npolygon 532              14  2.14679e+05      3.21e-07\npolygon 533              76  3.63371e+06      5.43e-06\npolygon 534             339  4.44685e+07      6.64e-05\npolygon 535             109  6.29786e+06      9.40e-06\npolygon 536              14  2.89570e+05      4.32e-07\npolygon 537              37  9.07704e+05      1.36e-06\npolygon 538              68  3.86104e+06      5.77e-06\npolygon 539             183  1.45458e+07      2.17e-05\npolygon 540              44  1.64355e+06      2.45e-06\npolygon 541              26  1.21667e+06      1.82e-06\npolygon 542              13  1.95710e+05      2.92e-07\npolygon 543              38  1.44402e+06      2.16e-06\npolygon 544              14  3.29394e+05      4.92e-07\npolygon 545              14  1.79828e+05      2.69e-07\npolygon 546              44  2.11118e+06      3.15e-06\npolygon 547             643  1.79215e+08      2.68e-04\npolygon 548              24  1.10979e+06      1.66e-06\npolygon 549              30  1.57106e+06      2.35e-06\npolygon 550              46  3.61716e+06      5.40e-06\npolygon 551              93  7.56340e+05      1.13e-06\npolygon 552              57  3.07732e+06      4.59e-06\npolygon 553              18  2.16224e+05      3.23e-07\npolygon 554              17  5.12388e+05      7.65e-07\npolygon 555               9  7.44780e+04      1.11e-07\npolygon 556              57  8.09122e+06      1.21e-05\npolygon 557              16  4.01323e+05      5.99e-07\npolygon 558             118  2.90304e+07      4.33e-05\npolygon 559              22  4.44693e+05      6.64e-07\npolygon 560              43  2.28763e+06      3.42e-06\npolygon 561              27  1.15444e+06      1.72e-06\npolygon 562              25  1.21695e+06      1.82e-06\npolygon 563              53  4.49228e+06      6.71e-06\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\nPlotting Armed Conflict ppp:\n\n#plot(armedconflict_ppp)\nplot(armedconflict_ppp_list[[1]])\n\n\n\n\n\n\n\n\nRescale to kilometers:\n\narmedconflict_ppp_km_list &lt;- list()\n\nfor (i in names(armedconflict_ppp_list)){\n  armedconflict_ppp_km &lt;- rescale.ppp(armedconflict_ppp_list[[i]], 1000, \"km\")\n  \n  armedconflict_ppp_km_list[[i]] &lt;- armedconflict_ppp_km\n}\n\nPlotting quarterly KDE:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(armedconflict_ppp_km_list[[1]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q1\")\nplot(density(armedconflict_ppp_km_list[[2]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q2\")\nplot(density(armedconflict_ppp_km_list[[3]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q3\")\nplot(density(armedconflict_ppp_km_list[[4]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q4\")\n\n\n\n\n\n\n\n\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(armedconflict_ppp_km_list[[5]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q1\")\nplot(density(armedconflict_ppp_km_list[[6]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q2\")\nplot(density(armedconflict_ppp_km_list[[7]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q3\")\nplot(density(armedconflict_ppp_km_list[[8]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q4\")\n\n\n\n\n\n\n\n\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(armedconflict_ppp_km_list[[9]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q1\")\nplot(density(armedconflict_ppp_km_list[[10]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q2\")\nplot(density(armedconflict_ppp_km_list[[11]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q3\")\nplot(density(armedconflict_ppp_km_list[[12]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q4\")\n\n\n\n\n\n\n\n\n\npar(mfrow = c(1,2))\nplot(density(armedconflict_ppp_km_list[[13]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2024 Q1\")\nplot(density(armedconflict_ppp_km_list[[14]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2024 Q2\")\n\n\n\n\n\n\n\n\n\n\n\nPlotting STKDE:\n\nst_kde &lt;- spattemp.density(ac_ppp)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 44832.76 (spatial)\n  lambda = 0.0055 (temporal)\n\nNo. of observations\n  42518 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [1.530449e-24, 1.421689e-10]\n\n\n\nplot_stkde_quarters &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 3)\n  par(mfrow=c(2,2), mar=c(2,2,2,1))  # Set the layout to 2x2 grid\n  \n  for(i in quarters) {\n    plot(st_kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"STKDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Ribbon remains on for informative plots\n  }\n  \n}\n\n\n#just to plot the last 2 \nplot_stkde_quarters2 &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 1)  # Adjusted to plot 4 quarters\n  par(mfrow=c(1,2), mar=c(2,2,2,1))  \n  \n  for(i in quarters) {\n    plot(st_kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"STKDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Ribbon remains on for informative plots\n  }\n  \n}\n\n\nplot_stkde_quarters(1)\n\n\n\n\n\n\n\n\n\nplot_stkde_quarters(5)\n\n\n\n\n\n\n\n\n\nplot_stkde_quarters(9)\n\n\n\n\n\n\n\n\n\nplot_stkde_quarters2(13)\n\n\n\n\n\n\n\n\nA few observations become apparent:\n\nAreas with heavy conflict are the same areas with high population density(Mandalay/Yangon),\nConflict incidence rate picked up around 2021 Q4,\nA small spike in fighting occurred in Shan state, near the border with China during the end of 2023,\nHuge increase in armed engagements in 2024 Q2 after a lull at the start of the year, especially in Rakhine(West) and Kayin/Mon(Southeast) states.\n\nWhats the reason behind the large increase in conflicts during 2024? Only god knows — until i google use geospatial analysis to find out haha :]\nLoad regional shapefile and make an owin object from it:\n\nreg_sf &lt;- st_read(dsn = \"data/mmr_polbnda2_adm1_250k_mimu_1\", layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\THE\\THE1\\data\\mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nplot(reg_sf)\n\n\n\n\n\n\n\n\nTransform to match ACLED CRS:\n\nreg_sf &lt;- st_transform(reg_sf , st_crs(acled_sf))\n\nprint(st_crs(reg_sf ))\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nCreating window for ppp object:\n\nreg_owin &lt;- as.owin(reg_sf)\n\n\narmedconflictreg_ppp &lt;- acled_jit[reg_owin]\n\n\narmedconflictreg_sf &lt;- st_as_sf(as.data.frame(acled_jit), coords = c(\"x\", \"y\"), crs = st_crs(reg_sf))\n\n\nggplot() +\n  geom_sf(data = reg_sf, aes(fill = ST), alpha = 0.5) +\n  geom_sf(data = armedconflictreg_sf, color = \"red\", size = 0.5, alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Armed Conflicts in Myanmar\",\n       fill = \"State/Region\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nIn the words of former chess world champion vladimir kramnik, “let us begin the procedure”\nComparing between q1 and q14, it is evident that there is significantly increased activity in Rakhine, as well as the areas east of Yangon.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(quarters_list$Quarter_1)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(quarters_list$Quarter_14)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nDivine beings have bestowed upon me arcane knowledge to make light of this increase in armed conflicts.\n\nOn Rakhine\nOn Mon and Kayin\n\n\n\n\nPlotting Rakhine state:\n\nrak &lt;- reg_sf %&gt;% filter(ST == \"Rakhine\")\nplot(st_geometry(rak), main = \"Rakhine\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(rak, main = \"Rakhine\")\n\n\n\n\n\n\n\n\n\nrak_owin &lt;- as.owin(rak)\nrak_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [-210008.62, 66341.23] x [1921825.4, 2389804.6] units\n\n\n\nclass(rak_owin)\n\n[1] \"owin\"\n\n\n\nrak_quarter &lt;- acled_quarter %&gt;%\n  filter(admin1 == \"Rakhine\")\n\n\ntm_shape(rak)+\n  tm_polygons()+\n  tm_shape(rak_quarter)+\n  tm_dots(size = 0.1)+\n  tm_facets(by =\"QuarterNumeric\", free.coords = FALSE, drop.units =TRUE)\n\n\n\n\n\n\n\n\n\nrak_q &lt;- rak_quarter %&gt;%\n  select(QuarterNumeric)\n\n\nrak_q_ppp &lt;- as.ppp(rak_q)\nrak_q_ppp\n\nMarked planar point pattern: 2279 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-208804.42, 32638.7] x [1939748.9, 2377309.7] units\n\n\ncheck ppp object\n\nsummary(rak_q_ppp)\n\nMarked planar point pattern:  2279 points\nAverage intensity 2.157203e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    8.00   12.00   10.86   13.00   14.00 \n\nWindow: rectangle = [-208804.42, 32638.7] x [1939748.9, 2377309.7] units\n                    (241400 x 437600 units)\nWindow area = 1.05646e+11 square units\n\n\n\nany(duplicated(rak_q_ppp))\n\n[1] TRUE\n\n\n\nrak_jit &lt;- rjitter(rak_q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(rak_jit))\n\n[1] FALSE\n\n\n\nrak_q_owin &lt;- rak_jit[rak_owin]\nsummary(rak_q_owin)\n\nMarked planar point pattern:  2227 points\nAverage intensity 6.361399e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    8.00   12.00   10.85   13.00   14.00 \n\nWindow: polygonal boundary\n101 separate polygons (no holes)\n             vertices        area relative.area\npolygon 1       10525 3.20404e+10      9.15e-01\npolygon 2          26 2.85778e+06      8.16e-05\npolygon 3          43 7.32477e+06      2.09e-04\npolygon 4         103 1.86991e+07      5.34e-04\npolygon 5          37 9.32316e+06      2.66e-04\npolygon 6         371 2.43869e+08      6.97e-03\npolygon 7         297 2.84905e+08      8.14e-03\npolygon 8          33 1.68222e+07      4.81e-04\npolygon 9          33 4.47665e+05      1.28e-05\npolygon 10         19 1.34593e+05      3.84e-06\npolygon 11         39 1.36327e+06      3.89e-05\npolygon 12        137 1.55547e+08      4.44e-03\npolygon 13         36 8.76479e+06      2.50e-04\npolygon 14         79 3.08116e+07      8.80e-04\npolygon 15        388 2.25271e+08      6.43e-03\npolygon 16        316 7.78512e+07      2.22e-03\npolygon 17         13 1.09564e+05      3.13e-06\npolygon 18         18 3.49727e+05      9.99e-06\npolygon 19         31 1.23017e+06      3.51e-05\npolygon 20         16 6.55537e+05      1.87e-05\npolygon 21         24 8.49487e+05      2.43e-05\npolygon 22         30 2.54436e+06      7.27e-05\npolygon 23        336 4.15806e+07      1.19e-03\npolygon 24        330 1.69190e+08      4.83e-03\npolygon 25         47 1.08035e+07      3.09e-04\npolygon 26         39 4.94369e+06      1.41e-04\npolygon 27         23 2.72438e+06      7.78e-05\npolygon 28         33 5.70263e+06      1.63e-04\npolygon 29         90 4.20329e+07      1.20e-03\npolygon 30         28 1.35341e+06      3.87e-05\npolygon 31        225 1.08816e+08      3.11e-03\npolygon 32         33 9.16670e+06      2.62e-04\npolygon 33        192 7.02655e+07      2.01e-03\npolygon 34         49 1.49245e+07      4.26e-04\npolygon 35         98 1.79076e+07      5.12e-04\npolygon 36          6 6.37552e+05      1.82e-05\npolygon 37         49 1.01233e+07      2.89e-04\npolygon 38        141 3.43053e+07      9.80e-04\npolygon 39        195 3.24345e+07      9.26e-04\npolygon 40         51 3.38313e+06      9.66e-05\npolygon 41         34 2.01400e+06      5.75e-05\npolygon 42         13 2.50435e+05      7.15e-06\npolygon 43          9 9.04824e+04      2.58e-06\npolygon 44         34 4.61794e+06      1.32e-04\npolygon 45         17 4.58200e+05      1.31e-05\npolygon 46         15 2.74776e+05      7.85e-06\npolygon 47         21 5.34978e+05      1.53e-05\npolygon 48         19 4.55347e+05      1.30e-05\npolygon 49         71 3.42557e+06      9.79e-05\npolygon 50         24 1.32420e+06      3.78e-05\npolygon 51         15 3.26247e+05      9.32e-06\npolygon 52         39 8.65790e+05      2.47e-05\npolygon 53         43 1.41627e+06      4.05e-05\npolygon 54         24 7.52068e+05      2.15e-05\npolygon 55         96 1.32101e+07      3.77e-04\npolygon 56         38 1.18003e+06      3.37e-05\npolygon 57        429 5.99087e+08      1.71e-02\npolygon 58         13 1.74105e+05      4.97e-06\npolygon 59         19 2.52336e+05      7.21e-06\npolygon 60         16 3.11495e+05      8.90e-06\npolygon 61         11 9.11047e+04      2.60e-06\npolygon 62         12 2.13470e+05      6.10e-06\npolygon 63         17 5.82663e+05      1.66e-05\npolygon 64         56 2.60440e+07      7.44e-04\npolygon 65        107 4.91389e+06      1.40e-04\npolygon 66         51 2.79076e+06      7.97e-05\npolygon 67         89 1.61156e+07      4.60e-04\npolygon 68         28 1.30499e+06      3.73e-05\npolygon 69         11 1.27616e+05      3.65e-06\npolygon 70         34 2.54199e+06      7.26e-05\npolygon 71         27 1.72476e+06      4.93e-05\npolygon 72         37 2.01882e+06      5.77e-05\npolygon 73         23 1.65571e+06      4.73e-05\npolygon 74         33 3.05816e+06      8.74e-05\npolygon 75         14 3.23153e+05      9.23e-06\npolygon 76         91 1.51209e+07      4.32e-04\npolygon 77         12 2.42901e+05      6.94e-06\npolygon 78         11 1.37889e+05      3.94e-06\npolygon 79         58 2.29751e+07      6.56e-04\npolygon 80         48 5.10265e+06      1.46e-04\npolygon 81         22 1.30706e+06      3.73e-05\npolygon 82         15 3.49480e+05      9.98e-06\npolygon 83         17 1.57570e+06      4.50e-05\npolygon 84         34 3.68725e+06      1.05e-04\npolygon 85         34 5.21904e+06      1.49e-04\npolygon 86         24 5.42734e+06      1.55e-04\npolygon 87        422 4.66497e+08      1.33e-02\npolygon 88        142 2.98767e+07      8.53e-04\npolygon 89        132 2.18707e+07      6.25e-04\npolygon 90         19 5.88230e+05      1.68e-05\npolygon 91         22 1.77611e+06      5.07e-05\npolygon 92         40 4.09952e+06      1.17e-04\npolygon 93         28 1.47685e+06      4.22e-05\npolygon 94         67 9.99685e+06      2.86e-04\npolygon 95         25 4.82266e+05      1.38e-05\npolygon 96         16 4.14093e+05      1.18e-05\npolygon 97         26 3.03928e+06      8.68e-05\npolygon 98         14 1.53563e+05      4.39e-06\npolygon 99         19 5.08538e+05      1.45e-05\npolygon 100        16 1.80565e+05      5.16e-06\npolygon 101        26 9.75091e+05      2.79e-05\nenclosing rectangle: [-210008.62, 66341.23] x [1921825.4, 2389804.6] units\n                     (276300 x 468000 units)\nWindow area = 3.5008e+10 square units\nFraction of frame area: 0.271\n\n\n\nstkde_rak &lt;- spattemp.density(rak_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(stkde_rak)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 22040.55 (spatial)\n  lambda = 0.022 (temporal)\n\nNo. of observations\n  2227 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 66341.23] x [1921825, 2389805]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [3.023706e-42, 2.037536e-09]\n\n\n\nqs &lt;- c(1,4)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(8,12)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(13,14)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\nMore evidence showing that the fighting only picked up in 2024, especially in the north and around Thandwe Airport.\nG Function\n\nG_rk = Gest(rak_jit, correction = \"border\")\nplot(G_rk, xlim =c(0,500))\n\n\n\n\n\n\n\n\n\nG_rk.csr &lt;- envelope(rak_jit, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_rk.csr)\n\n\n\n\n\n\n\n\nF Function\n\nF_rk = Fest(rak_jit)\nplot(F_rk)\n\n\n\n\n\n\n\n\n\nF_rk.csr &lt;- envelope(rak_jit, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_rk.csr)\n\n\n\n\n\n\n\n\n\n\n\n\nmk &lt;- reg_sf %&gt;% filter(ST %in% c(\"Kayin\", \"Mon\"))\nplot(st_geometry(mk), main = \"Mon & Kayin\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(mk, main = \"Mon & Kayin\")\n\n\n\n\n\n\n\n\n\nmk_owin &lt;- as.owin(mk)\nmk_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [226179.1, 491639.1] x [1645418.5, 2158819.5] units\n\n\n\nclass(mk_owin)\n\n[1] \"owin\"\n\n\n\nmk_quarter &lt;- acled_quarter %&gt;%\n  filter(admin1 %in% c(\"Kayin\", \"Mon\"))\n\n\ntm_shape(mk)+\n  tm_polygons()+\n  tm_shape(mk_quarter)+\n  tm_dots(size = 0.1)+\n  tm_facets(by =\"QuarterNumeric\", free.coords = FALSE, drop.units =TRUE)\n\n\n\n\n\n\n\n\n\nmk_q &lt;- mk_quarter %&gt;%\n  select(QuarterNumeric)\n\n\nmk_q_ppp &lt;- as.ppp(mk_q)\nmk_q_ppp\n\nMarked planar point pattern: 3507 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [233276, 480797.9] x [1657860.2, 2149957.4] units\n\n\ncheck ppp object\n\nsummary(mk_q_ppp)\n\nMarked planar point pattern:  3507 points\nAverage intensity 2.879196e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   7.935  11.000  14.000 \n\nWindow: rectangle = [233276, 480797.9] x [1657860.2, 2149957.4] units\n                    (247500 x 492100 units)\nWindow area = 1.21805e+11 square units\n\n\n\nany(duplicated(mk_q_ppp))\n\n[1] TRUE\n\n\n\nmk_jit &lt;- rjitter(mk_q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(mk_jit))\n\n[1] FALSE\n\n\n\nmk_q_owin &lt;- mk_jit[mk_owin]\nsummary(mk_q_owin)\n\nMarked planar point pattern:  3480 points\nAverage intensity 8.329182e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   7.931  11.000  14.000 \n\nWindow: polygonal boundary\n69 separate polygons (11 holes)\n                  vertices         area relative.area\npolygon 1 (hole)        13 -1.40633e-02     -3.37e-13\npolygon 2 (hole)         6 -2.76240e-02     -6.61e-13\npolygon 3 (hole)         3 -2.72931e-02     -6.53e-13\npolygon 4 (hole)         3 -1.16808e-02     -2.80e-13\npolygon 5 (hole)        10 -4.10705e-03     -9.83e-14\npolygon 6 (hole)         3 -1.07902e-03     -2.58e-14\npolygon 7 (hole)         3 -8.74118e-04     -2.09e-14\npolygon 8 (hole)         4 -1.90718e-03     -4.56e-14\npolygon 9 (hole)         7 -5.31797e-03     -1.27e-13\npolygon 10 (hole)        4 -1.88745e-02     -4.52e-13\npolygon 11 (hole)        5 -1.72617e-02     -4.13e-13\npolygon 12              54  9.35305e+06      2.24e-04\npolygon 13              19  6.34649e+05      1.52e-05\npolygon 14              10  3.74827e+04      8.97e-07\npolygon 15              13  1.37100e+05      3.28e-06\npolygon 16              31  4.47193e+06      1.07e-04\npolygon 17              19  1.23742e+06      2.96e-05\npolygon 18              16  2.19464e+05      5.25e-06\npolygon 19              11  7.94092e+04      1.90e-06\npolygon 20              14  1.45779e+05      3.49e-06\npolygon 21              31  6.24672e+05      1.50e-05\npolygon 22              11  2.29288e+04      5.49e-07\npolygon 23              18  2.10998e+05      5.05e-06\npolygon 24              26  2.52571e+06      6.05e-05\npolygon 25              16  5.77783e+05      1.38e-05\npolygon 26              26  8.87985e+05      2.13e-05\npolygon 27              13  1.10557e+05      2.65e-06\npolygon 28              21  9.55338e+05      2.29e-05\npolygon 29              32  2.18189e+06      5.22e-05\npolygon 30              18  7.64830e+05      1.83e-05\npolygon 31              34  1.71336e+06      4.10e-05\npolygon 32             115  9.29594e+05      2.22e-05\npolygon 33              68  2.06761e+05      4.95e-06\npolygon 34              40  4.87851e+06      1.17e-04\npolygon 35              10  7.43137e+04      1.78e-06\npolygon 36              17  5.95020e+05      1.42e-05\npolygon 37              21  4.02132e+05      9.62e-06\npolygon 38              21  1.09635e+06      2.62e-05\npolygon 39              14  1.15356e+05      2.76e-06\npolygon 40              20  3.13610e+05      7.51e-06\npolygon 41             275  3.92648e+08      9.40e-03\npolygon 42              16  2.19612e+05      5.26e-06\npolygon 43              23  1.25549e+06      3.00e-05\npolygon 44               9  1.79312e+05      4.29e-06\npolygon 45              15  2.93132e+05      7.02e-06\npolygon 46              15  5.29892e+05      1.27e-05\npolygon 47              23  4.95351e+05      1.19e-05\npolygon 48              16  4.15914e+05      9.95e-06\npolygon 49              11  2.01013e+05      4.81e-06\npolygon 50              20  2.31201e+06      5.53e-05\npolygon 51              15  5.94674e+05      1.42e-05\npolygon 52              16  3.69968e+05      8.85e-06\npolygon 53              14  1.61451e+05      3.86e-06\npolygon 54              18  5.54566e+05      1.33e-05\npolygon 55              15  6.56018e+05      1.57e-05\npolygon 56              13  1.66996e+05      4.00e-06\npolygon 57              21  2.89704e+06      6.93e-05\npolygon 58             104  4.71547e+07      1.13e-03\npolygon 59              12  1.41506e+05      3.39e-06\npolygon 60              18  1.58128e+06      3.78e-05\npolygon 61              25  1.94322e+06      4.65e-05\npolygon 62              12  2.51373e+05      6.02e-06\npolygon 63              16  6.97434e+05      1.67e-05\npolygon 64             137  8.46454e+06      2.03e-04\npolygon 65              23  4.36507e+05      1.04e-05\npolygon 66              27  9.72136e+05      2.33e-05\npolygon 67              55  1.98854e+06      4.76e-05\npolygon 68              79  1.47390e+07      3.53e-04\npolygon 69            6798  4.12630e+10      9.88e-01\nenclosing rectangle: [226179.1, 491639.1] x [1645418.5, 2158819.5] units\n                     (265500 x 513400 units)\nWindow area = 41780800000 square units\nFraction of frame area: 0.307\n\n\n\nstkde_mk &lt;- spattemp.density(mk_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(stkde_mk)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 19935.18 (spatial)\n  lambda = 0.0349 (temporal)\n\nNo. of observations\n  3480 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [226179.1, 491639.1] x [1645419, 2158819]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [1.860509e-29, 2.540474e-10]\n\n\n\nqs &lt;- c(1,14)\npar(mfrow= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\",i))\n}\n\n\n\n\n\n\n\n\nG Func:\n\nG_mk = Gest(mk_jit, correction = \"border\")\nplot(G_mk, xlim =c(0,500))\n\n\n\n\n\n\n\n\n\nG_mk.csr &lt;- envelope(mk_jit, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_mk.csr)\n\n\n\n\n\n\n\n\nF Function\n\nF_mk = Fest(mk_jit)\nplot(F_mk)\n\n\n\n\n\n\n\n\n\nF_mk.csr &lt;- envelope(mk_jit, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_mk.csr)\n\n\n\n\n\n\n\n\n\n\n\nOK now lets be boring and go look at Mandalay/Sagaing where the bulk of the conflict happens:\n\nmnd &lt;- reg_sf %&gt;% filter(ST %in% c(\"Mandalay\", \"Sagaing\"))\nplot(st_geometry(mnd), main = \"Mandalay & Sagaing\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(mnd, main = \"Mandalay & Sagaing\")\n\n\n\n\n\n\n\n\n\nmnd_owin &lt;- as.owin(mnd)\nmnd_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [-17699.96, 308341.37] x [2234807.4, 3029739.1] units\n\n\n\nclass(mnd_owin)\n\n[1] \"owin\"\n\n\n\nmnd_quarter &lt;- acled_quarter %&gt;%\n  filter(admin1 %in% c(\"Mandalay\", \"Sagaing\"))\n\n\ntm_shape(mnd)+\n  tm_polygons()+\n  tm_shape(mnd_quarter)+\n  tm_dots(size = 0.1)+\n  tm_facets(by =\"QuarterNumeric\", free.coords = FALSE, drop.units =TRUE)\n\n\n\n\n\n\n\n\nWowee so much fighting!\n\nmnd_q &lt;- mnd_quarter %&gt;%\n  select(QuarterNumeric)\n\n\nmnd_q_ppp &lt;- as.ppp(mnd_q)\nmnd_q_ppp\n\nMarked planar point pattern: 14731 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-16397.05, 256586.9] x [2252051.1, 2987342.4] units\n\n\ncheck ppp object\n\nsummary(mnd_q_ppp)\n\nMarked planar point pattern:  14731 points\nAverage intensity 7.33898e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.661  11.000  14.000 \n\nWindow: rectangle = [-16397.05, 256586.9] x [2252051.1, 2987342.4] units\n                    (273000 x 735300 units)\nWindow area = 2.00723e+11 square units\n\n\n\nany(duplicated(mnd_q_ppp))\n\n[1] TRUE\n\n\n\nmnd_jit &lt;- rjitter(mnd_q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(mnd_jit))\n\n[1] FALSE\n\n\n\nmnd_q_owin &lt;- mnd_jit[mnd_owin]\nsummary(mnd_q_owin)\n\nMarked planar point pattern:  14730 points\nAverage intensity 1.179593e-07 points per square unit\n\nCoordinates are given to 14 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.662  11.000  14.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 9626 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2234807.4, 3029739.1] units\n                     (326000 x 794900 units)\nWindow area = 1.24874e+11 square units\nFraction of frame area: 0.482\n\n\n\nstkde_mnd &lt;- spattemp.density(mnd_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(stkde_mnd)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 16409.39 (spatial)\n  lambda = 0.0112 (temporal)\n\nNo. of observations\n  14730 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2234807, 3029739]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [4.722011e-94, 2.500945e-10]\n\n\n\nqs &lt;- c(1,2)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(3,4)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(5,6)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(7,8)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(9,10)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(11,12)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(13,14)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\nG Function\n\nG_ms = Gest(mnd_jit, correction = \"border\")\nplot(G_ms, xlim =c(0,500))\n\n\n\n\n\n\n\n\n\nG_ms.csr &lt;- envelope(mnd_jit, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_ms.csr)\n\n\n\n\n\n\n\n\nF Function\n\nF_ms = Fest(mnd_jit)\nplot(F_ms)\n\n\n\n\n\n\n\n\n\nF_ms.csr &lt;- envelope(mnd_jit, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_ms.csr)\n\n\n\n\n\n\n\n\n\n\n\nAfter researching into the reasons behind the conflicts in Myanmar, a few key actors have become apparent to me:\n\nThe Tatmadaw (Myanman Military), who started the coup in Febuary 2021,\nThe Three Brotherhood Alliance(TBA), consisting of the Arakan Army(AA), Myanmar National Democratic Alliance Army(MDNAA), and the Ta’ang National Liberation Army(TNLA) formed in June 2019,\nThe Karen National Union(KNU), and by extent its armed force the Karen National Liberation Army(KNLA), a group that represents the Karen minority in Myanmar, who have been in conflict with the Myanmar government since 1949.\n\nThe bulk of the fighting in the central regions of Myanmar can be attributed to clashes between the Three Brotherhood Alliance and the Tatmadaw, after the TBA voiced opposition to the Tatmadaw on March 29, 2021. Specifically in Rakhine, the AA used the first peace in years to gain control over most of Rakhine state, declaring in August that they controlled over two-thirds of the state.\nThe big spike in action in late 2023 is caused by Operation 1027, a massive offensive in northern Shan state on October 27, 2023.\nDown south in Kayin, tensions between the KNU and the Tatmadaw increased following the coup, leading to hostilities and conflict."
  },
  {
    "objectID": "THE/THE1/takehome1.html#historical-context",
    "href": "THE/THE1/takehome1.html#historical-context",
    "title": "Takehome 1",
    "section": "",
    "text": "Since gaining independence from British rule in 1948, Myanmar was under military rule, which ended officially in 2011. However, in February 2021, the military seized power again in a coup, leading to a resumption of armed conflict and violence in the country.\nThis geospatial analysis of armed conflict in Myanmar aims to:\n1. Identify patterns and hotspots of conflict,\n2. Examine how they factors interact with each other,\n3. Track changes in conflict patterns over time."
  },
  {
    "objectID": "THE/THE1/takehome1.html#installlaunch-r-packages",
    "href": "THE/THE1/takehome1.html#installlaunch-r-packages",
    "title": "Takehome 1",
    "section": "",
    "text": "This exercise uses the R packages sf, raster, spatstat, tmap, tidyverse, maptools, sp, sparr, st, and ggplot2.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/pwnyt/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\n\nWarning: cannot remove prior installation of package 'maptools'\n\n\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\pwnyt\\AppData\\Local\\R\\win-library\\4.4\\00LOCK\\maptools\\libs\\x64\\maptools.dll\nto\nC:\\Users\\pwnyt\\AppData\\Local\\R\\win-library\\4.4\\maptools\\libs\\x64\\maptools.dll:\nPermission denied\n\n\nWarning: restored 'maptools'\n\n\n\nThe downloaded binary packages are in\n    C:\\Users\\pwnyt\\AppData\\Local\\Temp\\Rtmp0gNdUY\\downloaded_packages\n\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools, sp, sparr, st, ggplot2)"
  },
  {
    "objectID": "THE/THE1/takehome1.html#import-data",
    "href": "THE/THE1/takehome1.html#import-data",
    "title": "Takehome 1",
    "section": "",
    "text": "The following datasets will be used:\n\nArmed Conflict Location and Event Data (ACLED)\nMyanmar Information Management Unit (MIMU)\n\nread_csv from readr and st_as_sf from sf from saves the data into a sf object, and st_transform does projection transformation to the proper correct coordinate system:\n\nacled_sf &lt;- read_csv(\"data/2021-01-01-2024-06-30-Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nMutate by quarters:\n\nacled_sf &lt;- acled_sf %&gt;%\n  mutate(quarter = quarter(event_date))\n\nCheck the sf object:\n\nsummary(acled_sf)\n\n event_id_cnty        event_date              year      time_precision \n Length:42608       Min.   :2021-01-01   Min.   :2021   Min.   :1.000  \n Class :character   1st Qu.:2022-01-10   1st Qu.:2022   1st Qu.:1.000  \n Mode  :character   Median :2022-10-13   Median :2022   Median :1.000  \n                    Mean   :2022-10-29   Mean   :2022   Mean   :1.053  \n                    3rd Qu.:2023-08-29   3rd Qu.:2023   3rd Qu.:1.000  \n                    Max.   :2024-06-30   Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:42608       Min.   :1.000   Length:42608       Length:42608      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :1.000   Mode  :character   Mode  :character  \n                    Mean   :1.947                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:42608       Min.   :104  \n 1st Qu.:1.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :3.000   Median :17.00   Mode  :character   Median :104  \n Mean   :3.597   Mean   :18.86                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:17.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location         geo_precision      source         \n Length:42608       Length:42608       Min.   :1.000   Length:42608      \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.495                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :3.000                     \n source_scale          notes             fatalities         tags          \n Length:42608       Length:42608       Min.   :  0.00   Length:42608      \n Class :character   Class :character   1st Qu.:  0.00   Class :character  \n Mode  :character   Mode  :character   Median :  0.00   Mode  :character  \n                                       Mean   :  1.27                     \n                                       3rd Qu.:  1.00                     \n                                       Max.   :201.00                     \n   timestamp                  geometry        quarter     \n Min.   :1.611e+09   POINT        :42608   Min.   :1.000  \n 1st Qu.:1.702e+09   epsg:32647   :    0   1st Qu.:2.000  \n Median :1.714e+09   +proj=utm ...:    0   Median :2.000  \n Mean   :1.702e+09                         Mean   :2.475  \n 3rd Qu.:1.719e+09                         3rd Qu.:4.000  \n Max.   :1.726e+09                         Max.   :4.000  \n\n\nPlotting out all political violence events by year:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nplots &lt;- list()\n\nfor (year_val in 2021:2024) {\n  p &lt;- acled_sf %&gt;%\n    filter(year == year_val | event_type == \"Political violence\") %&gt;%\n    tm_shape() +\n    tm_dots() +\n    tm_layout(\n      title = paste0(\"Year: \", year_val),\n      title.position = c(\"left\", \"bottom\"),  \n      title.size = 0.8\n    )\n  \n  # Add each plot to the list\n  plots[[paste0(\"plot_\", year_val)]] &lt;- p\n}\n\n# Arrange the plots in a 2x2 grid\ntmap_arrange(plots$plot_2021, plots$plot_2022, plots$plot_2023, plots$plot_2024, nrow = 2, ncol = 2)\n\n\n\n\n\n\n\n\nglimpse() from dplyr reveals the datatype of every field:\n\nglimpse(acled_sf)\n\nRows: 42,608\nColumns: 31\n$ event_id_cnty      &lt;chr&gt; \"MMR64313\", \"MMR64320\", \"MMR64321\", \"MMR64322\", \"MM…\n$ event_date         &lt;date&gt; 2024-06-30, 2024-06-30, 2024-06-30, 2024-06-30, 20…\n$ year               &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Battles\", \"Battles\", \"Battles\", \"Strategic develop…\n$ sub_event_type     &lt;chr&gt; \"Armed clash\", \"Armed clash\", \"Armed clash\", \"Chang…\n$ actor1             &lt;chr&gt; \"People's Defense Force - Mandalay\", \"People's Defe…\n$ assoc_actor_1      &lt;chr&gt; \"MDA - AGF: Madaya - The Authentic Genes Force; SST…\n$ inter1             &lt;dbl&gt; 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 7, 1, …\n$ actor2             &lt;chr&gt; \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ assoc_actor_2      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Uniden…\n$ inter2             &lt;dbl&gt; 1, 1, 1, 0, 1, 0, 2, 1, 2, 2, 2, 3, 1, 1, 7, 0, 0, …\n$ interaction        &lt;dbl&gt; 13, 13, 13, 10, 13, 10, 12, 12, 12, 12, 12, 13, 13,…\n$ civilian_targeting &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mandalay\", \"Mandalay\", \"Mandalay\", \"Sagaing\", \"Sag…\n$ admin2             &lt;chr&gt; \"Mandalay\", \"Pyinoolwin\", \"Pyinoolwin\", \"Shwebo\", \"…\n$ admin3             &lt;chr&gt; \"Patheingyi\", \"Singu\", \"Thabeikkyin\", \"Khin-U\", \"My…\n$ location           &lt;chr&gt; \"Aung Tha Pyay\", \"Pin Lel Gyi\", \"Thabeikkyin\", \"Khi…\n$ geo_precision      &lt;dbl&gt; 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma; Irrawaddy\", \"Irrawaddy\"…\n$ source_scale       &lt;chr&gt; \"National\", \"National\", \"National\", \"Subnational-Na…\n$ notes              &lt;chr&gt; \"On 30 June 2024, near Aung Tha Pyay village (Pathe…\n$ fatalities         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ tags               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1720552468, 1720552468, 1720552468, 1720552468, 172…\n$ geometry           &lt;POINT [m]&gt; POINT (214961 2452068), POINT (198303.2 24994…\n$ quarter            &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n\n\nImport the myanmar border shapefile as a polygon feature dataframe using st_read from sf:\n\nmyanmar_sf &lt;- st_read(dsn = \"data/mmr_polbnda_adm0_250k_mimu_1\", \n                layer = \"mmr_polbnda_adm0_250k_mimu_1\") %&gt;%\n  st_as_sf(coords =c(\n    \"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32647)\n\nReading layer `mmr_polbnda_adm0_250k_mimu_1' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\THE\\THE1\\data\\mmr_polbnda_adm0_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nCompare and ensure that our data follows Myanmar’s CRS system WGS84 for consistency:\n\n# Check CRS of acled_sf\nprint(\"CRS of ACLED data:\")\n\n[1] \"CRS of ACLED data:\"\n\nprint(st_crs(acled_sf))\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nCreate a simple plot of the Myanmar border:\n\ntm_shape(myanmar_sf) +\n  tm_borders(col = \"green\", lwd = 2) +\n  tm_fill(col = \"lightblue\", alpha = 0.5) +\n  tm_layout(title = \"Myanmar Border\",\n            title.size = 1.2,\n            title.position = c(\"center\", \"top\"))\n\n\n\n\n\n\n\n\nFilter ACLED data for the specified date range and event types\n\nevent_types &lt;- c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\")\nacled_filtered &lt;- acled_sf %&gt;%\n  filter(event_type %in% event_types)\nsummary(acled_filtered)\n\n event_id_cnty        event_date              year      time_precision \n Length:42608       Min.   :2021-01-01   Min.   :2021   Min.   :1.000  \n Class :character   1st Qu.:2022-01-10   1st Qu.:2022   1st Qu.:1.000  \n Mode  :character   Median :2022-10-13   Median :2022   Median :1.000  \n                    Mean   :2022-10-29   Mean   :2022   Mean   :1.053  \n                    3rd Qu.:2023-08-29   3rd Qu.:2023   3rd Qu.:1.000  \n                    Max.   :2024-06-30   Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:42608       Min.   :1.000   Length:42608       Length:42608      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :1.000   Mode  :character   Mode  :character  \n                    Mean   :1.947                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:42608       Min.   :104  \n 1st Qu.:1.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :3.000   Median :17.00   Mode  :character   Median :104  \n Mean   :3.597   Mean   :18.86                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:17.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location         geo_precision      source         \n Length:42608       Length:42608       Min.   :1.000   Length:42608      \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.495                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :3.000                     \n source_scale          notes             fatalities         tags          \n Length:42608       Length:42608       Min.   :  0.00   Length:42608      \n Class :character   Class :character   1st Qu.:  0.00   Class :character  \n Mode  :character   Mode  :character   Median :  0.00   Mode  :character  \n                                       Mean   :  1.27                     \n                                       3rd Qu.:  1.00                     \n                                       Max.   :201.00                     \n   timestamp                  geometry        quarter     \n Min.   :1.611e+09   POINT        :42608   Min.   :1.000  \n 1st Qu.:1.702e+09   epsg:32647   :    0   1st Qu.:2.000  \n Median :1.714e+09   +proj=utm ...:    0   Median :2.000  \n Mean   :1.702e+09                         Mean   :2.475  \n 3rd Qu.:1.719e+09                         3rd Qu.:4.000  \n Max.   :1.726e+09                         Max.   :4.000"
  },
  {
    "objectID": "THE/THE1/takehome1.html#kde",
    "href": "THE/THE1/takehome1.html#kde",
    "title": "Takehome 1",
    "section": "",
    "text": "Creating window for ppp objects:\n\nmyanmar_owin &lt;- as.owin(myanmar_sf)\nplot(myanmar_owin)\n\n\n\n\n\n\n\n\n\nsummary(myanmar_owin)\n\nWindow: polygonal boundary\n563 separate polygons (3 holes)\n                   vertices         area relative.area\npolygon 1             37581  6.60254e+11      9.86e-01\npolygon 2                26  2.85778e+06      4.27e-06\npolygon 3                43  7.32477e+06      1.09e-05\npolygon 4               103  1.86991e+07      2.79e-05\npolygon 5                37  9.32316e+06      1.39e-05\npolygon 6               371  2.43869e+08      3.64e-04\npolygon 7               297  2.84905e+08      4.25e-04\npolygon 8                33  1.68222e+07      2.51e-05\npolygon 9                33  4.47665e+05      6.68e-07\npolygon 10               19  1.34593e+05      2.01e-07\npolygon 11               39  1.36327e+06      2.04e-06\npolygon 12              137  1.55547e+08      2.32e-04\npolygon 13               36  8.76479e+06      1.31e-05\npolygon 14               79  3.08116e+07      4.60e-05\npolygon 15              388  2.25271e+08      3.36e-04\npolygon 16              316  7.78512e+07      1.16e-04\npolygon 17               13  1.09564e+05      1.64e-07\npolygon 18               18  3.49727e+05      5.22e-07\npolygon 19               31  1.23017e+06      1.84e-06\npolygon 20               16  6.55537e+05      9.79e-07\npolygon 21               24  8.49487e+05      1.27e-06\npolygon 22               30  2.54436e+06      3.80e-06\npolygon 23              336  4.15806e+07      6.21e-05\npolygon 24              330  1.69190e+08      2.53e-04\npolygon 25               47  1.08035e+07      1.61e-05\npolygon 26               39  4.94369e+06      7.38e-06\npolygon 27               23  2.72438e+06      4.07e-06\npolygon 28               33  5.70263e+06      8.52e-06\npolygon 29               90  4.20329e+07      6.28e-05\npolygon 30               28  1.35341e+06      2.02e-06\npolygon 31              225  1.08816e+08      1.62e-04\npolygon 32               33  9.16670e+06      1.37e-05\npolygon 33              192  7.02655e+07      1.05e-04\npolygon 34               49  1.49245e+07      2.23e-05\npolygon 35               98  1.79076e+07      2.67e-05\npolygon 36                6  6.37552e+05      9.52e-07\npolygon 37               49  1.01233e+07      1.51e-05\npolygon 38              141  3.43053e+07      5.12e-05\npolygon 39              195  3.24345e+07      4.84e-05\npolygon 40               51  3.38313e+06      5.05e-06\npolygon 41               34  2.01400e+06      3.01e-06\npolygon 42               13  2.50435e+05      3.74e-07\npolygon 43                9  9.04824e+04      1.35e-07\npolygon 44               34  4.61794e+06      6.90e-06\npolygon 45               17  4.58200e+05      6.84e-07\npolygon 46               15  2.74776e+05      4.10e-07\npolygon 47               21  5.34978e+05      7.99e-07\npolygon 48               19  4.55347e+05      6.80e-07\npolygon 49               71  3.42557e+06      5.11e-06\npolygon 50               24  1.32420e+06      1.98e-06\npolygon 51               15  3.26247e+05      4.87e-07\npolygon 52               39  8.65790e+05      1.29e-06\npolygon 53               43  1.41627e+06      2.11e-06\npolygon 54               24  7.52068e+05      1.12e-06\npolygon 55               96  1.32101e+07      1.97e-05\npolygon 56               38  1.18003e+06      1.76e-06\npolygon 57              429  5.99087e+08      8.95e-04\npolygon 58               13  1.74105e+05      2.60e-07\npolygon 59               19  2.52336e+05      3.77e-07\npolygon 60               16  3.11495e+05      4.65e-07\npolygon 61               11  9.11047e+04      1.36e-07\npolygon 62               12  2.13470e+05      3.19e-07\npolygon 63               17  5.82663e+05      8.70e-07\npolygon 64               56  2.60440e+07      3.89e-05\npolygon 65              107  4.91389e+06      7.34e-06\npolygon 66               51  2.79076e+06      4.17e-06\npolygon 67               89  1.61156e+07      2.41e-05\npolygon 68               28  1.30499e+06      1.95e-06\npolygon 69               11  1.27616e+05      1.91e-07\npolygon 70               34  2.54199e+06      3.80e-06\npolygon 71               27  1.72476e+06      2.58e-06\npolygon 72               37  2.01882e+06      3.01e-06\npolygon 73               23  1.65571e+06      2.47e-06\npolygon 74               33  3.05816e+06      4.57e-06\npolygon 75               14  3.23153e+05      4.83e-07\npolygon 76               91  1.51209e+07      2.26e-05\npolygon 77               12  2.42901e+05      3.63e-07\npolygon 78               11  1.37889e+05      2.06e-07\npolygon 79               58  2.29751e+07      3.43e-05\npolygon 80               48  5.10265e+06      7.62e-06\npolygon 81               22  1.30706e+06      1.95e-06\npolygon 82               15  3.49480e+05      5.22e-07\npolygon 83               17  1.57570e+06      2.35e-06\npolygon 84               34  3.68725e+06      5.51e-06\npolygon 85               34  5.21904e+06      7.79e-06\npolygon 86               24  5.42734e+06      8.10e-06\npolygon 87              422  4.66497e+08      6.97e-04\npolygon 88              142  2.98767e+07      4.46e-05\npolygon 89              132  2.18707e+07      3.27e-05\npolygon 90               19  5.88230e+05      8.78e-07\npolygon 91               22  1.77611e+06      2.65e-06\npolygon 92               40  4.09952e+06      6.12e-06\npolygon 93               28  1.47685e+06      2.21e-06\npolygon 94               67  9.99685e+06      1.49e-05\npolygon 95               25  4.82266e+05      7.20e-07\npolygon 96               16  4.14093e+05      6.18e-07\npolygon 97               26  3.03928e+06      4.54e-06\npolygon 98               14  1.53563e+05      2.29e-07\npolygon 99               19  5.08538e+05      7.59e-07\npolygon 100              16  1.80565e+05      2.70e-07\npolygon 101              26  9.75091e+05      1.46e-06\npolygon 102              19  2.15295e+05      3.21e-07\npolygon 103              16  3.50061e+05      5.23e-07\npolygon 104 (hole)        3 -1.78834e+02     -2.67e-10\npolygon 105              14  2.11571e+05      3.16e-07\npolygon 106              11  1.59536e+05      2.38e-07\npolygon 107             111  7.35028e+07      1.10e-04\npolygon 108              54  9.35305e+06      1.40e-05\npolygon 109              19  6.34649e+05      9.48e-07\npolygon 110              79  1.47390e+07      2.20e-05\npolygon 111              10  3.74827e+04      5.60e-08\npolygon 112              13  1.37100e+05      2.05e-07\npolygon 113              31  4.47193e+06      6.68e-06\npolygon 114              19  1.23742e+06      1.85e-06\npolygon 115              20  1.79201e+06      2.68e-06\npolygon 116              16  2.19464e+05      3.28e-07\npolygon 117              11  7.94092e+04      1.19e-07\npolygon 118              14  1.45779e+05      2.18e-07\npolygon 119              31  6.24672e+05      9.33e-07\npolygon 120              11  2.29288e+04      3.42e-08\npolygon 121              18  2.10998e+05      3.15e-07\npolygon 122              26  2.52571e+06      3.77e-06\npolygon 123              16  5.77783e+05      8.63e-07\npolygon 124              26  8.87985e+05      1.33e-06\npolygon 125              13  1.10557e+05      1.65e-07\npolygon 126              21  9.55338e+05      1.43e-06\npolygon 127              32  2.18189e+06      3.26e-06\npolygon 128              18  7.64830e+05      1.14e-06\npolygon 129              34  1.71336e+06      2.56e-06\npolygon 130             115  9.29594e+05      1.39e-06\npolygon 131              68  2.06761e+05      3.09e-07\npolygon 132              40  4.87851e+06      7.28e-06\npolygon 133              10  7.43137e+04      1.11e-07\npolygon 134              17  5.95020e+05      8.88e-07\npolygon 135              21  4.02132e+05      6.00e-07\npolygon 136              21  1.09635e+06      1.64e-06\npolygon 137              14  1.15356e+05      1.72e-07\npolygon 138              20  3.13610e+05      4.68e-07\npolygon 139             275  3.92648e+08      5.86e-04\npolygon 140              16  2.19612e+05      3.28e-07\npolygon 141              13  2.64858e+05      3.95e-07\npolygon 142              23  1.25549e+06      1.87e-06\npolygon 143               9  1.79312e+05      2.68e-07\npolygon 144              15  2.93132e+05      4.38e-07\npolygon 145              15  5.29892e+05      7.91e-07\npolygon 146              23  4.95351e+05      7.40e-07\npolygon 147              14  4.41976e+05      6.60e-07\npolygon 148              19  3.32318e+05      4.96e-07\npolygon 149              16  4.15914e+05      6.21e-07\npolygon 150              22  5.10526e+05      7.62e-07\npolygon 151              48  1.87148e+07      2.79e-05\npolygon 152              18  1.62882e+06      2.43e-06\npolygon 153              71  2.43615e+07      3.64e-05\npolygon 154             116  5.16444e+07      7.71e-05\npolygon 155              19  1.54144e+06      2.30e-06\npolygon 156              11  2.01013e+05      3.00e-07\npolygon 157              20  2.31201e+06      3.45e-06\npolygon 158              15  5.94674e+05      8.88e-07\npolygon 159             218  1.56252e+08      2.33e-04\npolygon 160             162  8.80247e+07      1.31e-04\npolygon 161              16  3.69968e+05      5.52e-07\npolygon 162              14  1.61451e+05      2.41e-07\npolygon 163              18  5.54566e+05      8.28e-07\npolygon 164              19  5.07078e+05      7.57e-07\npolygon 165              57  6.86475e+06      1.03e-05\npolygon 166              15  6.56018e+05      9.80e-07\npolygon 167              21  6.65092e+05      9.93e-07\npolygon 168              15  5.97784e+05      8.93e-07\npolygon 169              37  2.56010e+06      3.82e-06\npolygon 170              13  1.66996e+05      2.49e-07\npolygon 171              20  8.18381e+05      1.22e-06\npolygon 172              21  2.89704e+06      4.33e-06\npolygon 173              15  4.08213e+05      6.10e-07\npolygon 174             104  4.71547e+07      7.04e-05\npolygon 175              28  3.80443e+06      5.68e-06\npolygon 176              67  3.17343e+07      4.74e-05\npolygon 177             730  9.20735e+08      1.37e-03\npolygon 178              16  2.01576e+05      3.01e-07\npolygon 179              12  1.41506e+05      2.11e-07\npolygon 180              15  4.92125e+05      7.35e-07\npolygon 181              18  1.58128e+06      2.36e-06\npolygon 182              25  1.94322e+06      2.90e-06\npolygon 183              12  2.51373e+05      3.75e-07\npolygon 184             412  4.47936e+08      6.69e-04\npolygon 185              22  7.57105e+05      1.13e-06\npolygon 186              16  6.97434e+05      1.04e-06\npolygon 187              39  4.45130e+06      6.65e-06\npolygon 188              13  8.83786e+05      1.32e-06\npolygon 189              10  2.06200e+05      3.08e-07\npolygon 190              76  3.60497e+07      5.38e-05\npolygon 191              13  4.56433e+05      6.82e-07\npolygon 192              28  2.30613e+06      3.44e-06\npolygon 193              27  2.50338e+06      3.74e-06\npolygon 194              14  4.69238e+05      7.01e-07\npolygon 195              10  1.69886e+05      2.54e-07\npolygon 196              16  5.42822e+05      8.11e-07\npolygon 197              10  1.17633e+05      1.76e-07\npolygon 198               8  7.08579e+04      1.06e-07\npolygon 199             144  7.85300e+07      1.17e-04\npolygon 200              37  1.93477e+06      2.89e-06\npolygon 201              25  5.59996e+05      8.36e-07\npolygon 202              44  2.86031e+06      4.27e-06\npolygon 203              26  1.26276e+06      1.89e-06\npolygon 204             149  1.37840e+08      2.06e-04\npolygon 205              18  4.84958e+05      7.24e-07\npolygon 206              73  2.93195e+07      4.38e-05\npolygon 207              45  6.87481e+06      1.03e-05\npolygon 208              64  1.80880e+07      2.70e-05\npolygon 209              12  8.76879e+05      1.31e-06\npolygon 210              26  2.78381e+06      4.16e-06\npolygon 211              35  8.72326e+06      1.30e-05\npolygon 212              53  1.06237e+07      1.59e-05\npolygon 213              26  5.40467e+06      8.07e-06\npolygon 214             148  1.05037e+08      1.57e-04\npolygon 215              21  8.32798e+05      1.24e-06\npolygon 216              21  2.23023e+06      3.33e-06\npolygon 217               8  6.30805e+05      9.42e-07\npolygon 218              78  3.67603e+07      5.49e-05\npolygon 219              18  1.64745e+06      2.46e-06\npolygon 220              58  1.31747e+07      1.97e-05\npolygon 221              94  1.16837e+07      1.74e-05\npolygon 222              53  3.17801e+06      4.75e-06\npolygon 223             137  8.46454e+06      1.26e-05\npolygon 224              23  4.36507e+05      6.52e-07\npolygon 225              27  9.72136e+05      1.45e-06\npolygon 226              55  1.98854e+06      2.97e-06\npolygon 227              48  1.02651e+07      1.53e-05\npolygon 228              15  3.16153e+05      4.72e-07\npolygon 229              22  8.93201e+05      1.33e-06\npolygon 230              18  2.91538e+05      4.35e-07\npolygon 231              59  3.70736e+06      5.54e-06\npolygon 232              11  1.55205e+05      2.32e-07\npolygon 233              14  1.87401e+05      2.80e-07\npolygon 234              11  6.54128e+04      9.77e-08\npolygon 235              11  8.64659e+04      1.29e-07\npolygon 236              12  2.25129e+05      3.36e-07\npolygon 237              30  2.72178e+06      4.06e-06\npolygon 238 (hole)        3 -2.26252e+00     -3.38e-12\npolygon 239             180  1.80314e+07      2.69e-05\npolygon 240              14  4.01942e+05      6.00e-07\npolygon 241             103  1.33467e+07      1.99e-05\npolygon 242              14  2.07708e+05      3.10e-07\npolygon 243              55  4.38623e+06      6.55e-06\npolygon 244              41  4.69733e+06      7.01e-06\npolygon 245              74  3.92633e+06      5.86e-06\npolygon 246              31  2.79477e+06      4.17e-06\npolygon 247              17  8.74607e+05      1.31e-06\npolygon 248              26  4.50962e+05      6.73e-07\npolygon 249              18  1.15065e+06      1.72e-06\npolygon 250             164  1.48037e+07      2.21e-05\npolygon 251              12  3.17290e+05      4.74e-07\npolygon 252              69  2.59551e+07      3.88e-05\npolygon 253              37  7.85963e+05      1.17e-06\npolygon 254              14  3.37873e+05      5.05e-07\npolygon 255              12  1.77980e+05      2.66e-07\npolygon 256              21  6.46195e+05      9.65e-07\npolygon 257              24  2.69998e+06      4.03e-06\npolygon 258              30  1.00675e+06      1.50e-06\npolygon 259              57  4.22747e+06      6.31e-06\npolygon 260              23  8.63543e+05      1.29e-06\npolygon 261              11  2.01925e+05      3.02e-07\npolygon 262              95  2.88232e+07      4.30e-05\npolygon 263             452  9.64208e+07      1.44e-04\npolygon 264              77  1.72297e+07      2.57e-05\npolygon 265              16  3.33522e+05      4.98e-07\npolygon 266              19  6.82895e+05      1.02e-06\npolygon 267              43  3.95062e+06      5.90e-06\npolygon 268              29  1.00709e+06      1.50e-06\npolygon 269              21  8.90014e+05      1.33e-06\npolygon 270              22  7.93453e+05      1.18e-06\npolygon 271              13  4.52813e+05      6.76e-07\npolygon 272              30  1.49817e+06      2.24e-06\npolygon 273              48  4.23996e+06      6.33e-06\npolygon 274              37  1.20290e+06      1.80e-06\npolygon 275              19  4.85805e+05      7.25e-07\npolygon 276              46  2.18001e+06      3.26e-06\npolygon 277               7  1.33723e+05      2.00e-07\npolygon 278              54  1.82059e+07      2.72e-05\npolygon 279              10  8.57866e+05      1.28e-06\npolygon 280              14  1.98445e+05      2.96e-07\npolygon 281              19  4.68357e+05      6.99e-07\npolygon 282              52  8.57765e+06      1.28e-05\npolygon 283              73  7.91998e+06      1.18e-05\npolygon 284              23  8.19561e+06      1.22e-05\npolygon 285              10  1.06594e+05      1.59e-07\npolygon 286             169  1.39462e+07      2.08e-05\npolygon 287              17  2.55915e+05      3.82e-07\npolygon 288              12  1.81516e+05      2.71e-07\npolygon 289              16  3.68509e+05      5.50e-07\npolygon 290              12  1.24954e+05      1.87e-07\npolygon 291            1012  4.61886e+08      6.90e-04\npolygon 292              15  5.42647e+05      8.10e-07\npolygon 293              12  5.53088e+05      8.26e-07\npolygon 294              24  1.06455e+06      1.59e-06\npolygon 295              14  3.17038e+05      4.73e-07\npolygon 296              17  1.25559e+06      1.87e-06\npolygon 297              16  1.92407e+06      2.87e-06\npolygon 298              80  1.86306e+07      2.78e-05\npolygon 299              11  6.83880e+04      1.02e-07\npolygon 300             166  4.21470e+07      6.29e-05\npolygon 301              22  1.36174e+06      2.03e-06\npolygon 302              31  6.07363e+05      9.07e-07\npolygon 303              10  1.27067e+05      1.90e-07\npolygon 304             164  5.02951e+07      7.51e-05\npolygon 305              17  1.20798e+06      1.80e-06\npolygon 306              59  2.41720e+06      3.61e-06\npolygon 307              12  2.52952e+05      3.78e-07\npolygon 308              14  2.44407e+05      3.65e-07\npolygon 309              43  4.89177e+06      7.30e-06\npolygon 310              40  3.86642e+06      5.77e-06\npolygon 311              23  4.59203e+05      6.86e-07\npolygon 312              14  1.79442e+05      2.68e-07\npolygon 313              13  1.61191e+05      2.41e-07\npolygon 314              43  1.33365e+06      1.99e-06\npolygon 315              75  1.20247e+07      1.80e-05\npolygon 316              17  9.96466e+04      1.49e-07\npolygon 317              22  1.60660e+06      2.40e-06\npolygon 318             730  1.16983e+08      1.75e-04\npolygon 319             129  7.87539e+06      1.18e-05\npolygon 320              22  4.66256e+05      6.96e-07\npolygon 321              19  5.44519e+05      8.13e-07\npolygon 322              16  3.73911e+05      5.58e-07\npolygon 323              88  3.47678e+07      5.19e-05\npolygon 324              46  3.23711e+06      4.83e-06\npolygon 325              47  9.17482e+05      1.37e-06\npolygon 326              14  4.44869e+05      6.64e-07\npolygon 327              43  1.29527e+06      1.93e-06\npolygon 328              65  3.20974e+06      4.79e-06\npolygon 329             306  1.83695e+07      2.74e-05\npolygon 330              17  4.25486e+05      6.35e-07\npolygon 331              29  1.08467e+06      1.62e-06\npolygon 332              26  1.16602e+06      1.74e-06\npolygon 333             135  4.90655e+06      7.33e-06\npolygon 334              23  1.87723e+06      2.80e-06\npolygon 335              21  7.02338e+05      1.05e-06\npolygon 336              30  4.99970e+06      7.47e-06\npolygon 337              21  7.71571e+05      1.15e-06\npolygon 338              13  1.47832e+05      2.21e-07\npolygon 339              26  3.17307e+06      4.74e-06\npolygon 340              17  1.03642e+06      1.55e-06\npolygon 341             100  8.74537e+06      1.31e-05\npolygon 342              11  1.13950e+05      1.70e-07\npolygon 343              26  8.27840e+05      1.24e-06\npolygon 344              17  4.10882e+05      6.14e-07\npolygon 345              13  1.49250e+05      2.23e-07\npolygon 346              35  1.76408e+06      2.63e-06\npolygon 347              15  2.03390e+05      3.04e-07\npolygon 348              18  1.70982e+05      2.55e-07\npolygon 349              32  7.98599e+06      1.19e-05\npolygon 350              27  3.20839e+05      4.79e-07\npolygon 351             539  1.17139e+08      1.75e-04\npolygon 352              51  1.57614e+06      2.35e-06\npolygon 353              19  3.60772e+05      5.39e-07\npolygon 354              58  2.10060e+06      3.14e-06\npolygon 355              13  1.70224e+05      2.54e-07\npolygon 356              11  6.11736e+05      9.13e-07\npolygon 357              35  5.26152e+06      7.86e-06\npolygon 358              16  1.99371e+05      2.98e-07\npolygon 359              14  4.48979e+05      6.70e-07\npolygon 360              25  1.92913e+06      2.88e-06\npolygon 361              16  4.26157e+05      6.36e-07\npolygon 362              46  1.88229e+06      2.81e-06\npolygon 363              17  2.29456e+05      3.43e-07\npolygon 364              36  4.01418e+06      5.99e-06\npolygon 365              57  1.77153e+07      2.65e-05\npolygon 366              20  5.72298e+05      8.55e-07\npolygon 367              14  2.46782e+05      3.68e-07\npolygon 368              29  1.01300e+06      1.51e-06\npolygon 369              90  8.54955e+06      1.28e-05\npolygon 370              21  3.99098e+05      5.96e-07\npolygon 371              12  2.81650e+05      4.21e-07\npolygon 372              52  3.19337e+06      4.77e-06\npolygon 373              13  3.40300e+05      5.08e-07\npolygon 374              29  9.08533e+05      1.36e-06\npolygon 375              20  3.07393e+05      4.59e-07\npolygon 376              19  1.15906e+06      1.73e-06\npolygon 377              17  1.16182e+06      1.73e-06\npolygon 378              21  2.60877e+06      3.90e-06\npolygon 379              15  1.09001e+05      1.63e-07\npolygon 380              37  1.31921e+06      1.97e-06\npolygon 381              53  1.46854e+06      2.19e-06\npolygon 382              59  8.92822e+06      1.33e-05\npolygon 383               9  7.44981e+04      1.11e-07\npolygon 384              14  2.41462e+05      3.61e-07\npolygon 385              96  7.25940e+06      1.08e-05\npolygon 386              11  1.06055e+05      1.58e-07\npolygon 387              49  1.87834e+06      2.80e-06\npolygon 388              23  6.08310e+05      9.08e-07\npolygon 389              50  6.76488e+05      1.01e-06\npolygon 390              22  4.83089e+05      7.21e-07\npolygon 391              17  1.17278e+05      1.75e-07\npolygon 392              13  8.98786e+05      1.34e-06\npolygon 393              43  1.01757e+06      1.52e-06\npolygon 394              52  1.68377e+06      2.51e-06\npolygon 395             348  2.50314e+08      3.74e-04\npolygon 396              43  1.29120e+06      1.93e-06\npolygon 397              71  2.02836e+06      3.03e-06\npolygon 398 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 399             141  4.53240e+06      6.77e-06\npolygon 400              52  3.62008e+06      5.41e-06\npolygon 401              20  7.69539e+05      1.15e-06\npolygon 402              88  8.88904e+06      1.33e-05\npolygon 403              12  1.44668e+05      2.16e-07\npolygon 404              46  2.28026e+06      3.40e-06\npolygon 405              39  4.79165e+06      7.15e-06\npolygon 406              53  2.86736e+06      4.28e-06\npolygon 407              38  3.22508e+06      4.82e-06\npolygon 408              18  4.44863e+05      6.64e-07\npolygon 409              45  1.45134e+06      2.17e-06\npolygon 410              86  2.56400e+07      3.83e-05\npolygon 411             158  1.74510e+07      2.61e-05\npolygon 412              14  2.50383e+05      3.74e-07\npolygon 413             120  7.17019e+06      1.07e-05\npolygon 414             146  2.28448e+07      3.41e-05\npolygon 415             143  2.34472e+07      3.50e-05\npolygon 416              20  3.47415e+05      5.19e-07\npolygon 417              84  3.86387e+06      5.77e-06\npolygon 418              68  1.10850e+07      1.66e-05\npolygon 419             863  7.47702e+07      1.12e-04\npolygon 420              53  7.54742e+06      1.13e-05\npolygon 421              64  2.11016e+06      3.15e-06\npolygon 422             103  1.47525e+07      2.20e-05\npolygon 423              26  3.40345e+06      5.08e-06\npolygon 424             103  8.40445e+06      1.25e-05\npolygon 425              23  4.92041e+05      7.35e-07\npolygon 426              27  5.53625e+05      8.27e-07\npolygon 427              60  3.56102e+06      5.32e-06\npolygon 428             151  1.51314e+07      2.26e-05\npolygon 429             708  4.18129e+08      6.24e-04\npolygon 430             120  1.32857e+07      1.98e-05\npolygon 431             856  2.53898e+08      3.79e-04\npolygon 432              13  2.47298e+05      3.69e-07\npolygon 433              16  7.35754e+05      1.10e-06\npolygon 434              21  5.31633e+05      7.94e-07\npolygon 435              72  1.03185e+07      1.54e-05\npolygon 436              38  1.34734e+06      2.01e-06\npolygon 437               8  4.09489e+05      6.11e-07\npolygon 438              17  2.46995e+05      3.69e-07\npolygon 439              14  1.42285e+05      2.12e-07\npolygon 440               9  1.56346e+05      2.33e-07\npolygon 441              42  5.49581e+05      8.21e-07\npolygon 442              59  1.15813e+06      1.73e-06\npolygon 443              12  1.16845e+05      1.74e-07\npolygon 444              11  6.00122e+04      8.96e-08\npolygon 445              14  1.63465e+05      2.44e-07\npolygon 446               8  4.73674e+04      7.07e-08\npolygon 447              23  6.69330e+05      9.99e-07\npolygon 448             144  6.48346e+06      9.68e-06\npolygon 449              74  4.79923e+06      7.17e-06\npolygon 450             116  1.02706e+07      1.53e-05\npolygon 451              16  2.74005e+05      4.09e-07\npolygon 452              97  4.72599e+06      7.06e-06\npolygon 453              18  6.15583e+05      9.19e-07\npolygon 454             146  1.38979e+07      2.08e-05\npolygon 455              32  1.94516e+06      2.90e-06\npolygon 456              26  9.81356e+05      1.47e-06\npolygon 457              82  4.39797e+06      6.57e-06\npolygon 458              33  9.36113e+05      1.40e-06\npolygon 459              47  1.51844e+06      2.27e-06\npolygon 460             196  2.32689e+07      3.47e-05\npolygon 461              53  1.30069e+06      1.94e-06\npolygon 462              70  1.00802e+07      1.51e-05\npolygon 463              10  5.33870e+05      7.97e-07\npolygon 464             211  2.73026e+07      4.08e-05\npolygon 465              41  1.44141e+06      2.15e-06\npolygon 466               9  5.20220e+05      7.77e-07\npolygon 467             316  6.66808e+07      9.96e-05\npolygon 468              17  7.48505e+05      1.12e-06\npolygon 469              15  1.49799e+05      2.24e-07\npolygon 470              24  4.99500e+05      7.46e-07\npolygon 471              12  2.24463e+05      3.35e-07\npolygon 472             100  1.06028e+07      1.58e-05\npolygon 473              11  1.24267e+05      1.86e-07\npolygon 474             143  1.89581e+07      2.83e-05\npolygon 475              60  7.07802e+06      1.06e-05\npolygon 476             124  1.23476e+07      1.84e-05\npolygon 477              34  5.67625e+06      8.48e-06\npolygon 478             797  1.86955e+08      2.79e-04\npolygon 479              15  7.15891e+05      1.07e-06\npolygon 480              20  1.61624e+06      2.41e-06\npolygon 481              13  1.73955e+05      2.60e-07\npolygon 482              60  2.42590e+06      3.62e-06\npolygon 483              20  3.86365e+05      5.77e-07\npolygon 484             213  3.69421e+07      5.52e-05\npolygon 485              15  4.55574e+05      6.80e-07\npolygon 486              35  1.56058e+06      2.33e-06\npolygon 487              32  1.42419e+06      2.13e-06\npolygon 488              68  2.30711e+06      3.44e-06\npolygon 489             240  5.93935e+07      8.87e-05\npolygon 490             145  1.58875e+07      2.37e-05\npolygon 491              39  3.67239e+06      5.48e-06\npolygon 492              54  3.84847e+06      5.75e-06\npolygon 493              32  1.14073e+06      1.70e-06\npolygon 494              18  3.58549e+05      5.35e-07\npolygon 495              25  8.06470e+05      1.20e-06\npolygon 496              15  2.67818e+05      4.00e-07\npolygon 497              26  1.43681e+06      2.15e-06\npolygon 498              18  3.10061e+05      4.63e-07\npolygon 499              18  4.71644e+05      7.04e-07\npolygon 500              16  5.04146e+05      7.53e-07\npolygon 501              72  7.33720e+06      1.10e-05\npolygon 502              27  1.37772e+06      2.06e-06\npolygon 503              15  3.17217e+05      4.74e-07\npolygon 504              37  1.17498e+06      1.75e-06\npolygon 505              21  7.05388e+05      1.05e-06\npolygon 506             216  2.05399e+07      3.07e-05\npolygon 507              16  2.40093e+05      3.59e-07\npolygon 508              29  1.71282e+06      2.56e-06\npolygon 509              30  1.28695e+06      1.92e-06\npolygon 510              36  2.29670e+06      3.43e-06\npolygon 511             129  1.97698e+07      2.95e-05\npolygon 512              65  2.65969e+06      3.97e-06\npolygon 513             283  3.30575e+07      4.94e-05\npolygon 514              28  7.06271e+05      1.05e-06\npolygon 515              28  5.50158e+05      8.21e-07\npolygon 516              49  2.25015e+06      3.36e-06\npolygon 517              26  1.24280e+06      1.86e-06\npolygon 518              28  9.02794e+05      1.35e-06\npolygon 519              18  4.84064e+05      7.23e-07\npolygon 520              47  2.33442e+06      3.49e-06\npolygon 521              17  2.23835e+05      3.34e-07\npolygon 522              34  7.32504e+05      1.09e-06\npolygon 523              41  7.15538e+05      1.07e-06\npolygon 524              21  5.81687e+05      8.69e-07\npolygon 525              63  3.83819e+06      5.73e-06\npolygon 526              27  1.33192e+06      1.99e-06\npolygon 527              46  2.95028e+06      4.41e-06\npolygon 528              10  1.34210e+05      2.00e-07\npolygon 529              16  2.38274e+05      3.56e-07\npolygon 530              18  4.18536e+05      6.25e-07\npolygon 531              46  1.26584e+06      1.89e-06\npolygon 532              14  2.14679e+05      3.21e-07\npolygon 533              76  3.63371e+06      5.43e-06\npolygon 534             339  4.44685e+07      6.64e-05\npolygon 535             109  6.29786e+06      9.40e-06\npolygon 536              14  2.89570e+05      4.32e-07\npolygon 537              37  9.07704e+05      1.36e-06\npolygon 538              68  3.86104e+06      5.77e-06\npolygon 539             183  1.45458e+07      2.17e-05\npolygon 540              44  1.64355e+06      2.45e-06\npolygon 541              26  1.21667e+06      1.82e-06\npolygon 542              13  1.95710e+05      2.92e-07\npolygon 543              38  1.44402e+06      2.16e-06\npolygon 544              14  3.29394e+05      4.92e-07\npolygon 545              14  1.79828e+05      2.69e-07\npolygon 546              44  2.11118e+06      3.15e-06\npolygon 547             643  1.79215e+08      2.68e-04\npolygon 548              24  1.10979e+06      1.66e-06\npolygon 549              30  1.57106e+06      2.35e-06\npolygon 550              46  3.61716e+06      5.40e-06\npolygon 551              93  7.56340e+05      1.13e-06\npolygon 552              57  3.07732e+06      4.59e-06\npolygon 553              18  2.16224e+05      3.23e-07\npolygon 554              17  5.12388e+05      7.65e-07\npolygon 555               9  7.44780e+04      1.11e-07\npolygon 556              57  8.09122e+06      1.21e-05\npolygon 557              16  4.01323e+05      5.99e-07\npolygon 558             118  2.90304e+07      4.33e-05\npolygon 559              22  4.44693e+05      6.64e-07\npolygon 560              43  2.28763e+06      3.42e-06\npolygon 561              27  1.15444e+06      1.72e-06\npolygon 562              25  1.21695e+06      1.82e-06\npolygon 563              53  4.49228e+06      6.71e-06\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\nCreate the quarter column:\n\nacled_filtered$Quarter &lt;- paste0(year(acled_filtered$event_date), \"_Q\", quarter(acled_filtered$event_date))\n\nacled_filtered$QuarterNumeric &lt;- (year(acled_filtered$event_date) - 2021) * 4 + quarter(acled_filtered$event_date)\n\nacled_quarter &lt;- st_sf(\n  QuarterNumeric = acled_filtered$QuarterNumeric,\n  geometry = st_geometry(acled_filtered), \n  admin1 = acled_filtered$admin1\n)\n\nquarters_list &lt;- list()\n\nunique_quarters &lt;- unique(acled_filtered$QuarterNumeric)\n\nfor (q in unique_quarters) {\n  acled_q &lt;- acled_filtered[acled_filtered$QuarterNumeric == q, ]\n  \n  acled_q_sf &lt;- st_sf(\n    QuarterNumeric = acled_q$QuarterNumeric,\n    geometry = st_geometry(acled_q)\n  )\n  t\n  quarters_list[[paste0(\"Quarter_\", q)]] &lt;- acled_q_sf\n}\n\n\nppp_list &lt;- list()\n\nfor (i in names(quarters_list)) {\n  q_sf &lt;- quarters_list[[i]]\n  \n  q_ppp &lt;- as.ppp(st_coordinates(q_sf), st_bbox(q_sf))\n  \n  ppp_list[[i]] &lt;- q_ppp\n}\n\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\nWarning: data contain duplicated points\n\n\n\n\nWarning in as.ppp.sf(acled_quarter): only first attribute column is used for\nmarks\n\n\nUse jittering to avoid duplicated datapoints on the same location:\n\njittered_ppp_list &lt;- list()\n\nfor (i in names(ppp_list)) {\n  jittered_ppp &lt;- rjitter(ppp_list[[i]], , retry=TRUE, nsim=1, drop=TRUE)\n  \n  jittered_ppp_list[[i]] &lt;- jittered_ppp\n}\n\ncheck duplicates\n\nany(duplicated(jittered_ppp_list[[7]]))\n\n[1] FALSE\n\n\nmerge with owin object\n\narmedconflict_ppp_list &lt;- list()\n\nfor (i in names(jittered_ppp_list)){\n  armedconflict_ppp &lt;- jittered_ppp_list[[i]][myanmar_owin]\n  \n  armedconflict_ppp_list[[i]] &lt;- armedconflict_ppp\n}\n\n\n\nMarked planar point pattern:  42518 points\nAverage intensity 6.348685e-08 points per square unit\n\nCoordinates are given to 16 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   7.806  11.000  14.000 \n\nWindow: polygonal boundary\n563 separate polygons (3 holes)\n                   vertices         area relative.area\npolygon 1             37581  6.60254e+11      9.86e-01\npolygon 2                26  2.85778e+06      4.27e-06\npolygon 3                43  7.32477e+06      1.09e-05\npolygon 4               103  1.86991e+07      2.79e-05\npolygon 5                37  9.32316e+06      1.39e-05\npolygon 6               371  2.43869e+08      3.64e-04\npolygon 7               297  2.84905e+08      4.25e-04\npolygon 8                33  1.68222e+07      2.51e-05\npolygon 9                33  4.47665e+05      6.68e-07\npolygon 10               19  1.34593e+05      2.01e-07\npolygon 11               39  1.36327e+06      2.04e-06\npolygon 12              137  1.55547e+08      2.32e-04\npolygon 13               36  8.76479e+06      1.31e-05\npolygon 14               79  3.08116e+07      4.60e-05\npolygon 15              388  2.25271e+08      3.36e-04\npolygon 16              316  7.78512e+07      1.16e-04\npolygon 17               13  1.09564e+05      1.64e-07\npolygon 18               18  3.49727e+05      5.22e-07\npolygon 19               31  1.23017e+06      1.84e-06\npolygon 20               16  6.55537e+05      9.79e-07\npolygon 21               24  8.49487e+05      1.27e-06\npolygon 22               30  2.54436e+06      3.80e-06\npolygon 23              336  4.15806e+07      6.21e-05\npolygon 24              330  1.69190e+08      2.53e-04\npolygon 25               47  1.08035e+07      1.61e-05\npolygon 26               39  4.94369e+06      7.38e-06\npolygon 27               23  2.72438e+06      4.07e-06\npolygon 28               33  5.70263e+06      8.52e-06\npolygon 29               90  4.20329e+07      6.28e-05\npolygon 30               28  1.35341e+06      2.02e-06\npolygon 31              225  1.08816e+08      1.62e-04\npolygon 32               33  9.16670e+06      1.37e-05\npolygon 33              192  7.02655e+07      1.05e-04\npolygon 34               49  1.49245e+07      2.23e-05\npolygon 35               98  1.79076e+07      2.67e-05\npolygon 36                6  6.37552e+05      9.52e-07\npolygon 37               49  1.01233e+07      1.51e-05\npolygon 38              141  3.43053e+07      5.12e-05\npolygon 39              195  3.24345e+07      4.84e-05\npolygon 40               51  3.38313e+06      5.05e-06\npolygon 41               34  2.01400e+06      3.01e-06\npolygon 42               13  2.50435e+05      3.74e-07\npolygon 43                9  9.04824e+04      1.35e-07\npolygon 44               34  4.61794e+06      6.90e-06\npolygon 45               17  4.58200e+05      6.84e-07\npolygon 46               15  2.74776e+05      4.10e-07\npolygon 47               21  5.34978e+05      7.99e-07\npolygon 48               19  4.55347e+05      6.80e-07\npolygon 49               71  3.42557e+06      5.11e-06\npolygon 50               24  1.32420e+06      1.98e-06\npolygon 51               15  3.26247e+05      4.87e-07\npolygon 52               39  8.65790e+05      1.29e-06\npolygon 53               43  1.41627e+06      2.11e-06\npolygon 54               24  7.52068e+05      1.12e-06\npolygon 55               96  1.32101e+07      1.97e-05\npolygon 56               38  1.18003e+06      1.76e-06\npolygon 57              429  5.99087e+08      8.95e-04\npolygon 58               13  1.74105e+05      2.60e-07\npolygon 59               19  2.52336e+05      3.77e-07\npolygon 60               16  3.11495e+05      4.65e-07\npolygon 61               11  9.11047e+04      1.36e-07\npolygon 62               12  2.13470e+05      3.19e-07\npolygon 63               17  5.82663e+05      8.70e-07\npolygon 64               56  2.60440e+07      3.89e-05\npolygon 65              107  4.91389e+06      7.34e-06\npolygon 66               51  2.79076e+06      4.17e-06\npolygon 67               89  1.61156e+07      2.41e-05\npolygon 68               28  1.30499e+06      1.95e-06\npolygon 69               11  1.27616e+05      1.91e-07\npolygon 70               34  2.54199e+06      3.80e-06\npolygon 71               27  1.72476e+06      2.58e-06\npolygon 72               37  2.01882e+06      3.01e-06\npolygon 73               23  1.65571e+06      2.47e-06\npolygon 74               33  3.05816e+06      4.57e-06\npolygon 75               14  3.23153e+05      4.83e-07\npolygon 76               91  1.51209e+07      2.26e-05\npolygon 77               12  2.42901e+05      3.63e-07\npolygon 78               11  1.37889e+05      2.06e-07\npolygon 79               58  2.29751e+07      3.43e-05\npolygon 80               48  5.10265e+06      7.62e-06\npolygon 81               22  1.30706e+06      1.95e-06\npolygon 82               15  3.49480e+05      5.22e-07\npolygon 83               17  1.57570e+06      2.35e-06\npolygon 84               34  3.68725e+06      5.51e-06\npolygon 85               34  5.21904e+06      7.79e-06\npolygon 86               24  5.42734e+06      8.10e-06\npolygon 87              422  4.66497e+08      6.97e-04\npolygon 88              142  2.98767e+07      4.46e-05\npolygon 89              132  2.18707e+07      3.27e-05\npolygon 90               19  5.88230e+05      8.78e-07\npolygon 91               22  1.77611e+06      2.65e-06\npolygon 92               40  4.09952e+06      6.12e-06\npolygon 93               28  1.47685e+06      2.21e-06\npolygon 94               67  9.99685e+06      1.49e-05\npolygon 95               25  4.82266e+05      7.20e-07\npolygon 96               16  4.14093e+05      6.18e-07\npolygon 97               26  3.03928e+06      4.54e-06\npolygon 98               14  1.53563e+05      2.29e-07\npolygon 99               19  5.08538e+05      7.59e-07\npolygon 100              16  1.80565e+05      2.70e-07\npolygon 101              26  9.75091e+05      1.46e-06\npolygon 102              19  2.15295e+05      3.21e-07\npolygon 103              16  3.50061e+05      5.23e-07\npolygon 104 (hole)        3 -1.78834e+02     -2.67e-10\npolygon 105              14  2.11571e+05      3.16e-07\npolygon 106              11  1.59536e+05      2.38e-07\npolygon 107             111  7.35028e+07      1.10e-04\npolygon 108              54  9.35305e+06      1.40e-05\npolygon 109              19  6.34649e+05      9.48e-07\npolygon 110              79  1.47390e+07      2.20e-05\npolygon 111              10  3.74827e+04      5.60e-08\npolygon 112              13  1.37100e+05      2.05e-07\npolygon 113              31  4.47193e+06      6.68e-06\npolygon 114              19  1.23742e+06      1.85e-06\npolygon 115              20  1.79201e+06      2.68e-06\npolygon 116              16  2.19464e+05      3.28e-07\npolygon 117              11  7.94092e+04      1.19e-07\npolygon 118              14  1.45779e+05      2.18e-07\npolygon 119              31  6.24672e+05      9.33e-07\npolygon 120              11  2.29288e+04      3.42e-08\npolygon 121              18  2.10998e+05      3.15e-07\npolygon 122              26  2.52571e+06      3.77e-06\npolygon 123              16  5.77783e+05      8.63e-07\npolygon 124              26  8.87985e+05      1.33e-06\npolygon 125              13  1.10557e+05      1.65e-07\npolygon 126              21  9.55338e+05      1.43e-06\npolygon 127              32  2.18189e+06      3.26e-06\npolygon 128              18  7.64830e+05      1.14e-06\npolygon 129              34  1.71336e+06      2.56e-06\npolygon 130             115  9.29594e+05      1.39e-06\npolygon 131              68  2.06761e+05      3.09e-07\npolygon 132              40  4.87851e+06      7.28e-06\npolygon 133              10  7.43137e+04      1.11e-07\npolygon 134              17  5.95020e+05      8.88e-07\npolygon 135              21  4.02132e+05      6.00e-07\npolygon 136              21  1.09635e+06      1.64e-06\npolygon 137              14  1.15356e+05      1.72e-07\npolygon 138              20  3.13610e+05      4.68e-07\npolygon 139             275  3.92648e+08      5.86e-04\npolygon 140              16  2.19612e+05      3.28e-07\npolygon 141              13  2.64858e+05      3.95e-07\npolygon 142              23  1.25549e+06      1.87e-06\npolygon 143               9  1.79312e+05      2.68e-07\npolygon 144              15  2.93132e+05      4.38e-07\npolygon 145              15  5.29892e+05      7.91e-07\npolygon 146              23  4.95351e+05      7.40e-07\npolygon 147              14  4.41976e+05      6.60e-07\npolygon 148              19  3.32318e+05      4.96e-07\npolygon 149              16  4.15914e+05      6.21e-07\npolygon 150              22  5.10526e+05      7.62e-07\npolygon 151              48  1.87148e+07      2.79e-05\npolygon 152              18  1.62882e+06      2.43e-06\npolygon 153              71  2.43615e+07      3.64e-05\npolygon 154             116  5.16444e+07      7.71e-05\npolygon 155              19  1.54144e+06      2.30e-06\npolygon 156              11  2.01013e+05      3.00e-07\npolygon 157              20  2.31201e+06      3.45e-06\npolygon 158              15  5.94674e+05      8.88e-07\npolygon 159             218  1.56252e+08      2.33e-04\npolygon 160             162  8.80247e+07      1.31e-04\npolygon 161              16  3.69968e+05      5.52e-07\npolygon 162              14  1.61451e+05      2.41e-07\npolygon 163              18  5.54566e+05      8.28e-07\npolygon 164              19  5.07078e+05      7.57e-07\npolygon 165              57  6.86475e+06      1.03e-05\npolygon 166              15  6.56018e+05      9.80e-07\npolygon 167              21  6.65092e+05      9.93e-07\npolygon 168              15  5.97784e+05      8.93e-07\npolygon 169              37  2.56010e+06      3.82e-06\npolygon 170              13  1.66996e+05      2.49e-07\npolygon 171              20  8.18381e+05      1.22e-06\npolygon 172              21  2.89704e+06      4.33e-06\npolygon 173              15  4.08213e+05      6.10e-07\npolygon 174             104  4.71547e+07      7.04e-05\npolygon 175              28  3.80443e+06      5.68e-06\npolygon 176              67  3.17343e+07      4.74e-05\npolygon 177             730  9.20735e+08      1.37e-03\npolygon 178              16  2.01576e+05      3.01e-07\npolygon 179              12  1.41506e+05      2.11e-07\npolygon 180              15  4.92125e+05      7.35e-07\npolygon 181              18  1.58128e+06      2.36e-06\npolygon 182              25  1.94322e+06      2.90e-06\npolygon 183              12  2.51373e+05      3.75e-07\npolygon 184             412  4.47936e+08      6.69e-04\npolygon 185              22  7.57105e+05      1.13e-06\npolygon 186              16  6.97434e+05      1.04e-06\npolygon 187              39  4.45130e+06      6.65e-06\npolygon 188              13  8.83786e+05      1.32e-06\npolygon 189              10  2.06200e+05      3.08e-07\npolygon 190              76  3.60497e+07      5.38e-05\npolygon 191              13  4.56433e+05      6.82e-07\npolygon 192              28  2.30613e+06      3.44e-06\npolygon 193              27  2.50338e+06      3.74e-06\npolygon 194              14  4.69238e+05      7.01e-07\npolygon 195              10  1.69886e+05      2.54e-07\npolygon 196              16  5.42822e+05      8.11e-07\npolygon 197              10  1.17633e+05      1.76e-07\npolygon 198               8  7.08579e+04      1.06e-07\npolygon 199             144  7.85300e+07      1.17e-04\npolygon 200              37  1.93477e+06      2.89e-06\npolygon 201              25  5.59996e+05      8.36e-07\npolygon 202              44  2.86031e+06      4.27e-06\npolygon 203              26  1.26276e+06      1.89e-06\npolygon 204             149  1.37840e+08      2.06e-04\npolygon 205              18  4.84958e+05      7.24e-07\npolygon 206              73  2.93195e+07      4.38e-05\npolygon 207              45  6.87481e+06      1.03e-05\npolygon 208              64  1.80880e+07      2.70e-05\npolygon 209              12  8.76879e+05      1.31e-06\npolygon 210              26  2.78381e+06      4.16e-06\npolygon 211              35  8.72326e+06      1.30e-05\npolygon 212              53  1.06237e+07      1.59e-05\npolygon 213              26  5.40467e+06      8.07e-06\npolygon 214             148  1.05037e+08      1.57e-04\npolygon 215              21  8.32798e+05      1.24e-06\npolygon 216              21  2.23023e+06      3.33e-06\npolygon 217               8  6.30805e+05      9.42e-07\npolygon 218              78  3.67603e+07      5.49e-05\npolygon 219              18  1.64745e+06      2.46e-06\npolygon 220              58  1.31747e+07      1.97e-05\npolygon 221              94  1.16837e+07      1.74e-05\npolygon 222              53  3.17801e+06      4.75e-06\npolygon 223             137  8.46454e+06      1.26e-05\npolygon 224              23  4.36507e+05      6.52e-07\npolygon 225              27  9.72136e+05      1.45e-06\npolygon 226              55  1.98854e+06      2.97e-06\npolygon 227              48  1.02651e+07      1.53e-05\npolygon 228              15  3.16153e+05      4.72e-07\npolygon 229              22  8.93201e+05      1.33e-06\npolygon 230              18  2.91538e+05      4.35e-07\npolygon 231              59  3.70736e+06      5.54e-06\npolygon 232              11  1.55205e+05      2.32e-07\npolygon 233              14  1.87401e+05      2.80e-07\npolygon 234              11  6.54128e+04      9.77e-08\npolygon 235              11  8.64659e+04      1.29e-07\npolygon 236              12  2.25129e+05      3.36e-07\npolygon 237              30  2.72178e+06      4.06e-06\npolygon 238 (hole)        3 -2.26252e+00     -3.38e-12\npolygon 239             180  1.80314e+07      2.69e-05\npolygon 240              14  4.01942e+05      6.00e-07\npolygon 241             103  1.33467e+07      1.99e-05\npolygon 242              14  2.07708e+05      3.10e-07\npolygon 243              55  4.38623e+06      6.55e-06\npolygon 244              41  4.69733e+06      7.01e-06\npolygon 245              74  3.92633e+06      5.86e-06\npolygon 246              31  2.79477e+06      4.17e-06\npolygon 247              17  8.74607e+05      1.31e-06\npolygon 248              26  4.50962e+05      6.73e-07\npolygon 249              18  1.15065e+06      1.72e-06\npolygon 250             164  1.48037e+07      2.21e-05\npolygon 251              12  3.17290e+05      4.74e-07\npolygon 252              69  2.59551e+07      3.88e-05\npolygon 253              37  7.85963e+05      1.17e-06\npolygon 254              14  3.37873e+05      5.05e-07\npolygon 255              12  1.77980e+05      2.66e-07\npolygon 256              21  6.46195e+05      9.65e-07\npolygon 257              24  2.69998e+06      4.03e-06\npolygon 258              30  1.00675e+06      1.50e-06\npolygon 259              57  4.22747e+06      6.31e-06\npolygon 260              23  8.63543e+05      1.29e-06\npolygon 261              11  2.01925e+05      3.02e-07\npolygon 262              95  2.88232e+07      4.30e-05\npolygon 263             452  9.64208e+07      1.44e-04\npolygon 264              77  1.72297e+07      2.57e-05\npolygon 265              16  3.33522e+05      4.98e-07\npolygon 266              19  6.82895e+05      1.02e-06\npolygon 267              43  3.95062e+06      5.90e-06\npolygon 268              29  1.00709e+06      1.50e-06\npolygon 269              21  8.90014e+05      1.33e-06\npolygon 270              22  7.93453e+05      1.18e-06\npolygon 271              13  4.52813e+05      6.76e-07\npolygon 272              30  1.49817e+06      2.24e-06\npolygon 273              48  4.23996e+06      6.33e-06\npolygon 274              37  1.20290e+06      1.80e-06\npolygon 275              19  4.85805e+05      7.25e-07\npolygon 276              46  2.18001e+06      3.26e-06\npolygon 277               7  1.33723e+05      2.00e-07\npolygon 278              54  1.82059e+07      2.72e-05\npolygon 279              10  8.57866e+05      1.28e-06\npolygon 280              14  1.98445e+05      2.96e-07\npolygon 281              19  4.68357e+05      6.99e-07\npolygon 282              52  8.57765e+06      1.28e-05\npolygon 283              73  7.91998e+06      1.18e-05\npolygon 284              23  8.19561e+06      1.22e-05\npolygon 285              10  1.06594e+05      1.59e-07\npolygon 286             169  1.39462e+07      2.08e-05\npolygon 287              17  2.55915e+05      3.82e-07\npolygon 288              12  1.81516e+05      2.71e-07\npolygon 289              16  3.68509e+05      5.50e-07\npolygon 290              12  1.24954e+05      1.87e-07\npolygon 291            1012  4.61886e+08      6.90e-04\npolygon 292              15  5.42647e+05      8.10e-07\npolygon 293              12  5.53088e+05      8.26e-07\npolygon 294              24  1.06455e+06      1.59e-06\npolygon 295              14  3.17038e+05      4.73e-07\npolygon 296              17  1.25559e+06      1.87e-06\npolygon 297              16  1.92407e+06      2.87e-06\npolygon 298              80  1.86306e+07      2.78e-05\npolygon 299              11  6.83880e+04      1.02e-07\npolygon 300             166  4.21470e+07      6.29e-05\npolygon 301              22  1.36174e+06      2.03e-06\npolygon 302              31  6.07363e+05      9.07e-07\npolygon 303              10  1.27067e+05      1.90e-07\npolygon 304             164  5.02951e+07      7.51e-05\npolygon 305              17  1.20798e+06      1.80e-06\npolygon 306              59  2.41720e+06      3.61e-06\npolygon 307              12  2.52952e+05      3.78e-07\npolygon 308              14  2.44407e+05      3.65e-07\npolygon 309              43  4.89177e+06      7.30e-06\npolygon 310              40  3.86642e+06      5.77e-06\npolygon 311              23  4.59203e+05      6.86e-07\npolygon 312              14  1.79442e+05      2.68e-07\npolygon 313              13  1.61191e+05      2.41e-07\npolygon 314              43  1.33365e+06      1.99e-06\npolygon 315              75  1.20247e+07      1.80e-05\npolygon 316              17  9.96466e+04      1.49e-07\npolygon 317              22  1.60660e+06      2.40e-06\npolygon 318             730  1.16983e+08      1.75e-04\npolygon 319             129  7.87539e+06      1.18e-05\npolygon 320              22  4.66256e+05      6.96e-07\npolygon 321              19  5.44519e+05      8.13e-07\npolygon 322              16  3.73911e+05      5.58e-07\npolygon 323              88  3.47678e+07      5.19e-05\npolygon 324              46  3.23711e+06      4.83e-06\npolygon 325              47  9.17482e+05      1.37e-06\npolygon 326              14  4.44869e+05      6.64e-07\npolygon 327              43  1.29527e+06      1.93e-06\npolygon 328              65  3.20974e+06      4.79e-06\npolygon 329             306  1.83695e+07      2.74e-05\npolygon 330              17  4.25486e+05      6.35e-07\npolygon 331              29  1.08467e+06      1.62e-06\npolygon 332              26  1.16602e+06      1.74e-06\npolygon 333             135  4.90655e+06      7.33e-06\npolygon 334              23  1.87723e+06      2.80e-06\npolygon 335              21  7.02338e+05      1.05e-06\npolygon 336              30  4.99970e+06      7.47e-06\npolygon 337              21  7.71571e+05      1.15e-06\npolygon 338              13  1.47832e+05      2.21e-07\npolygon 339              26  3.17307e+06      4.74e-06\npolygon 340              17  1.03642e+06      1.55e-06\npolygon 341             100  8.74537e+06      1.31e-05\npolygon 342              11  1.13950e+05      1.70e-07\npolygon 343              26  8.27840e+05      1.24e-06\npolygon 344              17  4.10882e+05      6.14e-07\npolygon 345              13  1.49250e+05      2.23e-07\npolygon 346              35  1.76408e+06      2.63e-06\npolygon 347              15  2.03390e+05      3.04e-07\npolygon 348              18  1.70982e+05      2.55e-07\npolygon 349              32  7.98599e+06      1.19e-05\npolygon 350              27  3.20839e+05      4.79e-07\npolygon 351             539  1.17139e+08      1.75e-04\npolygon 352              51  1.57614e+06      2.35e-06\npolygon 353              19  3.60772e+05      5.39e-07\npolygon 354              58  2.10060e+06      3.14e-06\npolygon 355              13  1.70224e+05      2.54e-07\npolygon 356              11  6.11736e+05      9.13e-07\npolygon 357              35  5.26152e+06      7.86e-06\npolygon 358              16  1.99371e+05      2.98e-07\npolygon 359              14  4.48979e+05      6.70e-07\npolygon 360              25  1.92913e+06      2.88e-06\npolygon 361              16  4.26157e+05      6.36e-07\npolygon 362              46  1.88229e+06      2.81e-06\npolygon 363              17  2.29456e+05      3.43e-07\npolygon 364              36  4.01418e+06      5.99e-06\npolygon 365              57  1.77153e+07      2.65e-05\npolygon 366              20  5.72298e+05      8.55e-07\npolygon 367              14  2.46782e+05      3.68e-07\npolygon 368              29  1.01300e+06      1.51e-06\npolygon 369              90  8.54955e+06      1.28e-05\npolygon 370              21  3.99098e+05      5.96e-07\npolygon 371              12  2.81650e+05      4.21e-07\npolygon 372              52  3.19337e+06      4.77e-06\npolygon 373              13  3.40300e+05      5.08e-07\npolygon 374              29  9.08533e+05      1.36e-06\npolygon 375              20  3.07393e+05      4.59e-07\npolygon 376              19  1.15906e+06      1.73e-06\npolygon 377              17  1.16182e+06      1.73e-06\npolygon 378              21  2.60877e+06      3.90e-06\npolygon 379              15  1.09001e+05      1.63e-07\npolygon 380              37  1.31921e+06      1.97e-06\npolygon 381              53  1.46854e+06      2.19e-06\npolygon 382              59  8.92822e+06      1.33e-05\npolygon 383               9  7.44981e+04      1.11e-07\npolygon 384              14  2.41462e+05      3.61e-07\npolygon 385              96  7.25940e+06      1.08e-05\npolygon 386              11  1.06055e+05      1.58e-07\npolygon 387              49  1.87834e+06      2.80e-06\npolygon 388              23  6.08310e+05      9.08e-07\npolygon 389              50  6.76488e+05      1.01e-06\npolygon 390              22  4.83089e+05      7.21e-07\npolygon 391              17  1.17278e+05      1.75e-07\npolygon 392              13  8.98786e+05      1.34e-06\npolygon 393              43  1.01757e+06      1.52e-06\npolygon 394              52  1.68377e+06      2.51e-06\npolygon 395             348  2.50314e+08      3.74e-04\npolygon 396              43  1.29120e+06      1.93e-06\npolygon 397              71  2.02836e+06      3.03e-06\npolygon 398 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 399             141  4.53240e+06      6.77e-06\npolygon 400              52  3.62008e+06      5.41e-06\npolygon 401              20  7.69539e+05      1.15e-06\npolygon 402              88  8.88904e+06      1.33e-05\npolygon 403              12  1.44668e+05      2.16e-07\npolygon 404              46  2.28026e+06      3.40e-06\npolygon 405              39  4.79165e+06      7.15e-06\npolygon 406              53  2.86736e+06      4.28e-06\npolygon 407              38  3.22508e+06      4.82e-06\npolygon 408              18  4.44863e+05      6.64e-07\npolygon 409              45  1.45134e+06      2.17e-06\npolygon 410              86  2.56400e+07      3.83e-05\npolygon 411             158  1.74510e+07      2.61e-05\npolygon 412              14  2.50383e+05      3.74e-07\npolygon 413             120  7.17019e+06      1.07e-05\npolygon 414             146  2.28448e+07      3.41e-05\npolygon 415             143  2.34472e+07      3.50e-05\npolygon 416              20  3.47415e+05      5.19e-07\npolygon 417              84  3.86387e+06      5.77e-06\npolygon 418              68  1.10850e+07      1.66e-05\npolygon 419             863  7.47702e+07      1.12e-04\npolygon 420              53  7.54742e+06      1.13e-05\npolygon 421              64  2.11016e+06      3.15e-06\npolygon 422             103  1.47525e+07      2.20e-05\npolygon 423              26  3.40345e+06      5.08e-06\npolygon 424             103  8.40445e+06      1.25e-05\npolygon 425              23  4.92041e+05      7.35e-07\npolygon 426              27  5.53625e+05      8.27e-07\npolygon 427              60  3.56102e+06      5.32e-06\npolygon 428             151  1.51314e+07      2.26e-05\npolygon 429             708  4.18129e+08      6.24e-04\npolygon 430             120  1.32857e+07      1.98e-05\npolygon 431             856  2.53898e+08      3.79e-04\npolygon 432              13  2.47298e+05      3.69e-07\npolygon 433              16  7.35754e+05      1.10e-06\npolygon 434              21  5.31633e+05      7.94e-07\npolygon 435              72  1.03185e+07      1.54e-05\npolygon 436              38  1.34734e+06      2.01e-06\npolygon 437               8  4.09489e+05      6.11e-07\npolygon 438              17  2.46995e+05      3.69e-07\npolygon 439              14  1.42285e+05      2.12e-07\npolygon 440               9  1.56346e+05      2.33e-07\npolygon 441              42  5.49581e+05      8.21e-07\npolygon 442              59  1.15813e+06      1.73e-06\npolygon 443              12  1.16845e+05      1.74e-07\npolygon 444              11  6.00122e+04      8.96e-08\npolygon 445              14  1.63465e+05      2.44e-07\npolygon 446               8  4.73674e+04      7.07e-08\npolygon 447              23  6.69330e+05      9.99e-07\npolygon 448             144  6.48346e+06      9.68e-06\npolygon 449              74  4.79923e+06      7.17e-06\npolygon 450             116  1.02706e+07      1.53e-05\npolygon 451              16  2.74005e+05      4.09e-07\npolygon 452              97  4.72599e+06      7.06e-06\npolygon 453              18  6.15583e+05      9.19e-07\npolygon 454             146  1.38979e+07      2.08e-05\npolygon 455              32  1.94516e+06      2.90e-06\npolygon 456              26  9.81356e+05      1.47e-06\npolygon 457              82  4.39797e+06      6.57e-06\npolygon 458              33  9.36113e+05      1.40e-06\npolygon 459              47  1.51844e+06      2.27e-06\npolygon 460             196  2.32689e+07      3.47e-05\npolygon 461              53  1.30069e+06      1.94e-06\npolygon 462              70  1.00802e+07      1.51e-05\npolygon 463              10  5.33870e+05      7.97e-07\npolygon 464             211  2.73026e+07      4.08e-05\npolygon 465              41  1.44141e+06      2.15e-06\npolygon 466               9  5.20220e+05      7.77e-07\npolygon 467             316  6.66808e+07      9.96e-05\npolygon 468              17  7.48505e+05      1.12e-06\npolygon 469              15  1.49799e+05      2.24e-07\npolygon 470              24  4.99500e+05      7.46e-07\npolygon 471              12  2.24463e+05      3.35e-07\npolygon 472             100  1.06028e+07      1.58e-05\npolygon 473              11  1.24267e+05      1.86e-07\npolygon 474             143  1.89581e+07      2.83e-05\npolygon 475              60  7.07802e+06      1.06e-05\npolygon 476             124  1.23476e+07      1.84e-05\npolygon 477              34  5.67625e+06      8.48e-06\npolygon 478             797  1.86955e+08      2.79e-04\npolygon 479              15  7.15891e+05      1.07e-06\npolygon 480              20  1.61624e+06      2.41e-06\npolygon 481              13  1.73955e+05      2.60e-07\npolygon 482              60  2.42590e+06      3.62e-06\npolygon 483              20  3.86365e+05      5.77e-07\npolygon 484             213  3.69421e+07      5.52e-05\npolygon 485              15  4.55574e+05      6.80e-07\npolygon 486              35  1.56058e+06      2.33e-06\npolygon 487              32  1.42419e+06      2.13e-06\npolygon 488              68  2.30711e+06      3.44e-06\npolygon 489             240  5.93935e+07      8.87e-05\npolygon 490             145  1.58875e+07      2.37e-05\npolygon 491              39  3.67239e+06      5.48e-06\npolygon 492              54  3.84847e+06      5.75e-06\npolygon 493              32  1.14073e+06      1.70e-06\npolygon 494              18  3.58549e+05      5.35e-07\npolygon 495              25  8.06470e+05      1.20e-06\npolygon 496              15  2.67818e+05      4.00e-07\npolygon 497              26  1.43681e+06      2.15e-06\npolygon 498              18  3.10061e+05      4.63e-07\npolygon 499              18  4.71644e+05      7.04e-07\npolygon 500              16  5.04146e+05      7.53e-07\npolygon 501              72  7.33720e+06      1.10e-05\npolygon 502              27  1.37772e+06      2.06e-06\npolygon 503              15  3.17217e+05      4.74e-07\npolygon 504              37  1.17498e+06      1.75e-06\npolygon 505              21  7.05388e+05      1.05e-06\npolygon 506             216  2.05399e+07      3.07e-05\npolygon 507              16  2.40093e+05      3.59e-07\npolygon 508              29  1.71282e+06      2.56e-06\npolygon 509              30  1.28695e+06      1.92e-06\npolygon 510              36  2.29670e+06      3.43e-06\npolygon 511             129  1.97698e+07      2.95e-05\npolygon 512              65  2.65969e+06      3.97e-06\npolygon 513             283  3.30575e+07      4.94e-05\npolygon 514              28  7.06271e+05      1.05e-06\npolygon 515              28  5.50158e+05      8.21e-07\npolygon 516              49  2.25015e+06      3.36e-06\npolygon 517              26  1.24280e+06      1.86e-06\npolygon 518              28  9.02794e+05      1.35e-06\npolygon 519              18  4.84064e+05      7.23e-07\npolygon 520              47  2.33442e+06      3.49e-06\npolygon 521              17  2.23835e+05      3.34e-07\npolygon 522              34  7.32504e+05      1.09e-06\npolygon 523              41  7.15538e+05      1.07e-06\npolygon 524              21  5.81687e+05      8.69e-07\npolygon 525              63  3.83819e+06      5.73e-06\npolygon 526              27  1.33192e+06      1.99e-06\npolygon 527              46  2.95028e+06      4.41e-06\npolygon 528              10  1.34210e+05      2.00e-07\npolygon 529              16  2.38274e+05      3.56e-07\npolygon 530              18  4.18536e+05      6.25e-07\npolygon 531              46  1.26584e+06      1.89e-06\npolygon 532              14  2.14679e+05      3.21e-07\npolygon 533              76  3.63371e+06      5.43e-06\npolygon 534             339  4.44685e+07      6.64e-05\npolygon 535             109  6.29786e+06      9.40e-06\npolygon 536              14  2.89570e+05      4.32e-07\npolygon 537              37  9.07704e+05      1.36e-06\npolygon 538              68  3.86104e+06      5.77e-06\npolygon 539             183  1.45458e+07      2.17e-05\npolygon 540              44  1.64355e+06      2.45e-06\npolygon 541              26  1.21667e+06      1.82e-06\npolygon 542              13  1.95710e+05      2.92e-07\npolygon 543              38  1.44402e+06      2.16e-06\npolygon 544              14  3.29394e+05      4.92e-07\npolygon 545              14  1.79828e+05      2.69e-07\npolygon 546              44  2.11118e+06      3.15e-06\npolygon 547             643  1.79215e+08      2.68e-04\npolygon 548              24  1.10979e+06      1.66e-06\npolygon 549              30  1.57106e+06      2.35e-06\npolygon 550              46  3.61716e+06      5.40e-06\npolygon 551              93  7.56340e+05      1.13e-06\npolygon 552              57  3.07732e+06      4.59e-06\npolygon 553              18  2.16224e+05      3.23e-07\npolygon 554              17  5.12388e+05      7.65e-07\npolygon 555               9  7.44780e+04      1.11e-07\npolygon 556              57  8.09122e+06      1.21e-05\npolygon 557              16  4.01323e+05      5.99e-07\npolygon 558             118  2.90304e+07      4.33e-05\npolygon 559              22  4.44693e+05      6.64e-07\npolygon 560              43  2.28763e+06      3.42e-06\npolygon 561              27  1.15444e+06      1.72e-06\npolygon 562              25  1.21695e+06      1.82e-06\npolygon 563              53  4.49228e+06      6.71e-06\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\nPlotting Armed Conflict ppp:\n\n#plot(armedconflict_ppp)\nplot(armedconflict_ppp_list[[1]])\n\n\n\n\n\n\n\n\nRescale to kilometers:\n\narmedconflict_ppp_km_list &lt;- list()\n\nfor (i in names(armedconflict_ppp_list)){\n  armedconflict_ppp_km &lt;- rescale.ppp(armedconflict_ppp_list[[i]], 1000, \"km\")\n  \n  armedconflict_ppp_km_list[[i]] &lt;- armedconflict_ppp_km\n}\n\nPlotting quarterly KDE:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(armedconflict_ppp_km_list[[1]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q1\")\nplot(density(armedconflict_ppp_km_list[[2]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q2\")\nplot(density(armedconflict_ppp_km_list[[3]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q3\")\nplot(density(armedconflict_ppp_km_list[[4]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q4\")\n\n\n\n\n\n\n\n\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(armedconflict_ppp_km_list[[5]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q1\")\nplot(density(armedconflict_ppp_km_list[[6]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q2\")\nplot(density(armedconflict_ppp_km_list[[7]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q3\")\nplot(density(armedconflict_ppp_km_list[[8]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2021 Q4\")\n\n\n\n\n\n\n\n\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(armedconflict_ppp_km_list[[9]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q1\")\nplot(density(armedconflict_ppp_km_list[[10]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q2\")\nplot(density(armedconflict_ppp_km_list[[11]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q3\")\nplot(density(armedconflict_ppp_km_list[[12]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2023 Q4\")\n\n\n\n\n\n\n\n\n\npar(mfrow = c(1,2))\nplot(density(armedconflict_ppp_km_list[[13]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2024 Q1\")\nplot(density(armedconflict_ppp_km_list[[14]], \n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\"), main = \"2024 Q2\")"
  },
  {
    "objectID": "THE/THE1/takehome1.html#stkde",
    "href": "THE/THE1/takehome1.html#stkde",
    "title": "Takehome 1",
    "section": "",
    "text": "Plotting STKDE:\n\nst_kde &lt;- spattemp.density(ac_ppp)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 44832.76 (spatial)\n  lambda = 0.0055 (temporal)\n\nNo. of observations\n  42518 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [1.530449e-24, 1.421689e-10]\n\n\n\nplot_stkde_quarters &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 3)\n  par(mfrow=c(2,2), mar=c(2,2,2,1))  # Set the layout to 2x2 grid\n  \n  for(i in quarters) {\n    plot(st_kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"STKDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Ribbon remains on for informative plots\n  }\n  \n}\n\n\n#just to plot the last 2 \nplot_stkde_quarters2 &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 1)  # Adjusted to plot 4 quarters\n  par(mfrow=c(1,2), mar=c(2,2,2,1))  \n  \n  for(i in quarters) {\n    plot(st_kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"STKDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Ribbon remains on for informative plots\n  }\n  \n}\n\n\nplot_stkde_quarters(1)\n\n\n\n\n\n\n\n\n\nplot_stkde_quarters(5)\n\n\n\n\n\n\n\n\n\nplot_stkde_quarters(9)\n\n\n\n\n\n\n\n\n\nplot_stkde_quarters2(13)\n\n\n\n\n\n\n\n\nA few observations become apparent:\n\nAreas with heavy conflict are the same areas with high population density(Mandalay/Yangon),\nConflict incidence rate picked up around 2021 Q4,\nA small spike in fighting occurred in Shan state, near the border with China during the end of 2023,\nHuge increase in armed engagements in 2024 Q2 after a lull at the start of the year, especially in Rakhine(West) and Kayin/Mon(Southeast) states.\n\nWhats the reason behind the large increase in conflicts during 2024? Only god knows — until i google use geospatial analysis to find out haha :]\nLoad regional shapefile and make an owin object from it:\n\nreg_sf &lt;- st_read(dsn = \"data/mmr_polbnda2_adm1_250k_mimu_1\", layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\THE\\THE1\\data\\mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nplot(reg_sf)\n\n\n\n\n\n\n\n\nTransform to match ACLED CRS:\n\nreg_sf &lt;- st_transform(reg_sf , st_crs(acled_sf))\n\nprint(st_crs(reg_sf ))\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nCreating window for ppp object:\n\nreg_owin &lt;- as.owin(reg_sf)\n\n\narmedconflictreg_ppp &lt;- acled_jit[reg_owin]\n\n\narmedconflictreg_sf &lt;- st_as_sf(as.data.frame(acled_jit), coords = c(\"x\", \"y\"), crs = st_crs(reg_sf))\n\n\nggplot() +\n  geom_sf(data = reg_sf, aes(fill = ST), alpha = 0.5) +\n  geom_sf(data = armedconflictreg_sf, color = \"red\", size = 0.5, alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Armed Conflicts in Myanmar\",\n       fill = \"State/Region\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nIn the words of former chess world champion vladimir kramnik, “let us begin the procedure”\nComparing between q1 and q14, it is evident that there is significantly increased activity in Rakhine, as well as the areas east of Yangon.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(quarters_list$Quarter_1)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(quarters_list$Quarter_14)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nDivine beings have bestowed upon me arcane knowledge to make light of this increase in armed conflicts.\n\nOn Rakhine\nOn Mon and Kayin"
  },
  {
    "objectID": "THE/THE1/takehome1.html#rakhine",
    "href": "THE/THE1/takehome1.html#rakhine",
    "title": "Takehome 1",
    "section": "",
    "text": "Plotting Rakhine state:\n\nrak &lt;- reg_sf %&gt;% filter(ST == \"Rakhine\")\nplot(st_geometry(rak), main = \"Rakhine\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(rak, main = \"Rakhine\")\n\n\n\n\n\n\n\n\n\nrak_owin &lt;- as.owin(rak)\nrak_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [-210008.62, 66341.23] x [1921825.4, 2389804.6] units\n\n\n\nclass(rak_owin)\n\n[1] \"owin\"\n\n\n\nrak_quarter &lt;- acled_quarter %&gt;%\n  filter(admin1 == \"Rakhine\")\n\n\ntm_shape(rak)+\n  tm_polygons()+\n  tm_shape(rak_quarter)+\n  tm_dots(size = 0.1)+\n  tm_facets(by =\"QuarterNumeric\", free.coords = FALSE, drop.units =TRUE)\n\n\n\n\n\n\n\n\n\nrak_q &lt;- rak_quarter %&gt;%\n  select(QuarterNumeric)\n\n\nrak_q_ppp &lt;- as.ppp(rak_q)\nrak_q_ppp\n\nMarked planar point pattern: 2279 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-208804.42, 32638.7] x [1939748.9, 2377309.7] units\n\n\ncheck ppp object\n\nsummary(rak_q_ppp)\n\nMarked planar point pattern:  2279 points\nAverage intensity 2.157203e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    8.00   12.00   10.86   13.00   14.00 \n\nWindow: rectangle = [-208804.42, 32638.7] x [1939748.9, 2377309.7] units\n                    (241400 x 437600 units)\nWindow area = 1.05646e+11 square units\n\n\n\nany(duplicated(rak_q_ppp))\n\n[1] TRUE\n\n\n\nrak_jit &lt;- rjitter(rak_q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(rak_jit))\n\n[1] FALSE\n\n\n\nrak_q_owin &lt;- rak_jit[rak_owin]\nsummary(rak_q_owin)\n\nMarked planar point pattern:  2227 points\nAverage intensity 6.361399e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    8.00   12.00   10.85   13.00   14.00 \n\nWindow: polygonal boundary\n101 separate polygons (no holes)\n             vertices        area relative.area\npolygon 1       10525 3.20404e+10      9.15e-01\npolygon 2          26 2.85778e+06      8.16e-05\npolygon 3          43 7.32477e+06      2.09e-04\npolygon 4         103 1.86991e+07      5.34e-04\npolygon 5          37 9.32316e+06      2.66e-04\npolygon 6         371 2.43869e+08      6.97e-03\npolygon 7         297 2.84905e+08      8.14e-03\npolygon 8          33 1.68222e+07      4.81e-04\npolygon 9          33 4.47665e+05      1.28e-05\npolygon 10         19 1.34593e+05      3.84e-06\npolygon 11         39 1.36327e+06      3.89e-05\npolygon 12        137 1.55547e+08      4.44e-03\npolygon 13         36 8.76479e+06      2.50e-04\npolygon 14         79 3.08116e+07      8.80e-04\npolygon 15        388 2.25271e+08      6.43e-03\npolygon 16        316 7.78512e+07      2.22e-03\npolygon 17         13 1.09564e+05      3.13e-06\npolygon 18         18 3.49727e+05      9.99e-06\npolygon 19         31 1.23017e+06      3.51e-05\npolygon 20         16 6.55537e+05      1.87e-05\npolygon 21         24 8.49487e+05      2.43e-05\npolygon 22         30 2.54436e+06      7.27e-05\npolygon 23        336 4.15806e+07      1.19e-03\npolygon 24        330 1.69190e+08      4.83e-03\npolygon 25         47 1.08035e+07      3.09e-04\npolygon 26         39 4.94369e+06      1.41e-04\npolygon 27         23 2.72438e+06      7.78e-05\npolygon 28         33 5.70263e+06      1.63e-04\npolygon 29         90 4.20329e+07      1.20e-03\npolygon 30         28 1.35341e+06      3.87e-05\npolygon 31        225 1.08816e+08      3.11e-03\npolygon 32         33 9.16670e+06      2.62e-04\npolygon 33        192 7.02655e+07      2.01e-03\npolygon 34         49 1.49245e+07      4.26e-04\npolygon 35         98 1.79076e+07      5.12e-04\npolygon 36          6 6.37552e+05      1.82e-05\npolygon 37         49 1.01233e+07      2.89e-04\npolygon 38        141 3.43053e+07      9.80e-04\npolygon 39        195 3.24345e+07      9.26e-04\npolygon 40         51 3.38313e+06      9.66e-05\npolygon 41         34 2.01400e+06      5.75e-05\npolygon 42         13 2.50435e+05      7.15e-06\npolygon 43          9 9.04824e+04      2.58e-06\npolygon 44         34 4.61794e+06      1.32e-04\npolygon 45         17 4.58200e+05      1.31e-05\npolygon 46         15 2.74776e+05      7.85e-06\npolygon 47         21 5.34978e+05      1.53e-05\npolygon 48         19 4.55347e+05      1.30e-05\npolygon 49         71 3.42557e+06      9.79e-05\npolygon 50         24 1.32420e+06      3.78e-05\npolygon 51         15 3.26247e+05      9.32e-06\npolygon 52         39 8.65790e+05      2.47e-05\npolygon 53         43 1.41627e+06      4.05e-05\npolygon 54         24 7.52068e+05      2.15e-05\npolygon 55         96 1.32101e+07      3.77e-04\npolygon 56         38 1.18003e+06      3.37e-05\npolygon 57        429 5.99087e+08      1.71e-02\npolygon 58         13 1.74105e+05      4.97e-06\npolygon 59         19 2.52336e+05      7.21e-06\npolygon 60         16 3.11495e+05      8.90e-06\npolygon 61         11 9.11047e+04      2.60e-06\npolygon 62         12 2.13470e+05      6.10e-06\npolygon 63         17 5.82663e+05      1.66e-05\npolygon 64         56 2.60440e+07      7.44e-04\npolygon 65        107 4.91389e+06      1.40e-04\npolygon 66         51 2.79076e+06      7.97e-05\npolygon 67         89 1.61156e+07      4.60e-04\npolygon 68         28 1.30499e+06      3.73e-05\npolygon 69         11 1.27616e+05      3.65e-06\npolygon 70         34 2.54199e+06      7.26e-05\npolygon 71         27 1.72476e+06      4.93e-05\npolygon 72         37 2.01882e+06      5.77e-05\npolygon 73         23 1.65571e+06      4.73e-05\npolygon 74         33 3.05816e+06      8.74e-05\npolygon 75         14 3.23153e+05      9.23e-06\npolygon 76         91 1.51209e+07      4.32e-04\npolygon 77         12 2.42901e+05      6.94e-06\npolygon 78         11 1.37889e+05      3.94e-06\npolygon 79         58 2.29751e+07      6.56e-04\npolygon 80         48 5.10265e+06      1.46e-04\npolygon 81         22 1.30706e+06      3.73e-05\npolygon 82         15 3.49480e+05      9.98e-06\npolygon 83         17 1.57570e+06      4.50e-05\npolygon 84         34 3.68725e+06      1.05e-04\npolygon 85         34 5.21904e+06      1.49e-04\npolygon 86         24 5.42734e+06      1.55e-04\npolygon 87        422 4.66497e+08      1.33e-02\npolygon 88        142 2.98767e+07      8.53e-04\npolygon 89        132 2.18707e+07      6.25e-04\npolygon 90         19 5.88230e+05      1.68e-05\npolygon 91         22 1.77611e+06      5.07e-05\npolygon 92         40 4.09952e+06      1.17e-04\npolygon 93         28 1.47685e+06      4.22e-05\npolygon 94         67 9.99685e+06      2.86e-04\npolygon 95         25 4.82266e+05      1.38e-05\npolygon 96         16 4.14093e+05      1.18e-05\npolygon 97         26 3.03928e+06      8.68e-05\npolygon 98         14 1.53563e+05      4.39e-06\npolygon 99         19 5.08538e+05      1.45e-05\npolygon 100        16 1.80565e+05      5.16e-06\npolygon 101        26 9.75091e+05      2.79e-05\nenclosing rectangle: [-210008.62, 66341.23] x [1921825.4, 2389804.6] units\n                     (276300 x 468000 units)\nWindow area = 3.5008e+10 square units\nFraction of frame area: 0.271\n\n\n\nstkde_rak &lt;- spattemp.density(rak_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(stkde_rak)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 22040.55 (spatial)\n  lambda = 0.022 (temporal)\n\nNo. of observations\n  2227 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 66341.23] x [1921825, 2389805]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [3.023706e-42, 2.037536e-09]\n\n\n\nqs &lt;- c(1,4)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(8,12)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(13,14)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\nMore evidence showing that the fighting only picked up in 2024, especially in the north and around Thandwe Airport.\nG Function\n\nG_rk = Gest(rak_jit, correction = \"border\")\nplot(G_rk, xlim =c(0,500))\n\n\n\n\n\n\n\n\n\nG_rk.csr &lt;- envelope(rak_jit, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_rk.csr)\n\n\n\n\n\n\n\n\nF Function\n\nF_rk = Fest(rak_jit)\nplot(F_rk)\n\n\n\n\n\n\n\n\n\nF_rk.csr &lt;- envelope(rak_jit, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_rk.csr)"
  },
  {
    "objectID": "THE/THE1/takehome1.html#kayinmon",
    "href": "THE/THE1/takehome1.html#kayinmon",
    "title": "Takehome 1",
    "section": "",
    "text": "mk &lt;- reg_sf %&gt;% filter(ST %in% c(\"Kayin\", \"Mon\"))\nplot(st_geometry(mk), main = \"Mon & Kayin\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(mk, main = \"Mon & Kayin\")\n\n\n\n\n\n\n\n\n\nmk_owin &lt;- as.owin(mk)\nmk_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [226179.1, 491639.1] x [1645418.5, 2158819.5] units\n\n\n\nclass(mk_owin)\n\n[1] \"owin\"\n\n\n\nmk_quarter &lt;- acled_quarter %&gt;%\n  filter(admin1 %in% c(\"Kayin\", \"Mon\"))\n\n\ntm_shape(mk)+\n  tm_polygons()+\n  tm_shape(mk_quarter)+\n  tm_dots(size = 0.1)+\n  tm_facets(by =\"QuarterNumeric\", free.coords = FALSE, drop.units =TRUE)\n\n\n\n\n\n\n\n\n\nmk_q &lt;- mk_quarter %&gt;%\n  select(QuarterNumeric)\n\n\nmk_q_ppp &lt;- as.ppp(mk_q)\nmk_q_ppp\n\nMarked planar point pattern: 3507 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [233276, 480797.9] x [1657860.2, 2149957.4] units\n\n\ncheck ppp object\n\nsummary(mk_q_ppp)\n\nMarked planar point pattern:  3507 points\nAverage intensity 2.879196e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   7.935  11.000  14.000 \n\nWindow: rectangle = [233276, 480797.9] x [1657860.2, 2149957.4] units\n                    (247500 x 492100 units)\nWindow area = 1.21805e+11 square units\n\n\n\nany(duplicated(mk_q_ppp))\n\n[1] TRUE\n\n\n\nmk_jit &lt;- rjitter(mk_q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(mk_jit))\n\n[1] FALSE\n\n\n\nmk_q_owin &lt;- mk_jit[mk_owin]\nsummary(mk_q_owin)\n\nMarked planar point pattern:  3480 points\nAverage intensity 8.329182e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   7.931  11.000  14.000 \n\nWindow: polygonal boundary\n69 separate polygons (11 holes)\n                  vertices         area relative.area\npolygon 1 (hole)        13 -1.40633e-02     -3.37e-13\npolygon 2 (hole)         6 -2.76240e-02     -6.61e-13\npolygon 3 (hole)         3 -2.72931e-02     -6.53e-13\npolygon 4 (hole)         3 -1.16808e-02     -2.80e-13\npolygon 5 (hole)        10 -4.10705e-03     -9.83e-14\npolygon 6 (hole)         3 -1.07902e-03     -2.58e-14\npolygon 7 (hole)         3 -8.74118e-04     -2.09e-14\npolygon 8 (hole)         4 -1.90718e-03     -4.56e-14\npolygon 9 (hole)         7 -5.31797e-03     -1.27e-13\npolygon 10 (hole)        4 -1.88745e-02     -4.52e-13\npolygon 11 (hole)        5 -1.72617e-02     -4.13e-13\npolygon 12              54  9.35305e+06      2.24e-04\npolygon 13              19  6.34649e+05      1.52e-05\npolygon 14              10  3.74827e+04      8.97e-07\npolygon 15              13  1.37100e+05      3.28e-06\npolygon 16              31  4.47193e+06      1.07e-04\npolygon 17              19  1.23742e+06      2.96e-05\npolygon 18              16  2.19464e+05      5.25e-06\npolygon 19              11  7.94092e+04      1.90e-06\npolygon 20              14  1.45779e+05      3.49e-06\npolygon 21              31  6.24672e+05      1.50e-05\npolygon 22              11  2.29288e+04      5.49e-07\npolygon 23              18  2.10998e+05      5.05e-06\npolygon 24              26  2.52571e+06      6.05e-05\npolygon 25              16  5.77783e+05      1.38e-05\npolygon 26              26  8.87985e+05      2.13e-05\npolygon 27              13  1.10557e+05      2.65e-06\npolygon 28              21  9.55338e+05      2.29e-05\npolygon 29              32  2.18189e+06      5.22e-05\npolygon 30              18  7.64830e+05      1.83e-05\npolygon 31              34  1.71336e+06      4.10e-05\npolygon 32             115  9.29594e+05      2.22e-05\npolygon 33              68  2.06761e+05      4.95e-06\npolygon 34              40  4.87851e+06      1.17e-04\npolygon 35              10  7.43137e+04      1.78e-06\npolygon 36              17  5.95020e+05      1.42e-05\npolygon 37              21  4.02132e+05      9.62e-06\npolygon 38              21  1.09635e+06      2.62e-05\npolygon 39              14  1.15356e+05      2.76e-06\npolygon 40              20  3.13610e+05      7.51e-06\npolygon 41             275  3.92648e+08      9.40e-03\npolygon 42              16  2.19612e+05      5.26e-06\npolygon 43              23  1.25549e+06      3.00e-05\npolygon 44               9  1.79312e+05      4.29e-06\npolygon 45              15  2.93132e+05      7.02e-06\npolygon 46              15  5.29892e+05      1.27e-05\npolygon 47              23  4.95351e+05      1.19e-05\npolygon 48              16  4.15914e+05      9.95e-06\npolygon 49              11  2.01013e+05      4.81e-06\npolygon 50              20  2.31201e+06      5.53e-05\npolygon 51              15  5.94674e+05      1.42e-05\npolygon 52              16  3.69968e+05      8.85e-06\npolygon 53              14  1.61451e+05      3.86e-06\npolygon 54              18  5.54566e+05      1.33e-05\npolygon 55              15  6.56018e+05      1.57e-05\npolygon 56              13  1.66996e+05      4.00e-06\npolygon 57              21  2.89704e+06      6.93e-05\npolygon 58             104  4.71547e+07      1.13e-03\npolygon 59              12  1.41506e+05      3.39e-06\npolygon 60              18  1.58128e+06      3.78e-05\npolygon 61              25  1.94322e+06      4.65e-05\npolygon 62              12  2.51373e+05      6.02e-06\npolygon 63              16  6.97434e+05      1.67e-05\npolygon 64             137  8.46454e+06      2.03e-04\npolygon 65              23  4.36507e+05      1.04e-05\npolygon 66              27  9.72136e+05      2.33e-05\npolygon 67              55  1.98854e+06      4.76e-05\npolygon 68              79  1.47390e+07      3.53e-04\npolygon 69            6798  4.12630e+10      9.88e-01\nenclosing rectangle: [226179.1, 491639.1] x [1645418.5, 2158819.5] units\n                     (265500 x 513400 units)\nWindow area = 41780800000 square units\nFraction of frame area: 0.307\n\n\n\nstkde_mk &lt;- spattemp.density(mk_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(stkde_mk)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 19935.18 (spatial)\n  lambda = 0.0349 (temporal)\n\nNo. of observations\n  3480 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [226179.1, 491639.1] x [1645419, 2158819]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [1.860509e-29, 2.540474e-10]\n\n\n\nqs &lt;- c(1,14)\npar(mfrow= c(1,2))\nfor( i in qs){\n  plot(stkde_rak, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\",i))\n}\n\n\n\n\n\n\n\n\nG Func:\n\nG_mk = Gest(mk_jit, correction = \"border\")\nplot(G_mk, xlim =c(0,500))\n\n\n\n\n\n\n\n\n\nG_mk.csr &lt;- envelope(mk_jit, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_mk.csr)\n\n\n\n\n\n\n\n\nF Function\n\nF_mk = Fest(mk_jit)\nplot(F_mk)\n\n\n\n\n\n\n\n\n\nF_mk.csr &lt;- envelope(mk_jit, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_mk.csr)"
  },
  {
    "objectID": "THE/THE1/takehome1.html#mandalay-sagaing",
    "href": "THE/THE1/takehome1.html#mandalay-sagaing",
    "title": "Takehome 1",
    "section": "",
    "text": "OK now lets be boring and go look at Mandalay/Sagaing where the bulk of the conflict happens:\n\nmnd &lt;- reg_sf %&gt;% filter(ST %in% c(\"Mandalay\", \"Sagaing\"))\nplot(st_geometry(mnd), main = \"Mandalay & Sagaing\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(mnd, main = \"Mandalay & Sagaing\")\n\n\n\n\n\n\n\n\n\nmnd_owin &lt;- as.owin(mnd)\nmnd_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [-17699.96, 308341.37] x [2234807.4, 3029739.1] units\n\n\n\nclass(mnd_owin)\n\n[1] \"owin\"\n\n\n\nmnd_quarter &lt;- acled_quarter %&gt;%\n  filter(admin1 %in% c(\"Mandalay\", \"Sagaing\"))\n\n\ntm_shape(mnd)+\n  tm_polygons()+\n  tm_shape(mnd_quarter)+\n  tm_dots(size = 0.1)+\n  tm_facets(by =\"QuarterNumeric\", free.coords = FALSE, drop.units =TRUE)\n\n\n\n\n\n\n\n\nWowee so much fighting!\n\nmnd_q &lt;- mnd_quarter %&gt;%\n  select(QuarterNumeric)\n\n\nmnd_q_ppp &lt;- as.ppp(mnd_q)\nmnd_q_ppp\n\nMarked planar point pattern: 14731 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-16397.05, 256586.9] x [2252051.1, 2987342.4] units\n\n\ncheck ppp object\n\nsummary(mnd_q_ppp)\n\nMarked planar point pattern:  14731 points\nAverage intensity 7.33898e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.661  11.000  14.000 \n\nWindow: rectangle = [-16397.05, 256586.9] x [2252051.1, 2987342.4] units\n                    (273000 x 735300 units)\nWindow area = 2.00723e+11 square units\n\n\n\nany(duplicated(mnd_q_ppp))\n\n[1] TRUE\n\n\n\nmnd_jit &lt;- rjitter(mnd_q_ppp, retry=TRUE, nsim=1, drop=TRUE)\n\n\nany(duplicated(mnd_jit))\n\n[1] FALSE\n\n\n\nmnd_q_owin &lt;- mnd_jit[mnd_owin]\nsummary(mnd_q_owin)\n\nMarked planar point pattern:  14730 points\nAverage intensity 1.179593e-07 points per square unit\n\nCoordinates are given to 14 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   7.000   7.662  11.000  14.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 9626 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2234807.4, 3029739.1] units\n                     (326000 x 794900 units)\nWindow area = 1.24874e+11 square units\nFraction of frame area: 0.482\n\n\n\nstkde_mnd &lt;- spattemp.density(mnd_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(stkde_mnd)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 16409.39 (spatial)\n  lambda = 0.0112 (temporal)\n\nNo. of observations\n  14730 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2234807, 3029739]\n\nTemporal bound\n  [1, 14]\n\nEvaluation\n  128 x 128 x 14 trivariate lattice\n  Density range: [4.722011e-94, 2.500945e-10]\n\n\n\nqs &lt;- c(1,2)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(3,4)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(5,6)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(7,8)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(9,10)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(11,12)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\n\nqs &lt;- c(13,14)\npar(mfcol= c(1,2))\nfor( i in qs){\n  plot(stkde_mnd, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main =  paste(\"STKDE at Q\", i))\n}\n\n\n\n\n\n\n\n\nG Function\n\nG_ms = Gest(mnd_jit, correction = \"border\")\nplot(G_ms, xlim =c(0,500))\n\n\n\n\n\n\n\n\n\nG_ms.csr &lt;- envelope(mnd_jit, Gest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(G_ms.csr)\n\n\n\n\n\n\n\n\nF Function\n\nF_ms = Fest(mnd_jit)\nplot(F_ms)\n\n\n\n\n\n\n\n\n\nF_ms.csr &lt;- envelope(mnd_jit, Fest, nsim = 100)\n\nGenerating 100 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, \n100.\n\nDone.\n\n\n\nplot(F_ms.csr)"
  },
  {
    "objectID": "THE/THE1/takehome1.html#words-of-wisdom",
    "href": "THE/THE1/takehome1.html#words-of-wisdom",
    "title": "Takehome 1",
    "section": "",
    "text": "After researching into the reasons behind the conflicts in Myanmar, a few key actors have become apparent to me:\n\nThe Tatmadaw (Myanman Military), who started the coup in Febuary 2021,\nThe Three Brotherhood Alliance(TBA), consisting of the Arakan Army(AA), Myanmar National Democratic Alliance Army(MDNAA), and the Ta’ang National Liberation Army(TNLA) formed in June 2019,\nThe Karen National Union(KNU), and by extent its armed force the Karen National Liberation Army(KNLA), a group that represents the Karen minority in Myanmar, who have been in conflict with the Myanmar government since 1949.\n\nThe bulk of the fighting in the central regions of Myanmar can be attributed to clashes between the Three Brotherhood Alliance and the Tatmadaw, after the TBA voiced opposition to the Tatmadaw on March 29, 2021. Specifically in Rakhine, the AA used the first peace in years to gain control over most of Rakhine state, declaring in August that they controlled over two-thirds of the state.\nThe big spike in action in late 2023 is caused by Operation 1027, a massive offensive in northern Shan state on October 27, 2023.\nDown south in Kayin, tensions between the KNU and the Tatmadaw increased following the coup, leading to hostilities and conflict."
  },
  {
    "objectID": "ICE/ex4/ice4.html",
    "href": "ICE/ex4/ice4.html",
    "title": "ICE 4",
    "section": "",
    "text": "#SpatioTemporalPointPatternAnalysis\nA spatio-temporal point process is a random collection of points, where each point represents the time and location of an event."
  },
  {
    "objectID": "ICE/ex4/ice4.html#installlaunch-r",
    "href": "ICE/ex4/ice4.html#installlaunch-r",
    "title": "ICE 4",
    "section": "Install/Launch R",
    "text": "Install/Launch R\nforest fire or something\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse, gifski, animation)"
  },
  {
    "objectID": "ICE/ex4/ice4.html#import-the-data",
    "href": "ICE/ex4/ice4.html#import-the-data",
    "title": "ICE 4",
    "section": "Import the data",
    "text": "Import the data\n\nkbb &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\")\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\nconvert kbb to owin object\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\ncheck owin\n\nclass(kbb_owin)\n\n[1] \"owin\"\n\n\nForest Fire data\n\nfire_sf &lt;- read.csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32748)\n\n\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayOfYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;%\n  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE))\n\nPlotting map showing the distribution of fire points\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots()\n\n\n\n\n\n\n\n\nPlotting map showing the distribution of fire points by month\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots(size = 0.1) + tm_facets(by = \"Month_fac\", free.coords = FALSE, drop.units = TRUE) \n\n\n\n\n\n\n\n\n##Compute STKDE ###By Month\n\nfire_month &lt;- fire_sf %&gt;%\n  select(Month_num)\n\nmake ppp object\n\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\ncheck ppp object\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\ncheck for duplicated points\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\n\ncombine ppp w owin\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\nplotting STKDE by last 6 months\n\ntims &lt;- c(7,8,9,10,11,12)\npar(mfcol = c(2,3))\nfor(i in tims){\n  plot(st_kde, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main = paste(\"KDE at month\", i))\n}\n\n\n\n\n\n\n\n\n###By Day create ppp object\n\nfire_yday_ppp &lt;- fire_sf %&gt;%\n  select(DayOfYear) %&gt;%\n  as.ppp()\n\ncombine ppp and owin\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nkde_yday &lt;- spattemp.density(fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\n\n#plot(kde_yday)\n\n\nlibrary(animation)\nlibrary(spatstat)\n\ndata(fmd)\nfmd_case &lt;- fmd$cases\nfmd_cont &lt;- fmd$controls\n\n# Estimate bandwidths and create density/risk maps\nhlam &lt;- LIK.spattemp(fmd_case)\n\nh = 5.86446 \b; lambda = 5.535485 \nh = 6.450906 \b; lambda = 5.535485 \nh = 5.86446 \b; lambda = 6.121931 \nh = 5.278014 \b; lambda = 6.121931 \nh = 4.691568 \b; lambda = 6.415154 \nh = 4.691568 \b; lambda = 7.0016 \nh = 4.105122 \b; lambda = 7.734658 \nh = 2.93223 \b; lambda = 8.027881 \nh = 1.466115 \b; lambda = 8.980855 \nh = 2.345784 \b; lambda = 9.347384 \nh = 2.93223 \b; lambda = 8.614327 \nh = 1.759338 \b; lambda = 8.90755 \nh = 3.518676 \b; lambda = 8.027881 \nh = 2.345784 \b; lambda = 8.614327 \nh = 3.225453 \b; lambda = 8.174492 \nh = 2.639007 \b; lambda = 8.467715 \nh = 3.078841 \b; lambda = 8.247798 \nh = 3.078841 \b; lambda = 8.834244 \nh = 3.042189 \b; lambda = 8.632653 \nh = 2.895577 \b; lambda = 8.999182 \nh = 2.803945 \b; lambda = 9.374874 \nh = 2.785618 \b; lambda = 8.980855 \nh = 2.978046 \b; lambda = 8.719704 \nh = 2.849761 \b; lambda = 8.893805 \nh = 2.945975 \b; lambda = 8.763229 \nh = 2.909322 \b; lambda = 9.148084 \nh = 2.926503 \b; lambda = 8.747766 \nh = 2.976901 \b; lambda = 8.511813 \nh = 2.915908 \b; lambda = 8.87734 \nh = 2.896436 \b; lambda = 8.861877 \nh = 2.908821 \b; lambda = 8.837215 \nh = 2.898226 \b; lambda = 8.966788 \nh = 2.919434 \b; lambda = 8.802521 \nh = 2.912346 \b; lambda = 8.762397 \nh = 2.915018 \b; lambda = 8.848604 \nh = 2.92563 \b; lambda = 8.813911 \nh = 2.934035 \b; lambda = 8.802259 \nh = 2.930047 \b; lambda = 8.767828 \nh = 2.918775 \b; lambda = 8.82841 \nh = 2.924972 \b; lambda = 8.839799 \nh = 2.923587 \b; lambda = 8.83048 \nh = 2.916731 \b; lambda = 8.844979 \nh = 2.923406 \b; lambda = 8.821678 \n\nf.breve &lt;- spattemp.density(fmd_case, h=hlam[1], lambda=hlam[2], tlim=c(10, 352))\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ng.tilde &lt;- bivariate.density(fmd_cont, h0=hlam[1])\nrho.breve &lt;- spattemp.risk(f=f.breve, g=g.tilde, tolerate=TRUE)\n\nCalculating ratio...Done.\nEnsuring finiteness...\n   --joint--\n   --conditional--\nDone.\nCalculating tolerance contours...\n   --convolution 1--\n   --convolution 2--\nDone.\n\n\n\n# Set up color map\ncolpal &lt;- spatstat.options(\"image.colfun\")\n\n# Adjust the color map accordingly\nfmdcolours &lt;- colourmap(colpal(320), breaks=c(-80, seq(-7,4,length=320)))\n\n# Time range for KDE plot\nmytimes &lt;- 10:352\n\n# Save the animation as a GIF\nanimation::saveGIF(\n  for (i in 1:length(mytimes)) {\n    # Plot KDE with time selection\n    plot(rho.breve, tselect=mytimes[i], type=\"conditional\", col=fmdcolours,\n         tol.args=list(levels=c(0.05, 0.0001), lty=2:1, drawlabels=FALSE),\n         sleep=0, override.par=FALSE, fix.range=TRUE)\n    title(xlab=\"Easting\", ylab=\"Northing\")\n  },\n  movie.name=\"fmd_updated.gif\", ani.width=640, ani.height=640, interval=1/12\n)\n\nOutput at: fmd_updated.gif\n\n\n[1] TRUE"
  },
  {
    "objectID": "ICE/ex2/ice2.html",
    "href": "ICE/ex2/ice2.html",
    "title": "ICE 2",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, tmap)\n\n\nmpsz14_shp &lt;- st_read(dsn = \"data/\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nmpsz14_kml &lt;- st_write(mpsz14_shp, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;% st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex2\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\ncheck the coordinate system\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\npopdata &lt;- read.csv(\"data/respopagesextod2023.csv\")\n\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;% \n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = list(toupper))\n\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, by = c(\"SZ\" = \"SUBZONE_N\"))\n\n\nmpsz_pop2023 &lt;- left_join(mpsz19_shp, popdata2023, by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "HOE/ex5/ex5.html",
    "href": "HOE/ex5/ex5.html",
    "title": "Ex5",
    "section": "",
    "text": "This exercise uses the R packages sf, spdep, tmap, tidyverse.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\nhunan  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nJoin the dataframes together:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\nVisualise regional development indicator:\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nCreate Queen contiguity weight matrices: (all directions)\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe data above reveals 88 area units in Hunan. THe most connected area unit has 11 neighbors, whilst there are 2 area units with only a single neighbour.\nUse wm_q to list all neighboring polygons of a specific polygon:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe code shows that polygon 1 has 5 neighbors; 2, 3, 4, 57, 85. Retrieve the county name and its neighbors:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nGet the GDPPC of these counties:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplay the complete weight matrix:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nCompute the Rook contiguity weight matrix: (NSEW)\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThis method shows that within the 88 counties, the most connected area unit has 10 neighbors, whilst there are 2 area units with only a single neighbour.\nVisualise contiguity weights:\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nInput the coordinates into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlot a comparison between Queen and Rook based Neighbours Map:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\ndnearneigh() identifies the neighbors of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If the unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\nDetermine the upper limit for distance by:\n\nGetting a matrix of the indices of points from the set of the k-nearest neighbors,\nConvert the matrix into a neighbors list of nb class,\nUse nbdists to get the length of neighbor relationship edges. If projected, return coordinate pairs, else km,\nRemove the list structure using unlist\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nCompute fixed distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlot fixed distance weight matrix:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbors and the black lines show the links of neighbors within the cut-off distance of 62km.\nSplitting the plots for clarity:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nOne characteristic of fixed distance weight matrix is that settlement density and neighbor count are positively correlated. Having many neighbors smoothes the neighbor relationship across more neighbors.\nIt is possible to control the number of neighbors directly using k-nearest neighbors, either by accepting asymmetric neighbors or imposing symmetry as shown below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nPlot the weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nIDW is a type of deterministic interpolation method used to estimate values at unsampled locations based on the values of nearby sampled points.\nDerive the spatial weight matrix based on IDW:\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\nRow-standardised weight matrix\nAssign equal weights with W, and assign weights as 1/x, where x is the num of neighbors.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nCheck the weights of the first polygon’s 8 neighbors:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nDerive the row standardised distance weight matrix:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nShow weights:\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\nSpatially lagged values\nCompute the average neighbor GDPPC value for each polygon:\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppend the values onto the hunan dataframe\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot both the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nSpatial lag can be calculated as a sum of neighboring values by assigning binary weights. Assign a value of 1 per neighbor:\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute lag variable from weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppend lag_sum onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nPlot GDPPC and Spatial Lag Sum GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nShow neighbor list of area 1:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n[1] now has 6 neighbors from 5.\nObtain the weights:\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nCreate lag variable from weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nConvert lag variable listw to dataframe:\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppend values onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag GDPPC and spatial window average values:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_gdppc and w_avg_gdppc maps for comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nAssing binary weights to the neighbor structure that includes the diagonal element:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nAssign weight values:\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nCompute lag variable:\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nConvert lag listw to dataframe\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppend w_sum GDPPC to hunan dataframe:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag_sum GDPPC and w_sum GDPPC values:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_sum gdppc and w_sum_gdppc maps for comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "HOE/ex5/ex5.html#installlaunch-r-packages",
    "href": "HOE/ex5/ex5.html#installlaunch-r-packages",
    "title": "Ex5",
    "section": "",
    "text": "This exercise uses the R packages sf, spdep, tmap, tidyverse.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "HOE/ex5/ex5.html#import-data",
    "href": "HOE/ex5/ex5.html#import-data",
    "title": "Ex5",
    "section": "",
    "text": "hunan  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nJoin the dataframes together:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\nVisualise regional development indicator:\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "HOE/ex5/ex5.html#contiguity-spatial-weights",
    "href": "HOE/ex5/ex5.html#contiguity-spatial-weights",
    "title": "Ex5",
    "section": "",
    "text": "Create Queen contiguity weight matrices: (all directions)\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe data above reveals 88 area units in Hunan. THe most connected area unit has 11 neighbors, whilst there are 2 area units with only a single neighbour.\nUse wm_q to list all neighboring polygons of a specific polygon:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe code shows that polygon 1 has 5 neighbors; 2, 3, 4, 57, 85. Retrieve the county name and its neighbors:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nGet the GDPPC of these counties:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplay the complete weight matrix:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nCompute the Rook contiguity weight matrix: (NSEW)\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThis method shows that within the 88 counties, the most connected area unit has 10 neighbors, whilst there are 2 area units with only a single neighbour.\nVisualise contiguity weights:\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nInput the coordinates into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlot a comparison between Queen and Rook based Neighbours Map:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "HOE/ex5/ex5.html#computing-distance-based-neighbors",
    "href": "HOE/ex5/ex5.html#computing-distance-based-neighbors",
    "title": "Ex5",
    "section": "",
    "text": "dnearneigh() identifies the neighbors of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If the unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\nDetermine the upper limit for distance by:\n\nGetting a matrix of the indices of points from the set of the k-nearest neighbors,\nConvert the matrix into a neighbors list of nb class,\nUse nbdists to get the length of neighbor relationship edges. If projected, return coordinate pairs, else km,\nRemove the list structure using unlist\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nCompute fixed distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlot fixed distance weight matrix:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbors and the black lines show the links of neighbors within the cut-off distance of 62km.\nSplitting the plots for clarity:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nOne characteristic of fixed distance weight matrix is that settlement density and neighbor count are positively correlated. Having many neighbors smoothes the neighbor relationship across more neighbors.\nIt is possible to control the number of neighbors directly using k-nearest neighbors, either by accepting asymmetric neighbors or imposing symmetry as shown below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nPlot the weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "HOE/ex5/ex5.html#weights-based-on-inverse-distance-weighting.",
    "href": "HOE/ex5/ex5.html#weights-based-on-inverse-distance-weighting.",
    "title": "Ex5",
    "section": "",
    "text": "IDW is a type of deterministic interpolation method used to estimate values at unsampled locations based on the values of nearby sampled points.\nDerive the spatial weight matrix based on IDW:\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\nRow-standardised weight matrix\nAssign equal weights with W, and assign weights as 1/x, where x is the num of neighbors.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nCheck the weights of the first polygon’s 8 neighbors:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nDerive the row standardised distance weight matrix:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nShow weights:\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "HOE/ex5/ex5.html#spatial-weight-matrix-applications",
    "href": "HOE/ex5/ex5.html#spatial-weight-matrix-applications",
    "title": "Ex5",
    "section": "",
    "text": "Spatially lagged values\nCompute the average neighbor GDPPC value for each polygon:\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppend the values onto the hunan dataframe\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot both the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nSpatial lag can be calculated as a sum of neighboring values by assigning binary weights. Assign a value of 1 per neighbor:\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute lag variable from weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppend lag_sum onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nPlot GDPPC and Spatial Lag Sum GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nShow neighbor list of area 1:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n[1] now has 6 neighbors from 5.\nObtain the weights:\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nCreate lag variable from weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nConvert lag variable listw to dataframe:\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppend values onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag GDPPC and spatial window average values:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_gdppc and w_avg_gdppc maps for comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nAssing binary weights to the neighbor structure that includes the diagonal element:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nAssign weight values:\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nCompute lag variable:\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nConvert lag listw to dataframe\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppend w_sum GDPPC to hunan dataframe:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag_sum GDPPC and w_sum GDPPC values:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_sum gdppc and w_sum_gdppc maps for comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "HOE/ex3/ex3.html",
    "href": "HOE/ex3/ex3.html",
    "title": "Exercise 3",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the distribution of a set of points on a surface. THe points can represent the location of events (crime occurences, accidents), or physical facilities (FnB outlets, healthcare clinics).\nThis exercise uses spatstat functions to discover the spatial point processes of childcare centers in Singapore, and seeks to answer the following:\n\nAre childcare centers in Singapore randomly distributed throughout the country?\nIf not, where are the locations with a higher concentration of childcare centers?\n\n\n\nThis exercise uses the R packages tmap, sf, tidyverse, raster, and spatstat.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/pwnyt/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\pwnyt\\AppData\\Local\\Temp\\Rtmpmm3M3E\\downloaded_packages\n\n\n\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)\n\n\n\n\nDownload the following:\n\nChildcare Services (GeoJSON)\nMaster Plan 2014 Subzone Boundary Data\nCostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\nchildcare_sf&lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% st_transform( crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex3\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex3\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex3\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nNext, we need to project the dataframes in the same projection system.\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n\nPlot the datasets to observe the spatial patterns.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nCreate an alternative interactive pin map using the code below:\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data Wrangling\nConvert sf dataframes to sp’s Spatial* class\nThe code below uses as_Spatial() from the sf package to convert the three geospatial data from a simple dataframe to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nCheck the conversion:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nConvert Spatial* into generic sp format\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nDisplaying the sp objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nConvert sp format into spatstat’s ppp format\n\n#win &lt;- as.owin(childcare_sp)\nchildcare_ppp1 &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp1\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n#cant get this to work, look later\n\nalternatively use the below to convert from sf into ppp format\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\nLooking at the data plot and statistics summary of the ppp object, we can see that both methods result in identical results.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nplot(childcare_ppp1)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp1)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\nThe code below can check the duplication in ppp:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nTo know the number of locations that have more than one point event, run the code below:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe code below plots out the locations of the duplicate point events:\n\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\nchildcare_ppp &lt;- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nChecking the summary information:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n\n\n\n\n\nThe density() function from spatstat computes a kernal density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density.\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n290.1203 \n\n\nRescale the KDE Layers to convert the unit of measurement from m to km.\n\nchildcareSG_ppp_km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw &lt;- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe resultant plot is much more legible.\nMultiple bandwidth calculation methods are available from spatstat, some of which are covered below: Cronie and van Lieshout\n\nbw.CvL(childcareSG_ppp_km)\n\n   sigma \n4.664967 \n\n\n\nkde_childcareSG_bw_CvL &lt;- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n\nScott’s Rule\n\nbw.scott(childcareSG_ppp_km)\n\n sigma.x  sigma.y \n2.224705 1.451138 \n\n\n\nkde_childcareSG_bw_scott &lt;- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n\nLikelihood Cross Validation\n\nbw.ppl(childcareSG_ppp_km)\n\n    sigma \n0.4145034 \n\n\n\nkde_childcareSG_bw_ppl &lt;- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n\nThe plot below compares the above 3 methods with diggle\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nDifferent smoothing methods are also available.\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\nkde_childcareSG_adapt &lt;- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n\nComparing the two:\n\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n\n\n\n\n\n\n\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -9.734652e-15, 29.06721  (min, max)\n\n\nSet the CRS:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -9.734652e-15, 29.06721  (min, max)\n\n\nDisplay the KDE raster layer:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nTHe code below extracts the targeted planning areas:\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConvert these SpatialPolygon objects into owin objects:\n\npg_owin &lt;- as.owin(pg)\ntm_owin &lt;- as.owin(tm)\nck_owin &lt;- as.owin(ck)\njw_owin &lt;- as.owin(jw)\n\nExtract the childcare centre points within each of the study planning areas:\n\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n\nRescale from m to km:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot out the individual areas overlaid with their childcare centres:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE, using diggle to derive the bandwidth:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n\n\n\n\n\n\n\n\n\n\n\nPerform the Clark-Evans test of aggregation:\n\nH0: Random distribution of childcare centres\nH1: Non-Random distribution of childcare centres\n\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.56222, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nPerforming the same test on the target planning areas:\nTampines\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.7738, p-value = 2.228e-05\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93749, p-value = 0.1752\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &gt; 0.05, H0 cannot be rejected.\nPunggol\n\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.92455, p-value = 0.1298\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\nJurong West\n\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.92209, p-value = 0.08103\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\n\n\n\nThe G function measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nF function on the Choa Chu Kang area:\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nF function on the Tampines area:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\nThe K function measures the number of events found up to a given distance of any particular event.\nK function on the Choa Chu Kang area:\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nK function on the Tampines area:\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe L function is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\nL function on the Choa Chu Kang area:\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nL function on the Tampines area:\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "HOE/ex3/ex3.html#installlaunch-r-packages",
    "href": "HOE/ex3/ex3.html#installlaunch-r-packages",
    "title": "Exercise 3",
    "section": "",
    "text": "This exercise uses the R packages tmap, sf, tidyverse, raster, and spatstat.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/pwnyt/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\pwnyt\\AppData\\Local\\Temp\\Rtmpmm3M3E\\downloaded_packages\n\n\n\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)"
  },
  {
    "objectID": "HOE/ex3/ex3.html#download-and-import-data",
    "href": "HOE/ex3/ex3.html#download-and-import-data",
    "title": "Exercise 3",
    "section": "",
    "text": "Download the following:\n\nChildcare Services (GeoJSON)\nMaster Plan 2014 Subzone Boundary Data\nCostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\nchildcare_sf&lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% st_transform( crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex3\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex3\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex3\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nNext, we need to project the dataframes in the same projection system.\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n\nPlot the datasets to observe the spatial patterns.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nCreate an alternative interactive pin map using the code below:\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data Wrangling\nConvert sf dataframes to sp’s Spatial* class\nThe code below uses as_Spatial() from the sf package to convert the three geospatial data from a simple dataframe to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nCheck the conversion:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nConvert Spatial* into generic sp format\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nDisplaying the sp objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nConvert sp format into spatstat’s ppp format\n\n#win &lt;- as.owin(childcare_sp)\nchildcare_ppp1 &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp1\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n#cant get this to work, look later\n\nalternatively use the below to convert from sf into ppp format\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\nLooking at the data plot and statistics summary of the ppp object, we can see that both methods result in identical results.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nplot(childcare_ppp1)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp1)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\nThe code below can check the duplication in ppp:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nTo know the number of locations that have more than one point event, run the code below:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe code below plots out the locations of the duplicate point events:\n\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\nchildcare_ppp &lt;- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nChecking the summary information:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "HOE/ex3/ex3.html#st-order-spatial-point-pattern-analysis",
    "href": "HOE/ex3/ex3.html#st-order-spatial-point-pattern-analysis",
    "title": "Exercise 3",
    "section": "",
    "text": "The density() function from spatstat computes a kernal density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density.\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n290.1203 \n\n\nRescale the KDE Layers to convert the unit of measurement from m to km.\n\nchildcareSG_ppp_km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw &lt;- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe resultant plot is much more legible.\nMultiple bandwidth calculation methods are available from spatstat, some of which are covered below: Cronie and van Lieshout\n\nbw.CvL(childcareSG_ppp_km)\n\n   sigma \n4.664967 \n\n\n\nkde_childcareSG_bw_CvL &lt;- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n\nScott’s Rule\n\nbw.scott(childcareSG_ppp_km)\n\n sigma.x  sigma.y \n2.224705 1.451138 \n\n\n\nkde_childcareSG_bw_scott &lt;- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n\nLikelihood Cross Validation\n\nbw.ppl(childcareSG_ppp_km)\n\n    sigma \n0.4145034 \n\n\n\nkde_childcareSG_bw_ppl &lt;- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n\nThe plot below compares the above 3 methods with diggle\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nDifferent smoothing methods are also available.\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\nkde_childcareSG_adapt &lt;- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n\nComparing the two:\n\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n\n\n\n\n\n\n\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -9.734652e-15, 29.06721  (min, max)\n\n\nSet the CRS:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -9.734652e-15, 29.06721  (min, max)\n\n\nDisplay the KDE raster layer:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nTHe code below extracts the targeted planning areas:\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConvert these SpatialPolygon objects into owin objects:\n\npg_owin &lt;- as.owin(pg)\ntm_owin &lt;- as.owin(tm)\nck_owin &lt;- as.owin(ck)\njw_owin &lt;- as.owin(jw)\n\nExtract the childcare centre points within each of the study planning areas:\n\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n\nRescale from m to km:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot out the individual areas overlaid with their childcare centres:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE, using diggle to derive the bandwidth:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "HOE/ex3/ex3.html#nearest-neighbour-analysis",
    "href": "HOE/ex3/ex3.html#nearest-neighbour-analysis",
    "title": "Exercise 3",
    "section": "",
    "text": "Perform the Clark-Evans test of aggregation:\n\nH0: Random distribution of childcare centres\nH1: Non-Random distribution of childcare centres\n\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.56222, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nPerforming the same test on the target planning areas:\nTampines\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.7738, p-value = 2.228e-05\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93749, p-value = 0.1752\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &gt; 0.05, H0 cannot be rejected.\nPunggol\n\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.92455, p-value = 0.1298\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\nJurong West\n\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.92209, p-value = 0.08103\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected."
  },
  {
    "objectID": "HOE/ex3/ex3.html#nd-order-spatial-point-pattern-analysis",
    "href": "HOE/ex3/ex3.html#nd-order-spatial-point-pattern-analysis",
    "title": "Exercise 3",
    "section": "",
    "text": "The G function measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nF function on the Choa Chu Kang area:\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nF function on the Tampines area:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\nThe K function measures the number of events found up to a given distance of any particular event.\nK function on the Choa Chu Kang area:\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nK function on the Tampines area:\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe L function is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\nL function on the Choa Chu Kang area:\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nL function on the Tampines area:\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "HOE/ex1/ex1.html",
    "href": "HOE/ex1/ex1.html",
    "title": "Exercise 1",
    "section": "",
    "text": "Getting Started"
  },
  {
    "objectID": "HOE/ex1/ex1.html#installlaunch-r-packages",
    "href": "HOE/ex1/ex1.html#installlaunch-r-packages",
    "title": "Exercise 1",
    "section": "Install/Launch R Packages",
    "text": "Install/Launch R Packages\nThis exercise uses the R packages sf and tidyverse.\n\nsf imports, manages and processes geospatial data\ntidyverse wrangles and visualises said data\n\nUse p_load to install the packages into the environment:\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "HOE/ex1/ex1.html#download-and-import-data",
    "href": "HOE/ex1/ex1.html#download-and-import-data",
    "title": "Exercise 1",
    "section": "Download and Import Data",
    "text": "Download and Import Data\nDownload the following:\nPre-Schools Location Data\nMaster Plan 2014 Subzone Boundary Data\nLTA Cycling Path Data\nSingapore Airbnb Listing Data\nInside the Ex1 folder, create a subfolder called data, and within that create 2 two more subfolders named geospatial and aspatial respectively.\nUsing st_read(), import the following geospatial data into R:\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThis code uses the st_read() function from sf to import the MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature dataframe. It shows that there are a total of 323 multipolygon features and 15 fields, in the svy21 projected coordinates system.\nNext, import the CyclingPathGazette data:\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThis code imports the CyclingPathGazette shapefile into R as a line feature dataframe. It reveals that there are 2558 features and 2 fields, and is similarly in the the svy21 projected coordinates system.\nLastly, import the PreSchoolsLocations data:\n\npreschool = st_read(dsn = \"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThis code indicates that it is in a point feature dataframe, containing 2290 features and 2 fields. It is in the wgs84 coordinates system, contrary to the previous two dataframes.\nFor the aspatial data, it must first be imported into a tibble dataframe, then converted into a simple feature dataframe.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output shows that the listings tibble dataframe contains 3450 rows and 18 columns.\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nThis code converts the listings tibble dataframe into a simple feature dataframe.\n\ncoords argument requiresthe column name of the x-coordinates first then followed by the column name of the y-coordinates\ncrs argument requiresthe coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System, and EPSG: 3414 is Singapore svy21 Projected Coordinate System\n%&gt;% is used to nest st_transform() to transform the newly created simple feature dataframe into svy21 projected coordinates system."
  },
  {
    "objectID": "HOE/ex1/ex1.html#checking-dataframe-content",
    "href": "HOE/ex1/ex1.html#checking-dataframe-content",
    "title": "Exercise 1",
    "section": "Checking Dataframe Content",
    "text": "Checking Dataframe Content\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nst_geometry() prints and displays the basic information of the feature class, such as the type of geometry, the geographic extent of the features, and the coordinate system of the data.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() reveals the data type of each field.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nhead() shows the complete information of a feature object."
  },
  {
    "objectID": "HOE/ex1/ex1.html#plotting-geospatial-data",
    "href": "HOE/ex1/ex1.html#plotting-geospatial-data",
    "title": "Exercise 1",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nVisualising geospatial features is important. By running the following code:\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nplot() shows the default plot of an sf object, a multiplot of all attributes.\nTo plot only the geometry, run:"
  },
  {
    "objectID": "HOE/ex1/ex1.html#r",
    "href": "HOE/ex1/ex1.html#r",
    "title": "Exercise 1",
    "section": "{r}",
    "text": "{r}\nplot(st_geometry(mpsz))\nTo plot a specific attribute, run:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "HOE/ex1/ex1.html#projection",
    "href": "HOE/ex1/ex1.html#projection",
    "title": "Exercise 1",
    "section": "Projection",
    "text": "Projection\n~sometimes i project my insecurities onto other people~\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nOne issue that can occur during data importing is that the coordinate system of the source data was either missing or wrongly assigned. An example can be seen below:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe mpsz dataframe is projected in svy21, bur the print shows that EPSG is 9001, different from the correct EPSG code of 3414.\nTo assign the correct EPSG code, use the following code:\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nCheck the CSR again:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nThe EPSG code is now correctly showing 3414.\nIn geospatial analytics, it is very common to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis needs to use distance or area measurements.\nAs stated before, the preschool dataframe is in the wgs84 coordinate system.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nPeform projection transformation on the preschool dataframe using the code below:\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)\n\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\nDisplaying the projected dataframe shows that it is now in the svy21 coordinate system."
  },
  {
    "objectID": "HOE/ex1/ex1.html#geoprocessing-using-sf",
    "href": "HOE/ex1/ex1.html#geoprocessing-using-sf",
    "title": "Exercise 1",
    "section": "Geoprocessing using sf",
    "text": "Geoprocessing using sf\nThe sf package also provides a wide range of geoprocessing functions.\n\nBuffering\nImagine a scenario where the authorities are planning upgrades to the existing cycling network, and require the acquisition of 5m of land on both sides of the current paths.\nUsing st_buffer(), we can compute the 5m buffer zone:\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist = 5, nQuadSegs=30)\n\nNext, calculate the area of the buffer:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\nPoint-in-Polygon count\nImagine another scenario where the numbers of preschools in each Planning Subzone needs to be found out.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nThis code first identifies preschools located inside each Planning Subzone using st_intersects(), then uses length() to calculate the number of preschools in each Planning Subzone.\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo show the Subzone with the most preschools, run:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of preschools within each Subzone, run:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "HOE/ex1/ex1.html#eda",
    "href": "HOE/ex1/ex1.html#eda",
    "title": "Exercise 1",
    "section": "EDA",
    "text": "EDA\nIn practice, many geospatial analytics start with Exploratory Data Analysis.\nPlot a histogram to reveal the distribution of PreSchDensity.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nThis outputs a simple, but functional histogram. To improve the quality of the histogram, run the following:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with only a single pre-school, \\non the other hand, there are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nTo plot a scatterplot showing the relationship between PreSchDensity and PreSchCount, run the following:\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "HOE/ex2/ex2.html",
    "href": "HOE/ex2/ex2.html",
    "title": "Exercise 2",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise properties of geographic features that are not naturally visible, a few examples being population, temperature, and crime rate.\nOn the other hand, geovisualisation works by providing graphical ideation to render a place, phenomenon, or process visible, allowing us to utilise our vision to process information.\n\n\n\nThis exercise uses the R packages tmap, sf and tidyverse.\n\npacman::p_load(sf,tmap,tidyverse)\n\n\n\n\nDownload the following:\nMaster Plan 2014 Subzone Boundary Data\nSingapore Residents by Planning Are / Subzone, Age Group, Sex, and Dwelling\nUsing st_read(), import the following geospatial data into R:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNext, import the aspatial data and save it into an R dataframe:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Preparation\nBefore a thematic map can be made, a data table with 2020 values needs to prepared. The data table should include the following:\n\nYOUNG: Age groups 0-4 until 20-24\nECONOMY ACTIVE: Age groups 25-29 until 60-64\nAGED: Age group 65+\nTOTAL: All age groups\nDEPENDENCY: the ratio between the YOUNG and AGED ages groups against the ECONOMY ACTIVE age groups\n\nPerform data wrangling and transformation using the code below:\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %&gt;%\n  mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nBefore we can perform the georelational join, one extra step is needed to convert the values in PA and SZ into uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() is used to join the geographical data and attribute table using planning and subzone name as the common identifiers.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nSave the joined data in a file:\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")\n\n\n\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties, or census units, using area patterns or graduated colors. Two approaches can be used to prepare thematic maps using tmap:\n\nPlotting qucikly using qtm()\nPlotting highly customisable thematic maps by using tmap elements\n\nThe easiest way to draw a choropleth map using tmap is by using qtm(), which provides a concise default visualisation in many cases.\nThe code below draws a cartographic standard choropleth map:\n\ntmap_mode() with “plot” option produces a static map, “view” produces an interactive map.\n“fill” argument is used to map the attribute.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWhilst fast and simple to use, the disadvantage of qtm() is that it makes the aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, use tmap’s drawing elements.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency Ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type = \"8star\", size = 2) + tm_scale_bar() + tm_grid(alpha = 0.2) + tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nLet’s break down this block of code into its subfunctions:\ntm_shape() is used to define the input data, and tm_polygons is used to draw out the Planning Subzones:\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable to tm_polygons():\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nIn actuality, tm_polygons() is a wrapper function of tm_fill() and tm_border(). tm_fill() shades the polygons according to the default colorscheme, while tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code below only uses tm_fill() to draw a choropleth map:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundaries of the Planning Subzones, tm_borders() will be used:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\nThe alpha argument is used to define transparency using a value between 0 (transparent) and 1 (opaque). By default, the alpha value of the col is used (usually 1).\nBesides alpha, there are three other arguments for tm_borders():\n\ncol -&gt; border color,\nlwd -&gt; borderline width, default 1,\nlty -&gt; borderline type, default “solid’ .\n\nMost choropleth maps employ data classification methods. Classification takes large number of observations and groups them into data ranges.\ntmap provides a total of ten data classification methods, shown below:\n\nfixed\nsd\nequal\npretty\nquantile (grouping by quantile)\nkmeans (kmeans clustering)\nhclust (hierarchical clustering)\nbclust (bagged clustering)\nfisher (fisher method)\njenks (jenks optimization)\n\nTo define a data classification method, the style argument tm_fill() or tm_polygon will be used.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below uses the equal classification method.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe distribution of the data using the quantile data classification method is more evenly distributed than the equal data classification method.\nusing jenks\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing fisher\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"fisher\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing kmeans\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"kmeans\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 2\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 2, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 10\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 10, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 20\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 20, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nFor all the inbuilt styles, the category breaks are computed internally. In order to override the default parameters, the breakpoints can be set explicitly using the breaks argument to tm_fill(). In tmap, the breaks include a minimum and maximum. As such, n+1 elements must be specified to create n categories.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nUsing the above results as reference, we set the breakpoints at .6, .7, .8, and .9. With the addition of the min and max breakpoints, the breaks vector is c(0, 0.6, 0.7, 0.8, 0.9, 1).\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00, 19)) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap supports color ramps either defined by the user, or from a prebuilt set from the RColorBrewer package.\nAssigning the preferred color to the palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nReverse the color shading using “-”\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include the title, scale bar, compass, margins, and aspect ratios.\nIn tmap, several legend options are provided to change the placement, format, and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed, whcih can be called using tmap_style()\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw map features such as compass, scale bar, and grid lines.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type=\"8star\", size = 2) + tm_scale_bar(width = 0.15) + tm_grid(lwd = 0.1, alpha = 0.2) + tm_credits(\"sajdad\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nReset the default style using the code below:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nFacet maps are composed of multiple small maps arranged adjacently, and enable the visualisation of how spatial relationships change with respect to another variable, such as time.\ntmap allows facet maps to be plotted in 3 ways:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets(),\nby creating multiple stand-alone maps using tmap_arrange()\n\nThe code below creates facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\", \"bottom\")) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by assigning multiple value to at least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\", \"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\", \"Greens\")) + tm_layout(legend.position =  c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_facets():\n\ntm_shape(mpsz_pop2020) +  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette =  \"Blues\", thres.poly = 0) + tm_facets(by=\"REGION_N\", free.coords = TRUE, drop.units = TRUE) + tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_arrange():\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"YOUNG\", style = \"quantile\", palette = \"Blues\")\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nInstead of creating a facet map, the selection function can be used to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) + tm_layout(legend.outside = TRUE, legend.outside.size = 0.2, legend.outside.position = c(\"right\", \"bottom\"), frame = FALSE) + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HOE/ex2/ex2.html#overview",
    "href": "HOE/ex2/ex2.html#overview",
    "title": "Exercise 2",
    "section": "",
    "text": "Thematic mapping involves the use of map symbols to visualise properties of geographic features that are not naturally visible, a few examples being population, temperature, and crime rate.\nOn the other hand, geovisualisation works by providing graphical ideation to render a place, phenomenon, or process visible, allowing us to utilise our vision to process information."
  },
  {
    "objectID": "HOE/ex2/ex2.html#installlaunch-r-packages",
    "href": "HOE/ex2/ex2.html#installlaunch-r-packages",
    "title": "Exercise 2",
    "section": "",
    "text": "This exercise uses the R packages tmap, sf and tidyverse.\n\npacman::p_load(sf,tmap,tidyverse)"
  },
  {
    "objectID": "HOE/ex2/ex2.html#download-and-import-data",
    "href": "HOE/ex2/ex2.html#download-and-import-data",
    "title": "Exercise 2",
    "section": "",
    "text": "Download the following:\nMaster Plan 2014 Subzone Boundary Data\nSingapore Residents by Planning Are / Subzone, Age Group, Sex, and Dwelling\nUsing st_read(), import the following geospatial data into R:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\HOE\\ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNext, import the aspatial data and save it into an R dataframe:\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Preparation\nBefore a thematic map can be made, a data table with 2020 values needs to prepared. The data table should include the following:\n\nYOUNG: Age groups 0-4 until 20-24\nECONOMY ACTIVE: Age groups 25-29 until 60-64\nAGED: Age group 65+\nTOTAL: All age groups\nDEPENDENCY: the ratio between the YOUNG and AGED ages groups against the ECONOMY ACTIVE age groups\n\nPerform data wrangling and transformation using the code below:\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n  mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %&gt;%\n  mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nBefore we can perform the georelational join, one extra step is needed to convert the values in PA and SZ into uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() is used to join the geographical data and attribute table using planning and subzone name as the common identifiers.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nSave the joined data in a file:\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "HOE/ex2/ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "HOE/ex2/ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Exercise 2",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties, or census units, using area patterns or graduated colors. Two approaches can be used to prepare thematic maps using tmap:\n\nPlotting qucikly using qtm()\nPlotting highly customisable thematic maps by using tmap elements\n\nThe easiest way to draw a choropleth map using tmap is by using qtm(), which provides a concise default visualisation in many cases.\nThe code below draws a cartographic standard choropleth map:\n\ntmap_mode() with “plot” option produces a static map, “view” produces an interactive map.\n“fill” argument is used to map the attribute.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWhilst fast and simple to use, the disadvantage of qtm() is that it makes the aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map, use tmap’s drawing elements.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency Ratio\") + tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type = \"8star\", size = 2) + tm_scale_bar() + tm_grid(alpha = 0.2) + tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nLet’s break down this block of code into its subfunctions:\ntm_shape() is used to define the input data, and tm_polygons is used to draw out the Planning Subzones:\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable to tm_polygons():\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nIn actuality, tm_polygons() is a wrapper function of tm_fill() and tm_border(). tm_fill() shades the polygons according to the default colorscheme, while tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code below only uses tm_fill() to draw a choropleth map:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundaries of the Planning Subzones, tm_borders() will be used:\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\nThe alpha argument is used to define transparency using a value between 0 (transparent) and 1 (opaque). By default, the alpha value of the col is used (usually 1).\nBesides alpha, there are three other arguments for tm_borders():\n\ncol -&gt; border color,\nlwd -&gt; borderline width, default 1,\nlty -&gt; borderline type, default “solid’ .\n\nMost choropleth maps employ data classification methods. Classification takes large number of observations and groups them into data ranges.\ntmap provides a total of ten data classification methods, shown below:\n\nfixed\nsd\nequal\npretty\nquantile (grouping by quantile)\nkmeans (kmeans clustering)\nhclust (hierarchical clustering)\nbclust (bagged clustering)\nfisher (fisher method)\njenks (jenks optimization)\n\nTo define a data classification method, the style argument tm_fill() or tm_polygon will be used.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below uses the equal classification method.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe distribution of the data using the quantile data classification method is more evenly distributed than the equal data classification method.\nusing jenks\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"jenks\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing fisher\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"fisher\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing kmeans\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 5, style = \"kmeans\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 2\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 2, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 10\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 10, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nusing quantile, n = 20\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 20, style = \"quantile\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nFor all the inbuilt styles, the category breaks are computed internally. In order to override the default parameters, the breakpoints can be set explicitly using the breaks argument to tm_fill(). In tmap, the breaks include a minimum and maximum. As such, n+1 elements must be specified to create n categories.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nUsing the above results as reference, we set the breakpoints at .6, .7, .8, and .9. With the addition of the min and max breakpoints, the breaks vector is c(0, 0.6, 0.7, 0.8, 0.9, 1).\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00, 19)) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap supports color ramps either defined by the user, or from a prebuilt set from the RColorBrewer package.\nAssigning the preferred color to the palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nReverse the color shading using “-”\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include the title, scale bar, compass, margins, and aspect ratios.\nIn tmap, several legend options are provided to change the placement, format, and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed, whcih can be called using tmap_style()\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Blues\") + tm_borders(alpha = 0.5) + tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\ntmap also provides arguments to draw map features such as compass, scale bar, and grid lines.\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"No. of persons\") + tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\", main.title.position = \"center\", main.title.size = 1.2, legend.height = 0.45, legend.width = 0.35, frame = TRUE) + tm_borders(alpha = 0.5) + tm_compass(type=\"8star\", size = 2) + tm_scale_bar(width = 0.15) + tm_grid(lwd = 0.1, alpha = 0.2) + tm_credits(\"sajdad\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nReset the default style using the code below:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nFacet maps are composed of multiple small maps arranged adjacently, and enable the visualisation of how spatial relationships change with respect to another variable, such as time.\ntmap allows facet maps to be plotted in 3 ways:\n\nby assigning multiple values to at least one of the aesthetic arguments\nby defining a group-by variable in tm_facets(),\nby creating multiple stand-alone maps using tmap_arrange()\n\nThe code below creates facet maps by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020) + tm_fill(c(\"YOUNG\", \"AGED\"), style = \"equal\", palette = \"Blues\") + tm_layout(legend.position = c(\"right\", \"bottom\")) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by assigning multiple value to at least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020) + tm_polygons(c(\"DEPENDENCY\", \"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\", \"Greens\")) + tm_layout(legend.position =  c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_facets():\n\ntm_shape(mpsz_pop2020) +  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette =  \"Blues\", thres.poly = 0) + tm_facets(by=\"REGION_N\", free.coords = TRUE, drop.units = TRUE) + tm_layout(legend.show = FALSE, title.position = c(\"center\", \"center\"), title.size = 20) + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe code below creates facet maps by using tm_arrange():\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"YOUNG\", style = \"quantile\", palette = \"Blues\")\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons (\"AGED\", style = \"quantile\", palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nInstead of creating a facet map, the selection function can be used to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ]) + tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) + tm_layout(legend.outside = TRUE, legend.outside.size = 0.2, legend.outside.position = c(\"right\", \"bottom\"), frame = FALSE) + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HOE/ex4/ex4.html",
    "href": "HOE/ex4/ex4.html",
    "title": "Ex4",
    "section": "",
    "text": "Network Constrained Spatial Point Patterns Analysis (NetSPAA) is a set of methods specifically designed for analyzing spatial point events that occur on or alongside networks. These events could include the locations of traffic accidents, childcare centers, or other spatial occurrences, while the networks themselves could be road systems, river networks, or similar structures.\nThis exercise uses spNetwork functions to derive network kernel density estimation (NKDE), and perform network G-function and K-function analysis.\n\n\nThis exercises uses the R packages sf , tmap, spNetwork, and tidyverse.\n\n#pacman::p_load(sf, tmap, spNetwork, tidyverse)\n\n\n\n\nDownload the following:\nPunggol_St\nPunggol_CC\nUsing st_read(), import the following geospatial data into R:\n\n#network &lt;- st_read(dsn = \"data\", layer = \"Punggol_St\")\n\n\n#childcare &lt;- st_read(dsn = \"data\", layer = \"Punggol_CC\")\n\nVisualise the data using the code below:\n\n#plot(st_geometry(network))\n#plot(childcare, add = T, col = 'red', pch = 19)\n\n\n#tmap_mode('view')\n#tmap_shape(childcare) +\n#  tm_dots() +\n#  tm_shape(network) +\n#  tm_lines()\n\n\n#tmap_mode('plot')\n\n\n\n\nBefore computing NKDE, the SpatialLines object needs to be cut into lixels according to a chosen resolution, using lixelize_lines().\n\n#lixels &lt;- lixelize_lines(network, 700, mindist = 375)\n\n\nlixel length set to 700m,\nminimum lixel length set to 350m\n\nAfter splitting into lixels, if the length of a lixel is less than mindist, it is then added to the previous lixel. THe default mindist is 1/10th of the maxdist.\nNext, lines_center() is used to generate a SpatialPointsDataFrame with line centre points:\n\n#samples &lt;- lines_center(lixels)\n\nUse the code below to compute NKDE:"
  },
  {
    "objectID": "HOE/ex4/ex4.html#installlaunch-r-packages",
    "href": "HOE/ex4/ex4.html#installlaunch-r-packages",
    "title": "Ex4",
    "section": "",
    "text": "This exercises uses the R packages sf , tmap, spNetwork, and tidyverse.\n\n#pacman::p_load(sf, tmap, spNetwork, tidyverse)"
  },
  {
    "objectID": "HOE/ex4/ex4.html#download-and-import-data",
    "href": "HOE/ex4/ex4.html#download-and-import-data",
    "title": "Ex4",
    "section": "",
    "text": "Download the following:\nPunggol_St\nPunggol_CC\nUsing st_read(), import the following geospatial data into R:\n\n#network &lt;- st_read(dsn = \"data\", layer = \"Punggol_St\")\n\n\n#childcare &lt;- st_read(dsn = \"data\", layer = \"Punggol_CC\")\n\nVisualise the data using the code below:\n\n#plot(st_geometry(network))\n#plot(childcare, add = T, col = 'red', pch = 19)\n\n\n#tmap_mode('view')\n#tmap_shape(childcare) +\n#  tm_dots() +\n#  tm_shape(network) +\n#  tm_lines()\n\n\n#tmap_mode('plot')"
  },
  {
    "objectID": "HOE/ex4/ex4.html#nkde-analysis",
    "href": "HOE/ex4/ex4.html#nkde-analysis",
    "title": "Ex4",
    "section": "",
    "text": "Before computing NKDE, the SpatialLines object needs to be cut into lixels according to a chosen resolution, using lixelize_lines().\n\n#lixels &lt;- lixelize_lines(network, 700, mindist = 375)\n\n\nlixel length set to 700m,\nminimum lixel length set to 350m\n\nAfter splitting into lixels, if the length of a lixel is less than mindist, it is then added to the previous lixel. THe default mindist is 1/10th of the maxdist.\nNext, lines_center() is used to generate a SpatialPointsDataFrame with line centre points:\n\n#samples &lt;- lines_center(lixels)\n\nUse the code below to compute NKDE:"
  },
  {
    "objectID": "ICE/ex3/ice3.html",
    "href": "ICE/ex3/ice3.html",
    "title": "ICE 3",
    "section": "",
    "text": "# eval: false\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/pwnyt/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\pwnyt\\AppData\\Local\\Temp\\RtmpSaalB0\\downloaded_packages\n\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, sp)\n\n\nacled_sf &lt;- st_read(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nReading layer `ACLED_Myanmar' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex3\\data\\ACLED_Myanmar.csv' \n  using driver `CSV'\n\n\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nacled_sf %&gt;%\n  filter(year == 2023 | \n           event_type == \"Political violence\") %&gt;%\n  tm_shape()+\n  tm_dots()"
  },
  {
    "objectID": "ICE/ex3/ice3.html#installlaunch-r",
    "href": "ICE/ex3/ice3.html#installlaunch-r",
    "title": "ICE 3",
    "section": "",
    "text": "# eval: false\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/pwnyt/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\pwnyt\\AppData\\Local\\Temp\\RtmpSaalB0\\downloaded_packages\n\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, sp)\n\n\nacled_sf &lt;- st_read(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nReading layer `ACLED_Myanmar' from data source \n  `C:\\Users\\pwnyt\\Documents\\GitHub\\415\\ICE\\ex3\\data\\ACLED_Myanmar.csv' \n  using driver `CSV'\n\n\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nacled_sf %&gt;%\n  filter(year == 2023 | \n           event_type == \"Political violence\") %&gt;%\n  tm_shape()+\n  tm_dots()"
  },
  {
    "objectID": "ICE/ex5/ice5.html",
    "href": "ICE/ex5/ice5.html",
    "title": "ICE5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan_sf  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nJoin the dataframes together:\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nsave file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- as_Spatial(hunan_sf)\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nfixed bandwidth\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\ngeoweighted summary stats\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = bw_AIC, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\nviz\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\",\n                                n = 5,\n                                style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Dist of geoweighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size =0.8,\n            legend.height = 1.0 ,\n            legend.width = 1.0,\n            frame = TRUE)"
  },
  {
    "objectID": "ICE/ex5/ice5.html#installlaunch-r-packages",
    "href": "ICE/ex5/ice5.html#installlaunch-r-packages",
    "title": "ICE5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan_sf  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nJoin the dataframes together:\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nsave file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- as_Spatial(hunan_sf)\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nfixed bandwidth\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\ngeoweighted summary stats\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = bw_AIC, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\nviz\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\",\n                                n = 5,\n                                style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Dist of geoweighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size =0.8,\n            legend.height = 1.0 ,\n            legend.width = 1.0,\n            frame = TRUE)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]